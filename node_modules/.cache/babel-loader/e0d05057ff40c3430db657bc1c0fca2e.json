{"ast":null,"code":"import { Vector3, ParametricGeometry, BufferGeometry, Curve } from 'three';\n/**\n * Experimenting of primitive geometry creation using Surface Parametric equations\n */\n\nconst ParametricGeometries = {\n  klein: function (v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, y, z;\n\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n\n    y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function (width, height) {\n    return (u, v, target) => {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function (u, t, target) {\n    // flat mobius strip\n    // http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    let x, y, z;\n    const a = 2;\n    x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function (u, t, target) {\n    // volumetric mobius strip\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25,\n          a = 0.125,\n          b = 0.65;\n    let x, y, z;\n    x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  }\n};\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nParametricGeometries.TubeGeometry = function (path, segments, radius, segmentsRadius, closed) {\n  this.path = path;\n  this.segments = segments || 64;\n  this.radius = radius || 1;\n  this.segmentsRadius = segmentsRadius || 8;\n  this.closed = closed || false;\n  const scope = this,\n        numpoints = this.segments + 1;\n  const frames = path.computeFrenetFrames(segments, closed),\n        tangents = frames.tangents,\n        normals = frames.normals,\n        binormals = frames.binormals; // proxy internals\n\n  this.tangents = tangents;\n  this.normals = normals;\n  this.binormals = binormals;\n  const position = new Vector3();\n\n  const ParametricTube = (u, v, target) => {\n    v *= 2 * Math.PI;\n    let i = u * (numpoints - 1);\n    i = Math.floor(i);\n    path.getPointAt(u, position);\n    const normal = normals[i];\n    const binormal = binormals[i];\n    const cx = -scope.radius * Math.cos(v); // TODO: Hack: Negating it so it faces outside.\n\n    const cy = scope.radius * Math.sin(v);\n    position.x += cx * normal.x + cy * binormal.x;\n    position.y += cx * normal.y + cy * binormal.y;\n    position.z += cx * normal.z + cy * binormal.z;\n    target.copy(position);\n  };\n\n  ParametricGeometry.call(this, ParametricTube, segments, segmentsRadius);\n};\n\nParametricGeometries.TubeGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.TubeGeometry.prototype.constructor = ParametricGeometries.TubeGeometry;\n/*********************************************\n *\n * Parametric Replacement for TorusKnotGeometry\n *\n *********************************************/\n\nParametricGeometries.TorusKnotGeometry = function (radius, tube, segmentsT, segmentsR, p, q) {\n  this.radius = radius || 200;\n  this.tube = tube || 40;\n  this.segmentsT = segmentsT || 64;\n  this.segmentsR = segmentsR || 8;\n  this.p = p || 2;\n  this.q = q || 3;\n\n  class TorusKnotCurve extends Curve {\n    constructor() {\n      super();\n    }\n\n    getPoint(t, optionalTarget) {\n      const point = optionalTarget || new Vector3();\n      t *= Math.PI * 2;\n      const r = 0.5;\n      const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n      const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n      const z = r * Math.sin(q * t);\n      return point.set(x, y, z).multiplyScalar(radius);\n    }\n\n  }\n\n  const segments = segmentsT;\n  const radiusSegments = segmentsR;\n  const extrudePath = new TorusKnotCurve();\n  ParametricGeometries.TubeGeometry.call(this, extrudePath, segments, tube, radiusSegments, true, false);\n};\n\nParametricGeometries.TorusKnotGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.TorusKnotGeometry.prototype.constructor = ParametricGeometries.TorusKnotGeometry;\n/*********************************************\n *\n * Parametric Replacement for SphereGeometry\n *\n *********************************************/\n\nParametricGeometries.SphereGeometry = function (size, u, v) {\n  function sphere(u, v, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    const x = size * Math.sin(u) * Math.cos(v);\n    const y = size * Math.sin(u) * Math.sin(v);\n    const z = size * Math.cos(u);\n    target.set(x, y, z);\n  }\n\n  ParametricGeometry.call(this, sphere, u, v);\n};\n\nParametricGeometries.SphereGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.SphereGeometry.prototype.constructor = ParametricGeometries.SphereGeometry;\n/*********************************************\n *\n * Parametric Replacement for PlaneGeometry\n *\n *********************************************/\n\nParametricGeometries.PlaneGeometry = function (width, depth, segmentsWidth, segmentsDepth) {\n  function plane(u, v, target) {\n    const x = u * width;\n    const y = 0;\n    const z = v * depth;\n    target.set(x, y, z);\n  }\n\n  ParametricGeometry.call(this, plane, segmentsWidth, segmentsDepth);\n};\n\nParametricGeometries.PlaneGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.PlaneGeometry.prototype.constructor = ParametricGeometries.PlaneGeometry;\nexport { ParametricGeometries };","map":{"version":3,"names":["Vector3","ParametricGeometry","BufferGeometry","Curve","ParametricGeometries","klein","v","u","target","Math","PI","x","y","z","cos","sin","set","plane","width","height","mobius","t","a","mobius3d","phi","major","b","TubeGeometry","path","segments","radius","segmentsRadius","closed","scope","numpoints","frames","computeFrenetFrames","tangents","normals","binormals","position","ParametricTube","i","floor","getPointAt","normal","binormal","cx","cy","copy","call","prototype","Object","create","constructor","TorusKnotGeometry","tube","segmentsT","segmentsR","p","q","TorusKnotCurve","getPoint","optionalTarget","point","r","multiplyScalar","radiusSegments","extrudePath","SphereGeometry","size","sphere","PlaneGeometry","depth","segmentsWidth","segmentsDepth"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/three-stdlib/geometries/ParametricGeometries.js"],"sourcesContent":["import { Vector3, ParametricGeometry, BufferGeometry, Curve } from 'three';\n\n/**\n * Experimenting of primitive geometry creation using Surface Parametric equations\n */\n\nconst ParametricGeometries = {\n  klein: function (v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, y, z;\n\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n\n    y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function (width, height) {\n    return (u, v, target) => {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function (u, t, target) {\n    // flat mobius strip\n    // http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    let x, y, z;\n    const a = 2;\n    x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function (u, t, target) {\n    // volumetric mobius strip\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25,\n          a = 0.125,\n          b = 0.65;\n    let x, y, z;\n    x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  }\n};\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nParametricGeometries.TubeGeometry = function (path, segments, radius, segmentsRadius, closed) {\n  this.path = path;\n  this.segments = segments || 64;\n  this.radius = radius || 1;\n  this.segmentsRadius = segmentsRadius || 8;\n  this.closed = closed || false;\n  const scope = this,\n        numpoints = this.segments + 1;\n  const frames = path.computeFrenetFrames(segments, closed),\n        tangents = frames.tangents,\n        normals = frames.normals,\n        binormals = frames.binormals; // proxy internals\n\n  this.tangents = tangents;\n  this.normals = normals;\n  this.binormals = binormals;\n  const position = new Vector3();\n\n  const ParametricTube = (u, v, target) => {\n    v *= 2 * Math.PI;\n    let i = u * (numpoints - 1);\n    i = Math.floor(i);\n    path.getPointAt(u, position);\n    const normal = normals[i];\n    const binormal = binormals[i];\n    const cx = -scope.radius * Math.cos(v); // TODO: Hack: Negating it so it faces outside.\n\n    const cy = scope.radius * Math.sin(v);\n    position.x += cx * normal.x + cy * binormal.x;\n    position.y += cx * normal.y + cy * binormal.y;\n    position.z += cx * normal.z + cy * binormal.z;\n    target.copy(position);\n  };\n\n  ParametricGeometry.call(this, ParametricTube, segments, segmentsRadius);\n};\n\nParametricGeometries.TubeGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.TubeGeometry.prototype.constructor = ParametricGeometries.TubeGeometry;\n/*********************************************\n *\n * Parametric Replacement for TorusKnotGeometry\n *\n *********************************************/\n\nParametricGeometries.TorusKnotGeometry = function (radius, tube, segmentsT, segmentsR, p, q) {\n  this.radius = radius || 200;\n  this.tube = tube || 40;\n  this.segmentsT = segmentsT || 64;\n  this.segmentsR = segmentsR || 8;\n  this.p = p || 2;\n  this.q = q || 3;\n\n  class TorusKnotCurve extends Curve {\n    constructor() {\n      super();\n    }\n\n    getPoint(t, optionalTarget) {\n      const point = optionalTarget || new Vector3();\n      t *= Math.PI * 2;\n      const r = 0.5;\n      const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n      const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n      const z = r * Math.sin(q * t);\n      return point.set(x, y, z).multiplyScalar(radius);\n    }\n\n  }\n\n  const segments = segmentsT;\n  const radiusSegments = segmentsR;\n  const extrudePath = new TorusKnotCurve();\n  ParametricGeometries.TubeGeometry.call(this, extrudePath, segments, tube, radiusSegments, true, false);\n};\n\nParametricGeometries.TorusKnotGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.TorusKnotGeometry.prototype.constructor = ParametricGeometries.TorusKnotGeometry;\n/*********************************************\n *\n * Parametric Replacement for SphereGeometry\n *\n *********************************************/\n\nParametricGeometries.SphereGeometry = function (size, u, v) {\n  function sphere(u, v, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    const x = size * Math.sin(u) * Math.cos(v);\n    const y = size * Math.sin(u) * Math.sin(v);\n    const z = size * Math.cos(u);\n    target.set(x, y, z);\n  }\n\n  ParametricGeometry.call(this, sphere, u, v);\n};\n\nParametricGeometries.SphereGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.SphereGeometry.prototype.constructor = ParametricGeometries.SphereGeometry;\n/*********************************************\n *\n * Parametric Replacement for PlaneGeometry\n *\n *********************************************/\n\nParametricGeometries.PlaneGeometry = function (width, depth, segmentsWidth, segmentsDepth) {\n  function plane(u, v, target) {\n    const x = u * width;\n    const y = 0;\n    const z = v * depth;\n    target.set(x, y, z);\n  }\n\n  ParametricGeometry.call(this, plane, segmentsWidth, segmentsDepth);\n};\n\nParametricGeometries.PlaneGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.PlaneGeometry.prototype.constructor = ParametricGeometries.PlaneGeometry;\n\nexport { ParametricGeometries };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}