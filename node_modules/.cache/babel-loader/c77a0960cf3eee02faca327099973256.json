{"ast":null,"code":"import { Vector3, Vector2, Plane, Line3 } from 'three';\nexport const closestPointLineToLine = function () {\n  // https://github.com/juj/MathGeoLib/blob/master/src/Geometry/Line.cpp#L56\n  const dir1 = new Vector3();\n  const dir2 = new Vector3();\n  const v02 = new Vector3();\n  return function closestPointLineToLine(l1, l2, result) {\n    const v0 = l1.start;\n    const v10 = dir1;\n    const v2 = l2.start;\n    const v32 = dir2;\n    v02.subVectors(v0, v2);\n    dir1.subVectors(l1.end, l2.start);\n    dir2.subVectors(l2.end, l2.start); // float d0232 = v02.Dot(v32);\n\n    const d0232 = v02.dot(v32); // float d3210 = v32.Dot(v10);\n\n    const d3210 = v32.dot(v10); // float d3232 = v32.Dot(v32);\n\n    const d3232 = v32.dot(v32); // float d0210 = v02.Dot(v10);\n\n    const d0210 = v02.dot(v10); // float d1010 = v10.Dot(v10);\n\n    const d1010 = v10.dot(v10); // float denom = d1010*d3232 - d3210*d3210;\n\n    const denom = d1010 * d3232 - d3210 * d3210;\n    let d, d2;\n\n    if (denom !== 0) {\n      d = (d0232 * d3210 - d0210 * d3232) / denom;\n    } else {\n      d = 0;\n    }\n\n    d2 = (d0232 + d * d3210) / d3232;\n    result.x = d;\n    result.y = d2;\n  };\n}();\nexport const closestPointsSegmentToSegment = function () {\n  // https://github.com/juj/MathGeoLib/blob/master/src/Geometry/LineSegment.cpp#L187\n  const paramResult = new Vector2();\n  const temp1 = new Vector3();\n  const temp2 = new Vector3();\n  return function closestPointsSegmentToSegment(l1, l2, target1, target2) {\n    closestPointLineToLine(l1, l2, paramResult);\n    let d = paramResult.x;\n    let d2 = paramResult.y;\n\n    if (d >= 0 && d <= 1 && d2 >= 0 && d2 <= 1) {\n      l1.at(d, target1);\n      l2.at(d2, target2);\n      return;\n    } else if (d >= 0 && d <= 1) {\n      // Only d2 is out of bounds.\n      if (d2 < 0) {\n        l2.at(0, target2);\n      } else {\n        l2.at(1, target2);\n      }\n\n      l1.closestPointToPoint(target2, true, target1);\n      return;\n    } else if (d2 >= 0 && d2 <= 1) {\n      // Only d is out of bounds.\n      if (d < 0) {\n        l1.at(0, target1);\n      } else {\n        l1.at(1, target1);\n      }\n\n      l2.closestPointToPoint(target1, true, target2);\n      return;\n    } else {\n      // Both u and u2 are out of bounds.\n      let p;\n\n      if (d < 0) {\n        p = l1.start;\n      } else {\n        p = l1.end;\n      }\n\n      let p2;\n\n      if (d2 < 0) {\n        p2 = l2.start;\n      } else {\n        p2 = l2.end;\n      }\n\n      const closestPoint = temp1;\n      const closestPoint2 = temp2;\n      l1.closestPointToPoint(p2, true, temp1);\n      l2.closestPointToPoint(p, true, temp2);\n\n      if (closestPoint.distanceToSquared(p2) <= closestPoint2.distanceToSquared(p)) {\n        target1.copy(closestPoint);\n        target2.copy(p2);\n        return;\n      } else {\n        target1.copy(p);\n        target2.copy(closestPoint2);\n        return;\n      }\n    }\n  };\n}();\nexport const sphereIntersectTriangle = function () {\n  // https://stackoverflow.com/questions/34043955/detect-collision-between-sphere-and-triangle-in-three-js\n  const closestPointTemp = new Vector3();\n  const projectedPointTemp = new Vector3();\n  const planeTemp = new Plane();\n  const lineTemp = new Line3();\n  return function sphereIntersectTriangle(sphere, triangle) {\n    const {\n      radius,\n      center\n    } = sphere;\n    const {\n      a,\n      b,\n      c\n    } = triangle; // phase 1\n\n    lineTemp.start = a;\n    lineTemp.end = b;\n    const closestPoint1 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\n    if (closestPoint1.distanceTo(center) <= radius) return true;\n    lineTemp.start = a;\n    lineTemp.end = c;\n    const closestPoint2 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\n    if (closestPoint2.distanceTo(center) <= radius) return true;\n    lineTemp.start = b;\n    lineTemp.end = c;\n    const closestPoint3 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\n    if (closestPoint3.distanceTo(center) <= radius) return true; // phase 2\n\n    const plane = triangle.getPlane(planeTemp);\n    const dp = Math.abs(plane.distanceToPoint(center));\n\n    if (dp <= radius) {\n      const pp = plane.projectPoint(center, projectedPointTemp);\n      const cp = triangle.containsPoint(pp);\n      if (cp) return true;\n    }\n\n    return false;\n  };\n}();","map":{"version":3,"names":["Vector3","Vector2","Plane","Line3","closestPointLineToLine","dir1","dir2","v02","l1","l2","result","v0","start","v10","v2","v32","subVectors","end","d0232","dot","d3210","d3232","d0210","d1010","denom","d","d2","x","y","closestPointsSegmentToSegment","paramResult","temp1","temp2","target1","target2","at","closestPointToPoint","p","p2","closestPoint","closestPoint2","distanceToSquared","copy","sphereIntersectTriangle","closestPointTemp","projectedPointTemp","planeTemp","lineTemp","sphere","triangle","radius","center","a","b","c","closestPoint1","distanceTo","closestPoint3","plane","getPlane","dp","Math","abs","distanceToPoint","pp","projectPoint","cp","containsPoint"],"sources":["/home/odin/Desktop/THPâ˜ /Developpeur/Final_Project/pokeland/node_modules/three-mesh-bvh/src/math/MathUtilities.js"],"sourcesContent":["import { Vector3, Vector2, Plane, Line3 } from 'three';\r\n\r\nexport const closestPointLineToLine = ( function () {\r\n\r\n\t// https://github.com/juj/MathGeoLib/blob/master/src/Geometry/Line.cpp#L56\r\n\tconst dir1 = new Vector3();\r\n\tconst dir2 = new Vector3();\r\n\tconst v02 = new Vector3();\r\n\treturn function closestPointLineToLine( l1, l2, result ) {\r\n\r\n\t\tconst v0 = l1.start;\r\n\t\tconst v10 = dir1;\r\n\t\tconst v2 = l2.start;\r\n\t\tconst v32 = dir2;\r\n\r\n\t\tv02.subVectors( v0, v2 );\r\n\t\tdir1.subVectors( l1.end, l2.start );\r\n\t\tdir2.subVectors( l2.end, l2.start );\r\n\r\n\t\t// float d0232 = v02.Dot(v32);\r\n\t\tconst d0232 = v02.dot( v32 );\r\n\r\n\t\t// float d3210 = v32.Dot(v10);\r\n\t\tconst d3210 = v32.dot( v10 );\r\n\r\n\t\t// float d3232 = v32.Dot(v32);\r\n\t\tconst d3232 = v32.dot( v32 );\r\n\r\n\t\t// float d0210 = v02.Dot(v10);\r\n\t\tconst d0210 = v02.dot( v10 );\r\n\r\n\t\t// float d1010 = v10.Dot(v10);\r\n\t\tconst d1010 = v10.dot( v10 );\r\n\r\n\t\t// float denom = d1010*d3232 - d3210*d3210;\r\n\t\tconst denom = d1010 * d3232 - d3210 * d3210;\r\n\r\n\t\tlet d, d2;\r\n\t\tif ( denom !== 0 ) {\r\n\r\n\t\t\td = ( d0232 * d3210 - d0210 * d3232 ) / denom;\r\n\r\n\t\t} else {\r\n\r\n\t\t\td = 0;\r\n\r\n\t\t}\r\n\r\n\t\td2 = ( d0232 + d * d3210 ) / d3232;\r\n\r\n\t\tresult.x = d;\r\n\t\tresult.y = d2;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nexport const closestPointsSegmentToSegment = ( function () {\r\n\r\n\t// https://github.com/juj/MathGeoLib/blob/master/src/Geometry/LineSegment.cpp#L187\r\n\tconst paramResult = new Vector2();\r\n\tconst temp1 = new Vector3();\r\n\tconst temp2 = new Vector3();\r\n\treturn function closestPointsSegmentToSegment( l1, l2, target1, target2 ) {\r\n\r\n\t\tclosestPointLineToLine( l1, l2, paramResult );\r\n\r\n\t\tlet d = paramResult.x;\r\n\t\tlet d2 = paramResult.y;\r\n\t\tif ( d >= 0 && d <= 1 && d2 >= 0 && d2 <= 1 ) {\r\n\r\n\t\t\tl1.at( d, target1 );\r\n\t\t\tl2.at( d2, target2 );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t} else if ( d >= 0 && d <= 1 ) {\r\n\r\n\t\t\t// Only d2 is out of bounds.\r\n\t\t\tif ( d2 < 0 ) {\r\n\r\n\t\t\t\tl2.at( 0, target2 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tl2.at( 1, target2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tl1.closestPointToPoint( target2, true, target1 );\r\n\t\t\treturn;\r\n\r\n\t\t} else if ( d2 >= 0 && d2 <= 1 ) {\r\n\r\n\t\t\t// Only d is out of bounds.\r\n\t\t\tif ( d < 0 ) {\r\n\r\n\t\t\t\tl1.at( 0, target1 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tl1.at( 1, target1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tl2.closestPointToPoint( target1, true, target2 );\r\n\t\t\treturn;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Both u and u2 are out of bounds.\r\n\t\t\tlet p;\r\n\t\t\tif ( d < 0 ) {\r\n\r\n\t\t\t\tp = l1.start;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tp = l1.end;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet p2;\r\n\t\t\tif ( d2 < 0 ) {\r\n\r\n\t\t\t\tp2 = l2.start;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tp2 = l2.end;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst closestPoint = temp1;\r\n\t\t\tconst closestPoint2 = temp2;\r\n\t\t\tl1.closestPointToPoint( p2, true, temp1 );\r\n\t\t\tl2.closestPointToPoint( p, true, temp2 );\r\n\r\n\t\t\tif ( closestPoint.distanceToSquared( p2 ) <= closestPoint2.distanceToSquared( p ) ) {\r\n\r\n\t\t\t\ttarget1.copy( closestPoint );\r\n\t\t\t\ttarget2.copy( p2 );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttarget1.copy( p );\r\n\t\t\t\ttarget2.copy( closestPoint2 );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nexport const sphereIntersectTriangle = ( function () {\r\n\r\n\t// https://stackoverflow.com/questions/34043955/detect-collision-between-sphere-and-triangle-in-three-js\r\n\tconst closestPointTemp = new Vector3();\r\n\tconst projectedPointTemp = new Vector3();\r\n\tconst planeTemp = new Plane();\r\n\tconst lineTemp = new Line3();\r\n\treturn function sphereIntersectTriangle( sphere, triangle ) {\r\n\r\n\t\tconst { radius, center } = sphere;\r\n\t\tconst { a, b, c } = triangle;\r\n\r\n\t\t// phase 1\r\n\t\tlineTemp.start = a;\r\n\t\tlineTemp.end = b;\r\n\t\tconst closestPoint1 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\r\n\t\tif ( closestPoint1.distanceTo( center ) <= radius ) return true;\r\n\r\n\t\tlineTemp.start = a;\r\n\t\tlineTemp.end = c;\r\n\t\tconst closestPoint2 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\r\n\t\tif ( closestPoint2.distanceTo( center ) <= radius ) return true;\r\n\r\n\t\tlineTemp.start = b;\r\n\t\tlineTemp.end = c;\r\n\t\tconst closestPoint3 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\r\n\t\tif ( closestPoint3.distanceTo( center ) <= radius ) return true;\r\n\r\n\t\t// phase 2\r\n\t\tconst plane = triangle.getPlane( planeTemp );\r\n\t\tconst dp = Math.abs( plane.distanceToPoint( center ) );\r\n\t\tif ( dp <= radius ) {\r\n\r\n\t\t\tconst pp = plane.projectPoint( center, projectedPointTemp );\r\n\t\t\tconst cp = triangle.containsPoint( pp );\r\n\t\t\tif ( cp ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t};\r\n\r\n} )();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}