{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty'; // Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\n\nclass SimplexNoise {\n  // To remove the need for index wrapping, double the permutation table length\n  // A lookup table to traverse the simplex around a given point in 4D.\n  // Details can be found where this table is used, in the 4D noise method.\n\n  /**\n   * You can pass in a random number generator object if you like.\n   * It is assumed to have a random() method.\n   */\n  constructor() {\n    let r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Math;\n\n    _defineProperty(this, \"grad3\", [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]]);\n\n    _defineProperty(this, \"grad4\", [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]]);\n\n    _defineProperty(this, \"p\", []);\n\n    _defineProperty(this, \"perm\", []);\n\n    _defineProperty(this, \"simplex\", [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]]);\n\n    _defineProperty(this, \"dot\", (g, x, y) => {\n      return g[0] * x + g[1] * y;\n    });\n\n    _defineProperty(this, \"dot3\", (g, x, y, z) => {\n      return g[0] * x + g[1] * y + g[2] * z;\n    });\n\n    _defineProperty(this, \"dot4\", (g, x, y, z, w) => {\n      return g[0] * x + g[1] * y + g[2] * z + g[3] * w;\n    });\n\n    _defineProperty(this, \"noise\", (xin, yin) => {\n      let n0;\n      let n1;\n      let n2; // Noise contributions from the three corners\n      // Skew the input space to determine which simplex cell we're in\n\n      const F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n      const s = (xin + yin) * F2; // Hairy factor for 2D\n\n      const i = Math.floor(xin + s);\n      const j = Math.floor(yin + s);\n      const G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n      const t = (i + j) * G2;\n      const X0 = i - t; // Unskew the cell origin back to (x,y) space\n\n      const Y0 = j - t;\n      const x0 = xin - X0; // The x,y distances from the cell origin\n\n      const y0 = yin - Y0; // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n      let i1 = 0; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n      let j1 = 1;\n\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n\n\n      const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n      const y1 = y0 - j1 + G2;\n      const x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n      const y2 = y0 - 1.0 + 2.0 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n      const ii = i & 255;\n      const jj = j & 255;\n      const gi0 = this.perm[ii + this.perm[jj]] % 12;\n      const gi1 = this.perm[ii + i1 + this.perm[jj + j1]] % 12;\n      const gi2 = this.perm[ii + 1 + this.perm[jj + 1]] % 12; // Calculate the contribution from the three corners\n\n      let t0 = 0.5 - x0 * x0 - y0 * y0;\n\n      if (t0 < 0) {\n        n0 = 0.0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot(this.grad3[gi0], x0, y0); // (x,y) of grad3 used for 2D gradient\n      }\n\n      let t1 = 0.5 - x1 * x1 - y1 * y1;\n\n      if (t1 < 0) {\n        n1 = 0.0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot(this.grad3[gi1], x1, y1);\n      }\n\n      let t2 = 0.5 - x2 * x2 - y2 * y2;\n\n      if (t2 < 0) {\n        n2 = 0.0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot(this.grad3[gi2], x2, y2);\n      } // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n\n\n      return 70.0 * (n0 + n1 + n2);\n    });\n\n    _defineProperty(this, \"noise3d\", (xin, yin, zin) => {\n      // Noise contributions from the four corners\n      let n0;\n      let n1;\n      let n2;\n      let n3; // Skew the input space to determine which simplex cell we're in\n\n      const F3 = 1.0 / 3.0;\n      const s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n\n      const i = Math.floor(xin + s);\n      const j = Math.floor(yin + s);\n      const k = Math.floor(zin + s);\n      const G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\n      const t = (i + j + k) * G3;\n      const X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\n      const Y0 = j - t;\n      const Z0 = k - t;\n      const x0 = xin - X0; // The x,y,z distances from the cell origin\n\n      const y0 = yin - Y0;\n      const z0 = zin - Z0; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n\n      let i1;\n      let j1;\n      let k1; // Offsets for second corner of simplex in (i,j,k) coords\n\n      let i2;\n      let j2;\n      let k2; // Offsets for third corner of simplex in (i,j,k) coords\n\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0; // X Y Z order\n        } else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1; // X Z Y order\n        } else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n\n      } else {\n        // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1; // Z Y X order\n        } else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1; // Y Z X order\n        } else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n\n      } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n\n\n      const x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\n      const y1 = y0 - j1 + G3;\n      const z1 = z0 - k1 + G3;\n      const x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\n      const y2 = y0 - j2 + 2.0 * G3;\n      const z2 = z0 - k2 + 2.0 * G3;\n      const x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\n      const y3 = y0 - 1.0 + 3.0 * G3;\n      const z3 = z0 - 1.0 + 3.0 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n      const ii = i & 255;\n      const jj = j & 255;\n      const kk = k & 255;\n      const gi0 = this.perm[ii + this.perm[jj + this.perm[kk]]] % 12;\n      const gi1 = this.perm[ii + i1 + this.perm[jj + j1 + this.perm[kk + k1]]] % 12;\n      const gi2 = this.perm[ii + i2 + this.perm[jj + j2 + this.perm[kk + k2]]] % 12;\n      const gi3 = this.perm[ii + 1 + this.perm[jj + 1 + this.perm[kk + 1]]] % 12; // Calculate the contribution from the four corners\n\n      let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\n      if (t0 < 0) {\n        n0 = 0.0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot3(this.grad3[gi0], x0, y0, z0);\n      }\n\n      let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\n      if (t1 < 0) {\n        n1 = 0.0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot3(this.grad3[gi1], x1, y1, z1);\n      }\n\n      let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\n      if (t2 < 0) {\n        n2 = 0.0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot3(this.grad3[gi2], x2, y2, z2);\n      }\n\n      let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\n      if (t3 < 0) {\n        n3 = 0.0;\n      } else {\n        t3 *= t3;\n        n3 = t3 * t3 * this.dot3(this.grad3[gi3], x3, y3, z3);\n      } // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n\n\n      return 32.0 * (n0 + n1 + n2 + n3);\n    });\n\n    _defineProperty(this, \"noise4d\", (x, y, z, w) => {\n      // For faster and easier lookups\n      const grad4 = this.grad4;\n      const simplex = this.simplex;\n      const perm = this.perm; // The skewing and unskewing factors are hairy again for the 4D case\n\n      const F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n      const G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n      let n0;\n      let n1;\n      let n2;\n      let n3;\n      let n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\n      const s = (x + y + z + w) * F4; // Factor for 4D skewing\n\n      const i = Math.floor(x + s);\n      const j = Math.floor(y + s);\n      const k = Math.floor(z + s);\n      const l = Math.floor(w + s);\n      const t = (i + j + k + l) * G4; // Factor for 4D unskewing\n\n      const X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\n      const Y0 = j - t;\n      const Z0 = k - t;\n      const W0 = l - t;\n      const x0 = x - X0; // The x,y,z,w distances from the cell origin\n\n      const y0 = y - Y0;\n      const z0 = z - Z0;\n      const w0 = w - W0; // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // The method below is a good way of finding the ordering of x,y,z,w and\n      // then find the correct traversal order for the simplex we’re in.\n      // First, six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to add up binary bits\n      // for an integer index.\n\n      const c1 = x0 > y0 ? 32 : 0;\n      const c2 = x0 > z0 ? 16 : 0;\n      const c3 = y0 > z0 ? 8 : 0;\n      const c4 = x0 > w0 ? 4 : 0;\n      const c5 = y0 > w0 ? 2 : 0;\n      const c6 = z0 > w0 ? 1 : 0;\n      const c = c1 + c2 + c3 + c4 + c5 + c6; // The integer offsets for the second simplex corner\n\n      let i1;\n      let j1;\n      let k1;\n      let l1; // The integer offsets for the third simplex corner\n\n      let i2;\n      let j2;\n      let k2;\n      let l2; // The integer offsets for the fourth simplex corner\n\n      let i3;\n      let j3;\n      let k3;\n      let l3; // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\n      i1 = simplex[c][0] >= 3 ? 1 : 0;\n      j1 = simplex[c][1] >= 3 ? 1 : 0;\n      k1 = simplex[c][2] >= 3 ? 1 : 0;\n      l1 = simplex[c][3] >= 3 ? 1 : 0; // The number 2 in the \"simplex\" array is at the second largest coordinate.\n\n      i2 = simplex[c][0] >= 2 ? 1 : 0;\n      j2 = simplex[c][1] >= 2 ? 1 : 0;\n      k2 = simplex[c][2] >= 2 ? 1 : 0;\n      l2 = simplex[c][3] >= 2 ? 1 : 0; // The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\n      i3 = simplex[c][0] >= 1 ? 1 : 0;\n      j3 = simplex[c][1] >= 1 ? 1 : 0;\n      k3 = simplex[c][2] >= 1 ? 1 : 0;\n      l3 = simplex[c][3] >= 1 ? 1 : 0; // The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\n      const x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\n      const y1 = y0 - j1 + G4;\n      const z1 = z0 - k1 + G4;\n      const w1 = w0 - l1 + G4;\n      const x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\n      const y2 = y0 - j2 + 2.0 * G4;\n      const z2 = z0 - k2 + 2.0 * G4;\n      const w2 = w0 - l2 + 2.0 * G4;\n      const x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\n      const y3 = y0 - j3 + 3.0 * G4;\n      const z3 = z0 - k3 + 3.0 * G4;\n      const w3 = w0 - l3 + 3.0 * G4;\n      const x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\n      const y4 = y0 - 1.0 + 4.0 * G4;\n      const z4 = z0 - 1.0 + 4.0 * G4;\n      const w4 = w0 - 1.0 + 4.0 * G4; // Work out the hashed gradient indices of the five simplex corners\n\n      const ii = i & 255;\n      const jj = j & 255;\n      const kk = k & 255;\n      const ll = l & 255;\n      const gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;\n      const gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;\n      const gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;\n      const gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;\n      const gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32; // Calculate the contribution from the five corners\n\n      let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\n      if (t0 < 0) {\n        n0 = 0.0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot4(grad4[gi0], x0, y0, z0, w0);\n      }\n\n      let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\n      if (t1 < 0) {\n        n1 = 0.0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot4(grad4[gi1], x1, y1, z1, w1);\n      }\n\n      let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\n      if (t2 < 0) {\n        n2 = 0.0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot4(grad4[gi2], x2, y2, z2, w2);\n      }\n\n      let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\n      if (t3 < 0) {\n        n3 = 0.0;\n      } else {\n        t3 *= t3;\n        n3 = t3 * t3 * this.dot4(grad4[gi3], x3, y3, z3, w3);\n      }\n\n      let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\n      if (t4 < 0) {\n        n4 = 0.0;\n      } else {\n        t4 *= t4;\n        n4 = t4 * t4 * this.dot4(grad4[gi4], x4, y4, z4, w4);\n      } // Sum up and scale the result to cover the range [-1,1]\n\n\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    });\n\n    for (let i = 0; i < 256; i++) {\n      this.p[i] = Math.floor(r.random() * 256);\n    }\n\n    for (let i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n    }\n  }\n\n}\n\nexport { SimplexNoise };","map":{"version":3,"names":["_defineProperty","SimplexNoise","constructor","r","Math","g","x","y","z","w","xin","yin","n0","n1","n2","F2","sqrt","s","i","floor","j","G2","t","X0","Y0","x0","y0","i1","j1","x1","y1","x2","y2","ii","jj","gi0","perm","gi1","gi2","t0","dot","grad3","t1","t2","zin","n3","F3","k","G3","Z0","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","kk","gi3","dot3","t3","grad4","simplex","F4","G4","n4","l","W0","w0","c1","c2","c3","c4","c5","c6","c","l1","l2","i3","j3","k3","l3","w1","w2","w3","x4","y4","z4","w4","ll","gi4","dot4","t4","p","random"],"sources":["/home/odin/Desktop/THP☠/Developpeur/Final_Project/pokeland/node_modules/three-stdlib/math/SimplexNoise.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\n// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\nclass SimplexNoise {\n  // To remove the need for index wrapping, double the permutation table length\n  // A lookup table to traverse the simplex around a given point in 4D.\n  // Details can be found where this table is used, in the 4D noise method.\n\n  /**\n   * You can pass in a random number generator object if you like.\n   * It is assumed to have a random() method.\n   */\n  constructor(r = Math) {\n    _defineProperty(this, \"grad3\", [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]]);\n\n    _defineProperty(this, \"grad4\", [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]]);\n\n    _defineProperty(this, \"p\", []);\n\n    _defineProperty(this, \"perm\", []);\n\n    _defineProperty(this, \"simplex\", [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]]);\n\n    _defineProperty(this, \"dot\", (g, x, y) => {\n      return g[0] * x + g[1] * y;\n    });\n\n    _defineProperty(this, \"dot3\", (g, x, y, z) => {\n      return g[0] * x + g[1] * y + g[2] * z;\n    });\n\n    _defineProperty(this, \"dot4\", (g, x, y, z, w) => {\n      return g[0] * x + g[1] * y + g[2] * z + g[3] * w;\n    });\n\n    _defineProperty(this, \"noise\", (xin, yin) => {\n      let n0;\n      let n1;\n      let n2; // Noise contributions from the three corners\n      // Skew the input space to determine which simplex cell we're in\n\n      const F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n      const s = (xin + yin) * F2; // Hairy factor for 2D\n\n      const i = Math.floor(xin + s);\n      const j = Math.floor(yin + s);\n      const G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n      const t = (i + j) * G2;\n      const X0 = i - t; // Unskew the cell origin back to (x,y) space\n\n      const Y0 = j - t;\n      const x0 = xin - X0; // The x,y distances from the cell origin\n\n      const y0 = yin - Y0; // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n      let i1 = 0; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n      let j1 = 1;\n\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n\n\n      const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n      const y1 = y0 - j1 + G2;\n      const x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n      const y2 = y0 - 1.0 + 2.0 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n      const ii = i & 255;\n      const jj = j & 255;\n      const gi0 = this.perm[ii + this.perm[jj]] % 12;\n      const gi1 = this.perm[ii + i1 + this.perm[jj + j1]] % 12;\n      const gi2 = this.perm[ii + 1 + this.perm[jj + 1]] % 12; // Calculate the contribution from the three corners\n\n      let t0 = 0.5 - x0 * x0 - y0 * y0;\n\n      if (t0 < 0) {\n        n0 = 0.0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot(this.grad3[gi0], x0, y0); // (x,y) of grad3 used for 2D gradient\n      }\n\n      let t1 = 0.5 - x1 * x1 - y1 * y1;\n\n      if (t1 < 0) {\n        n1 = 0.0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot(this.grad3[gi1], x1, y1);\n      }\n\n      let t2 = 0.5 - x2 * x2 - y2 * y2;\n\n      if (t2 < 0) {\n        n2 = 0.0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot(this.grad3[gi2], x2, y2);\n      } // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n\n\n      return 70.0 * (n0 + n1 + n2);\n    });\n\n    _defineProperty(this, \"noise3d\", (xin, yin, zin) => {\n      // Noise contributions from the four corners\n      let n0;\n      let n1;\n      let n2;\n      let n3; // Skew the input space to determine which simplex cell we're in\n\n      const F3 = 1.0 / 3.0;\n      const s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n\n      const i = Math.floor(xin + s);\n      const j = Math.floor(yin + s);\n      const k = Math.floor(zin + s);\n      const G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\n      const t = (i + j + k) * G3;\n      const X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\n      const Y0 = j - t;\n      const Z0 = k - t;\n      const x0 = xin - X0; // The x,y,z distances from the cell origin\n\n      const y0 = yin - Y0;\n      const z0 = zin - Z0; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n\n      let i1;\n      let j1;\n      let k1; // Offsets for second corner of simplex in (i,j,k) coords\n\n      let i2;\n      let j2;\n      let k2; // Offsets for third corner of simplex in (i,j,k) coords\n\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0; // X Y Z order\n        } else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1; // X Z Y order\n        } else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n\n      } else {\n        // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1; // Z Y X order\n        } else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1; // Y Z X order\n        } else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n\n      } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n\n\n      const x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\n      const y1 = y0 - j1 + G3;\n      const z1 = z0 - k1 + G3;\n      const x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\n      const y2 = y0 - j2 + 2.0 * G3;\n      const z2 = z0 - k2 + 2.0 * G3;\n      const x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\n      const y3 = y0 - 1.0 + 3.0 * G3;\n      const z3 = z0 - 1.0 + 3.0 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n      const ii = i & 255;\n      const jj = j & 255;\n      const kk = k & 255;\n      const gi0 = this.perm[ii + this.perm[jj + this.perm[kk]]] % 12;\n      const gi1 = this.perm[ii + i1 + this.perm[jj + j1 + this.perm[kk + k1]]] % 12;\n      const gi2 = this.perm[ii + i2 + this.perm[jj + j2 + this.perm[kk + k2]]] % 12;\n      const gi3 = this.perm[ii + 1 + this.perm[jj + 1 + this.perm[kk + 1]]] % 12; // Calculate the contribution from the four corners\n\n      let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\n      if (t0 < 0) {\n        n0 = 0.0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot3(this.grad3[gi0], x0, y0, z0);\n      }\n\n      let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\n      if (t1 < 0) {\n        n1 = 0.0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot3(this.grad3[gi1], x1, y1, z1);\n      }\n\n      let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\n      if (t2 < 0) {\n        n2 = 0.0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot3(this.grad3[gi2], x2, y2, z2);\n      }\n\n      let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\n      if (t3 < 0) {\n        n3 = 0.0;\n      } else {\n        t3 *= t3;\n        n3 = t3 * t3 * this.dot3(this.grad3[gi3], x3, y3, z3);\n      } // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n\n\n      return 32.0 * (n0 + n1 + n2 + n3);\n    });\n\n    _defineProperty(this, \"noise4d\", (x, y, z, w) => {\n      // For faster and easier lookups\n      const grad4 = this.grad4;\n      const simplex = this.simplex;\n      const perm = this.perm; // The skewing and unskewing factors are hairy again for the 4D case\n\n      const F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n      const G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n      let n0;\n      let n1;\n      let n2;\n      let n3;\n      let n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\n      const s = (x + y + z + w) * F4; // Factor for 4D skewing\n\n      const i = Math.floor(x + s);\n      const j = Math.floor(y + s);\n      const k = Math.floor(z + s);\n      const l = Math.floor(w + s);\n      const t = (i + j + k + l) * G4; // Factor for 4D unskewing\n\n      const X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\n      const Y0 = j - t;\n      const Z0 = k - t;\n      const W0 = l - t;\n      const x0 = x - X0; // The x,y,z,w distances from the cell origin\n\n      const y0 = y - Y0;\n      const z0 = z - Z0;\n      const w0 = w - W0; // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // The method below is a good way of finding the ordering of x,y,z,w and\n      // then find the correct traversal order for the simplex we’re in.\n      // First, six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to add up binary bits\n      // for an integer index.\n\n      const c1 = x0 > y0 ? 32 : 0;\n      const c2 = x0 > z0 ? 16 : 0;\n      const c3 = y0 > z0 ? 8 : 0;\n      const c4 = x0 > w0 ? 4 : 0;\n      const c5 = y0 > w0 ? 2 : 0;\n      const c6 = z0 > w0 ? 1 : 0;\n      const c = c1 + c2 + c3 + c4 + c5 + c6; // The integer offsets for the second simplex corner\n\n      let i1;\n      let j1;\n      let k1;\n      let l1; // The integer offsets for the third simplex corner\n\n      let i2;\n      let j2;\n      let k2;\n      let l2; // The integer offsets for the fourth simplex corner\n\n      let i3;\n      let j3;\n      let k3;\n      let l3; // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\n      i1 = simplex[c][0] >= 3 ? 1 : 0;\n      j1 = simplex[c][1] >= 3 ? 1 : 0;\n      k1 = simplex[c][2] >= 3 ? 1 : 0;\n      l1 = simplex[c][3] >= 3 ? 1 : 0; // The number 2 in the \"simplex\" array is at the second largest coordinate.\n\n      i2 = simplex[c][0] >= 2 ? 1 : 0;\n      j2 = simplex[c][1] >= 2 ? 1 : 0;\n      k2 = simplex[c][2] >= 2 ? 1 : 0;\n      l2 = simplex[c][3] >= 2 ? 1 : 0; // The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\n      i3 = simplex[c][0] >= 1 ? 1 : 0;\n      j3 = simplex[c][1] >= 1 ? 1 : 0;\n      k3 = simplex[c][2] >= 1 ? 1 : 0;\n      l3 = simplex[c][3] >= 1 ? 1 : 0; // The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\n      const x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\n      const y1 = y0 - j1 + G4;\n      const z1 = z0 - k1 + G4;\n      const w1 = w0 - l1 + G4;\n      const x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\n      const y2 = y0 - j2 + 2.0 * G4;\n      const z2 = z0 - k2 + 2.0 * G4;\n      const w2 = w0 - l2 + 2.0 * G4;\n      const x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\n      const y3 = y0 - j3 + 3.0 * G4;\n      const z3 = z0 - k3 + 3.0 * G4;\n      const w3 = w0 - l3 + 3.0 * G4;\n      const x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\n      const y4 = y0 - 1.0 + 4.0 * G4;\n      const z4 = z0 - 1.0 + 4.0 * G4;\n      const w4 = w0 - 1.0 + 4.0 * G4; // Work out the hashed gradient indices of the five simplex corners\n\n      const ii = i & 255;\n      const jj = j & 255;\n      const kk = k & 255;\n      const ll = l & 255;\n      const gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;\n      const gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;\n      const gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;\n      const gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;\n      const gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32; // Calculate the contribution from the five corners\n\n      let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\n      if (t0 < 0) {\n        n0 = 0.0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot4(grad4[gi0], x0, y0, z0, w0);\n      }\n\n      let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\n      if (t1 < 0) {\n        n1 = 0.0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot4(grad4[gi1], x1, y1, z1, w1);\n      }\n\n      let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\n      if (t2 < 0) {\n        n2 = 0.0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot4(grad4[gi2], x2, y2, z2, w2);\n      }\n\n      let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\n      if (t3 < 0) {\n        n3 = 0.0;\n      } else {\n        t3 *= t3;\n        n3 = t3 * t3 * this.dot4(grad4[gi3], x3, y3, z3, w3);\n      }\n\n      let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\n      if (t4 < 0) {\n        n4 = 0.0;\n      } else {\n        t4 *= t4;\n        n4 = t4 * t4 * this.dot4(grad4[gi4], x4, y4, z4, w4);\n      } // Sum up and scale the result to cover the range [-1,1]\n\n\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    });\n\n    for (let i = 0; i < 256; i++) {\n      this.p[i] = Math.floor(r.random() * 256);\n    }\n\n    for (let i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n    }\n  }\n\n}\n\nexport { SimplexNoise };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}