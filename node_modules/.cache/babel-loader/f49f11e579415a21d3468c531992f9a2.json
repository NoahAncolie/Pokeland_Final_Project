{"ast":null,"code":"export default function potpack(boxes) {\n  // calculate total box area and maximum box width\n  let area = 0;\n  let maxWidth = 0;\n\n  for (const box of boxes) {\n    area += box.w * box.h;\n    maxWidth = Math.max(maxWidth, box.w);\n  } // sort the boxes for insertion by height, descending\n\n\n  boxes.sort((a, b) => b.h - a.h); // aim for a squarish resulting container,\n  // slightly adjusted for sub-100% space utilization\n\n  const startWidth = Math.max(Math.ceil(Math.sqrt(area / 0.95)), maxWidth); // start with a single empty space, unbounded at the bottom\n\n  const spaces = [{\n    x: 0,\n    y: 0,\n    w: startWidth,\n    h: Infinity\n  }];\n  let width = 0;\n  let height = 0;\n\n  for (const box of boxes) {\n    // look through spaces backwards so that we check smaller spaces first\n    for (let i = spaces.length - 1; i >= 0; i--) {\n      const space = spaces[i]; // look for empty spaces that can accommodate the current box\n\n      if (box.w > space.w || box.h > space.h) continue; // found the space; add the box to its top-left corner\n      // |-------|-------|\n      // |  box  |       |\n      // |_______|       |\n      // |         space |\n      // |_______________|\n\n      box.x = space.x;\n      box.y = space.y;\n      height = Math.max(height, box.y + box.h);\n      width = Math.max(width, box.x + box.w);\n\n      if (box.w === space.w && box.h === space.h) {\n        // space matches the box exactly; remove it\n        const last = spaces.pop();\n        if (i < spaces.length) spaces[i] = last;\n      } else if (box.h === space.h) {\n        // space matches the box height; update it accordingly\n        // |-------|---------------|\n        // |  box  | updated space |\n        // |_______|_______________|\n        space.x += box.w;\n        space.w -= box.w;\n      } else if (box.w === space.w) {\n        // space matches the box width; update it accordingly\n        // |---------------|\n        // |      box      |\n        // |_______________|\n        // | updated space |\n        // |_______________|\n        space.y += box.h;\n        space.h -= box.h;\n      } else {\n        // otherwise the box splits the space into two spaces\n        // |-------|-----------|\n        // |  box  | new space |\n        // |_______|___________|\n        // | updated space     |\n        // |___________________|\n        spaces.push({\n          x: space.x + box.w,\n          y: space.y,\n          w: space.w - box.w,\n          h: box.h\n        });\n        space.y += box.h;\n        space.h -= box.h;\n      }\n\n      break;\n    }\n  }\n\n  return {\n    w: width,\n    // container width\n    h: height,\n    // container height\n    fill: area / (width * height) || 0 // space utilization\n\n  };\n}","map":{"version":3,"names":["potpack","boxes","area","maxWidth","box","w","h","Math","max","sort","a","b","startWidth","ceil","sqrt","spaces","x","y","Infinity","width","height","i","length","space","last","pop","push","fill"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/potpack/index.mjs"],"sourcesContent":["\nexport default function potpack(boxes) {\n\n    // calculate total box area and maximum box width\n    let area = 0;\n    let maxWidth = 0;\n\n    for (const box of boxes) {\n        area += box.w * box.h;\n        maxWidth = Math.max(maxWidth, box.w);\n    }\n\n    // sort the boxes for insertion by height, descending\n    boxes.sort((a, b) => b.h - a.h);\n\n    // aim for a squarish resulting container,\n    // slightly adjusted for sub-100% space utilization\n    const startWidth = Math.max(Math.ceil(Math.sqrt(area / 0.95)), maxWidth);\n\n    // start with a single empty space, unbounded at the bottom\n    const spaces = [{x: 0, y: 0, w: startWidth, h: Infinity}];\n\n    let width = 0;\n    let height = 0;\n\n    for (const box of boxes) {\n        // look through spaces backwards so that we check smaller spaces first\n        for (let i = spaces.length - 1; i >= 0; i--) {\n            const space = spaces[i];\n\n            // look for empty spaces that can accommodate the current box\n            if (box.w > space.w || box.h > space.h) continue;\n\n            // found the space; add the box to its top-left corner\n            // |-------|-------|\n            // |  box  |       |\n            // |_______|       |\n            // |         space |\n            // |_______________|\n            box.x = space.x;\n            box.y = space.y;\n\n            height = Math.max(height, box.y + box.h);\n            width = Math.max(width, box.x + box.w);\n\n            if (box.w === space.w && box.h === space.h) {\n                // space matches the box exactly; remove it\n                const last = spaces.pop();\n                if (i < spaces.length) spaces[i] = last;\n\n            } else if (box.h === space.h) {\n                // space matches the box height; update it accordingly\n                // |-------|---------------|\n                // |  box  | updated space |\n                // |_______|_______________|\n                space.x += box.w;\n                space.w -= box.w;\n\n            } else if (box.w === space.w) {\n                // space matches the box width; update it accordingly\n                // |---------------|\n                // |      box      |\n                // |_______________|\n                // | updated space |\n                // |_______________|\n                space.y += box.h;\n                space.h -= box.h;\n\n            } else {\n                // otherwise the box splits the space into two spaces\n                // |-------|-----------|\n                // |  box  | new space |\n                // |_______|___________|\n                // | updated space     |\n                // |___________________|\n                spaces.push({\n                    x: space.x + box.w,\n                    y: space.y,\n                    w: space.w - box.w,\n                    h: box.h\n                });\n                space.y += box.h;\n                space.h -= box.h;\n            }\n            break;\n        }\n    }\n\n    return {\n        w: width, // container width\n        h: height, // container height\n        fill: (area / (width * height)) || 0 // space utilization\n    };\n}\n"],"mappings":"AACA,eAAe,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;EAEnC;EACA,IAAIC,IAAI,GAAG,CAAX;EACA,IAAIC,QAAQ,GAAG,CAAf;;EAEA,KAAK,MAAMC,GAAX,IAAkBH,KAAlB,EAAyB;IACrBC,IAAI,IAAIE,GAAG,CAACC,CAAJ,GAAQD,GAAG,CAACE,CAApB;IACAH,QAAQ,GAAGI,IAAI,CAACC,GAAL,CAASL,QAAT,EAAmBC,GAAG,CAACC,CAAvB,CAAX;EACH,CATkC,CAWnC;;;EACAJ,KAAK,CAACQ,IAAN,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACL,CAAF,GAAMI,CAAC,CAACJ,CAA7B,EAZmC,CAcnC;EACA;;EACA,MAAMM,UAAU,GAAGL,IAAI,CAACC,GAAL,CAASD,IAAI,CAACM,IAAL,CAAUN,IAAI,CAACO,IAAL,CAAUZ,IAAI,GAAG,IAAjB,CAAV,CAAT,EAA4CC,QAA5C,CAAnB,CAhBmC,CAkBnC;;EACA,MAAMY,MAAM,GAAG,CAAC;IAACC,CAAC,EAAE,CAAJ;IAAOC,CAAC,EAAE,CAAV;IAAaZ,CAAC,EAAEO,UAAhB;IAA4BN,CAAC,EAAEY;EAA/B,CAAD,CAAf;EAEA,IAAIC,KAAK,GAAG,CAAZ;EACA,IAAIC,MAAM,GAAG,CAAb;;EAEA,KAAK,MAAMhB,GAAX,IAAkBH,KAAlB,EAAyB;IACrB;IACA,KAAK,IAAIoB,CAAC,GAAGN,MAAM,CAACO,MAAP,GAAgB,CAA7B,EAAgCD,CAAC,IAAI,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;MACzC,MAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB,CADyC,CAGzC;;MACA,IAAIjB,GAAG,CAACC,CAAJ,GAAQkB,KAAK,CAAClB,CAAd,IAAmBD,GAAG,CAACE,CAAJ,GAAQiB,KAAK,CAACjB,CAArC,EAAwC,SAJC,CAMzC;MACA;MACA;MACA;MACA;MACA;;MACAF,GAAG,CAACY,CAAJ,GAAQO,KAAK,CAACP,CAAd;MACAZ,GAAG,CAACa,CAAJ,GAAQM,KAAK,CAACN,CAAd;MAEAG,MAAM,GAAGb,IAAI,CAACC,GAAL,CAASY,MAAT,EAAiBhB,GAAG,CAACa,CAAJ,GAAQb,GAAG,CAACE,CAA7B,CAAT;MACAa,KAAK,GAAGZ,IAAI,CAACC,GAAL,CAASW,KAAT,EAAgBf,GAAG,CAACY,CAAJ,GAAQZ,GAAG,CAACC,CAA5B,CAAR;;MAEA,IAAID,GAAG,CAACC,CAAJ,KAAUkB,KAAK,CAAClB,CAAhB,IAAqBD,GAAG,CAACE,CAAJ,KAAUiB,KAAK,CAACjB,CAAzC,EAA4C;QACxC;QACA,MAAMkB,IAAI,GAAGT,MAAM,CAACU,GAAP,EAAb;QACA,IAAIJ,CAAC,GAAGN,MAAM,CAACO,MAAf,EAAuBP,MAAM,CAACM,CAAD,CAAN,GAAYG,IAAZ;MAE1B,CALD,MAKO,IAAIpB,GAAG,CAACE,CAAJ,KAAUiB,KAAK,CAACjB,CAApB,EAAuB;QAC1B;QACA;QACA;QACA;QACAiB,KAAK,CAACP,CAAN,IAAWZ,GAAG,CAACC,CAAf;QACAkB,KAAK,CAAClB,CAAN,IAAWD,GAAG,CAACC,CAAf;MAEH,CARM,MAQA,IAAID,GAAG,CAACC,CAAJ,KAAUkB,KAAK,CAAClB,CAApB,EAAuB;QAC1B;QACA;QACA;QACA;QACA;QACA;QACAkB,KAAK,CAACN,CAAN,IAAWb,GAAG,CAACE,CAAf;QACAiB,KAAK,CAACjB,CAAN,IAAWF,GAAG,CAACE,CAAf;MAEH,CAVM,MAUA;QACH;QACA;QACA;QACA;QACA;QACA;QACAS,MAAM,CAACW,IAAP,CAAY;UACRV,CAAC,EAAEO,KAAK,CAACP,CAAN,GAAUZ,GAAG,CAACC,CADT;UAERY,CAAC,EAAEM,KAAK,CAACN,CAFD;UAGRZ,CAAC,EAAEkB,KAAK,CAAClB,CAAN,GAAUD,GAAG,CAACC,CAHT;UAIRC,CAAC,EAAEF,GAAG,CAACE;QAJC,CAAZ;QAMAiB,KAAK,CAACN,CAAN,IAAWb,GAAG,CAACE,CAAf;QACAiB,KAAK,CAACjB,CAAN,IAAWF,GAAG,CAACE,CAAf;MACH;;MACD;IACH;EACJ;;EAED,OAAO;IACHD,CAAC,EAAEc,KADA;IACO;IACVb,CAAC,EAAEc,MAFA;IAEQ;IACXO,IAAI,EAAGzB,IAAI,IAAIiB,KAAK,GAAGC,MAAZ,CAAL,IAA6B,CAHhC,CAGkC;;EAHlC,CAAP;AAKH"},"metadata":{},"sourceType":"module"}