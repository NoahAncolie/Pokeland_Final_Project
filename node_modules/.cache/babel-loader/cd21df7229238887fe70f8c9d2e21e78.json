{"ast":null,"code":"import { BufferGeometry, BufferAttribute, InterleavedBuffer, InterleavedBufferAttribute, TrianglesDrawMode, TriangleFanDrawMode, TriangleStripDrawMode, Vector3, Float32BufferAttribute } from 'three';\nimport { getWithKey } from '../types/helpers.js';\n/**\n * @param  {Array<BufferGeometry>} geometries\n * @param  {Boolean} useGroups\n * @return {BufferGeometry}\n */\n\nconst mergeBufferGeometries = (geometries, useGroups) => {\n  const isIndexed = geometries[0].index !== null;\n  const attributesUsed = new Set(Object.keys(geometries[0].attributes));\n  const morphAttributesUsed = new Set(Object.keys(geometries[0].morphAttributes));\n  const attributes = {};\n  const morphAttributes = {};\n  const morphTargetsRelative = geometries[0].morphTargetsRelative;\n  const mergedGeometry = new BufferGeometry();\n  let offset = 0;\n  geometries.forEach((geom, i) => {\n    let attributesCount = 0; // ensure that all geometries are indexed, or none\n\n    if (isIndexed !== (geom.index !== null)) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.');\n      return null;\n    } // gather attributes, exit early if they're different\n\n\n    for (let name in geom.attributes) {\n      if (!attributesUsed.has(name)) {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.');\n        return null;\n      }\n\n      if (attributes[name] === undefined) {\n        attributes[name] = [];\n      }\n\n      attributes[name].push(geom.attributes[name]);\n      attributesCount++;\n    } // ensure geometries have the same number of attributes\n\n\n    if (attributesCount !== attributesUsed.size) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.');\n      return null;\n    } // gather morph attributes, exit early if they're different\n\n\n    if (morphTargetsRelative !== geom.morphTargetsRelative) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.');\n      return null;\n    }\n\n    for (let name in geom.morphAttributes) {\n      if (!morphAttributesUsed.has(name)) {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.');\n        return null;\n      }\n\n      if (morphAttributes[name] === undefined) morphAttributes[name] = [];\n      morphAttributes[name].push(geom.morphAttributes[name]);\n    } // gather .userData\n\n\n    mergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];\n    mergedGeometry.userData.mergedUserData.push(geom.userData);\n\n    if (useGroups) {\n      let count;\n\n      if (geom.index) {\n        count = geom.index.count;\n      } else if (geom.attributes.position !== undefined) {\n        count = geom.attributes.position.count;\n      } else {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute');\n        return null;\n      }\n\n      mergedGeometry.addGroup(offset, count, i);\n      offset += count;\n    }\n  }); // merge indices\n\n  if (isIndexed) {\n    let indexOffset = 0;\n    const mergedIndex = [];\n    geometries.forEach(geom => {\n      const index = geom.index;\n\n      for (let j = 0; j < index.count; ++j) {\n        mergedIndex.push(index.getX(j) + indexOffset);\n      }\n\n      indexOffset += geom.attributes.position.count;\n    });\n    mergedGeometry.setIndex(mergedIndex);\n  } // merge attributes\n\n\n  for (let name in attributes) {\n    const mergedAttribute = mergeBufferAttributes(attributes[name]);\n\n    if (!mergedAttribute) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' attribute.');\n      return null;\n    }\n\n    mergedGeometry.setAttribute(name, mergedAttribute);\n  } // merge morph attributes\n\n\n  for (let name in morphAttributes) {\n    const numMorphTargets = morphAttributes[name][0].length;\n    if (numMorphTargets === 0) break;\n    mergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n    mergedGeometry.morphAttributes[name] = [];\n\n    for (let i = 0; i < numMorphTargets; ++i) {\n      const morphAttributesToMerge = [];\n\n      for (let j = 0; j < morphAttributes[name].length; ++j) {\n        morphAttributesToMerge.push(morphAttributes[name][j][i]);\n      }\n\n      const mergedMorphAttribute = mergeBufferAttributes(morphAttributesToMerge);\n\n      if (!mergedMorphAttribute) {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' morphAttribute.');\n        return null;\n      }\n\n      mergedGeometry.morphAttributes[name].push(mergedMorphAttribute);\n    }\n  }\n\n  return mergedGeometry;\n};\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {BufferAttribute}\n */\n\n\nconst mergeBufferAttributes = attributes => {\n  let TypedArray = undefined;\n  let itemSize = undefined;\n  let normalized = undefined;\n  let arrayLength = 0;\n  attributes.forEach(attr => {\n    if (TypedArray === undefined) {\n      TypedArray = attr.array.constructor;\n    }\n\n    if (TypedArray !== attr.array.constructor) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.');\n      return null;\n    }\n\n    if (itemSize === undefined) itemSize = attr.itemSize;\n\n    if (itemSize !== attr.itemSize) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.');\n      return null;\n    }\n\n    if (normalized === undefined) normalized = attr.normalized;\n\n    if (normalized !== attr.normalized) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.');\n      return null;\n    }\n\n    arrayLength += attr.array.length;\n  });\n\n  if (TypedArray && itemSize) {\n    // @ts-expect-error this works in JS and TS is complaining but it's such a tiny thing I can live with the guilt\n    const array = new TypedArray(arrayLength);\n    let offset = 0;\n    attributes.forEach(attr => {\n      array.set(attr.array, offset);\n      offset += attr.array.length;\n    });\n    return new BufferAttribute(array, itemSize, normalized);\n  }\n};\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {Array<InterleavedBufferAttribute>}\n */\n\n\nconst interleaveAttributes = attributes => {\n  // Interleaves the provided attributes into an InterleavedBuffer and returns\n  // a set of InterleavedBufferAttributes for each attribute\n  let TypedArray = undefined;\n  let arrayLength = 0;\n  let stride = 0; // calculate the the length and type of the interleavedBuffer\n\n  for (let i = 0, l = attributes.length; i < l; ++i) {\n    const attribute = attributes[i];\n    if (TypedArray === undefined) TypedArray = attribute.array.constructor;\n\n    if (TypedArray !== attribute.array.constructor) {\n      console.error('AttributeBuffers of different types cannot be interleaved');\n      return null;\n    }\n\n    arrayLength += attribute.array.length;\n    stride += attribute.itemSize;\n  } // Create the set of buffer attributes\n  // @ts-expect-error this works in JS and TS is complaining but it's such a tiny thing I can live with the guilt\n\n\n  const interleavedBuffer = new InterleavedBuffer(new TypedArray(arrayLength), stride);\n  let offset = 0;\n  const res = [];\n  const getters = ['getX', 'getY', 'getZ', 'getW'];\n  const setters = ['setX', 'setY', 'setZ', 'setW'];\n\n  for (let j = 0, l = attributes.length; j < l; j++) {\n    const attribute = attributes[j];\n    const itemSize = attribute.itemSize;\n    const count = attribute.count;\n    const iba = new InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, attribute.normalized);\n    res.push(iba);\n    offset += itemSize; // Move the data for each attribute into the new interleavedBuffer\n    // at the appropriate offset\n\n    for (let c = 0; c < count; c++) {\n      for (let k = 0; k < itemSize; k++) {\n        const set = getWithKey(iba, setters[k]);\n        const get = getWithKey(attribute, getters[k]);\n        set(c, get(c));\n      }\n    }\n  }\n\n  return res;\n};\n/**\n * @param {Array<BufferGeometry>} geometry\n * @return {number}\n */\n\n\nfunction estimateBytesUsed(geometry) {\n  // Return the estimated memory used by this geometry in bytes\n  // Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n  // for InterleavedBufferAttributes.\n  let mem = 0;\n\n  for (let name in geometry.attributes) {\n    const attr = geometry.getAttribute(name);\n    mem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n  }\n\n  const indices = geometry.getIndex();\n  mem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n  return mem;\n}\n/**\n * @param {BufferGeometry} geometry\n * @param {number} tolerance\n * @return {BufferGeometry>}\n */\n\n\nfunction mergeVertices(geometry) {\n  let tolerance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-4;\n  tolerance = Math.max(tolerance, Number.EPSILON); // Generate an index buffer if the geometry doesn't have one, or optimize it\n  // if it's already available.\n\n  const hashToIndex = {};\n  const indices = geometry.getIndex();\n  const positions = geometry.getAttribute('position');\n  const vertexCount = indices ? indices.count : positions.count; // next value for triangle indices\n\n  let nextIndex = 0; // attributes and new attribute arrays\n\n  const attributeNames = Object.keys(geometry.attributes);\n  const attrArrays = {};\n  const morphAttrsArrays = {};\n  const newIndices = [];\n  const getters = ['getX', 'getY', 'getZ', 'getW']; // initialize the arrays\n\n  for (let i = 0, l = attributeNames.length; i < l; i++) {\n    const name = attributeNames[i];\n    attrArrays[name] = [];\n    const morphAttr = geometry.morphAttributes[name];\n\n    if (morphAttr) {\n      morphAttrsArrays[name] = new Array(morphAttr.length).fill(0).map(() => []);\n    }\n  } // convert the error tolerance to an amount of decimal places to truncate to\n\n\n  const decimalShift = Math.log10(1 / tolerance);\n  const shiftMultiplier = Math.pow(10, decimalShift);\n\n  for (let i = 0; i < vertexCount; i++) {\n    const index = indices ? indices.getX(i) : i; // Generate a hash for the vertex attributes at the current index 'i'\n\n    let hash = '';\n\n    for (let j = 0, l = attributeNames.length; j < l; j++) {\n      const name = attributeNames[j];\n      const attribute = geometry.getAttribute(name);\n      const itemSize = attribute.itemSize;\n\n      for (let k = 0; k < itemSize; k++) {\n        // double tilde truncates the decimal value\n        // @ts-ignore no\n        hash += `${~~(attribute[getters[k]](index) * shiftMultiplier)},`;\n      }\n    } // Add another reference to the vertex if it's already\n    // used by another index\n\n\n    if (hash in hashToIndex) {\n      newIndices.push(hashToIndex[hash]);\n    } else {\n      // copy data to the new index in the attribute arrays\n      for (let j = 0, l = attributeNames.length; j < l; j++) {\n        const name = attributeNames[j];\n        const attribute = geometry.getAttribute(name);\n        const morphAttr = geometry.morphAttributes[name];\n        const itemSize = attribute.itemSize;\n        const newarray = attrArrays[name];\n        const newMorphArrays = morphAttrsArrays[name];\n\n        for (let k = 0; k < itemSize; k++) {\n          const getterFunc = getters[k]; // @ts-ignore\n\n          newarray.push(attribute[getterFunc](index));\n\n          if (morphAttr) {\n            for (let m = 0, ml = morphAttr.length; m < ml; m++) {\n              // @ts-ignore\n              newMorphArrays[m].push(morphAttr[m][getterFunc](index));\n            }\n          }\n        }\n      }\n\n      hashToIndex[hash] = nextIndex;\n      newIndices.push(nextIndex);\n      nextIndex++;\n    }\n  } // Generate typed arrays from new attribute arrays and update\n  // the attributeBuffers\n\n\n  const result = geometry.clone();\n\n  for (let i = 0, l = attributeNames.length; i < l; i++) {\n    const name = attributeNames[i];\n    const oldAttribute = geometry.getAttribute(name); //@ts-expect-error  something to do with functions and constructors and new\n\n    const buffer = new oldAttribute.array.constructor(attrArrays[name]);\n    const attribute = new BufferAttribute(buffer, oldAttribute.itemSize, oldAttribute.normalized);\n    result.setAttribute(name, attribute); // Update the attribute arrays\n\n    if (name in morphAttrsArrays) {\n      for (let j = 0; j < morphAttrsArrays[name].length; j++) {\n        const oldMorphAttribute = geometry.morphAttributes[name][j]; //@ts-expect-error something to do with functions and constructors and new\n\n        const buffer = new oldMorphAttribute.array.constructor(morphAttrsArrays[name][j]);\n        const morphAttribute = new BufferAttribute(buffer, oldMorphAttribute.itemSize, oldMorphAttribute.normalized);\n        result.morphAttributes[name][j] = morphAttribute;\n      }\n    }\n  } // indices\n\n\n  result.setIndex(newIndices);\n  return result;\n}\n/**\n * @param {BufferGeometry} geometry\n * @param {number} drawMode\n * @return {BufferGeometry}\n */\n\n\nfunction toTrianglesDrawMode(geometry, drawMode) {\n  if (drawMode === TrianglesDrawMode) {\n    console.warn('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.');\n    return geometry;\n  }\n\n  if (drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode) {\n    let index = geometry.getIndex(); // generate index if not present\n\n    if (index === null) {\n      const indices = [];\n      const position = geometry.getAttribute('position');\n\n      if (position !== undefined) {\n        for (let i = 0; i < position.count; i++) {\n          indices.push(i);\n        }\n\n        geometry.setIndex(indices);\n        index = geometry.getIndex();\n      } else {\n        console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.');\n        return geometry;\n      }\n    } //\n\n\n    const numberOfTriangles = index.count - 2;\n    const newIndices = [];\n\n    if (index) {\n      if (drawMode === TriangleFanDrawMode) {\n        // gl.TRIANGLE_FAN\n        for (let i = 1; i <= numberOfTriangles; i++) {\n          newIndices.push(index.getX(0));\n          newIndices.push(index.getX(i));\n          newIndices.push(index.getX(i + 1));\n        }\n      } else {\n        // gl.TRIANGLE_STRIP\n        for (let i = 0; i < numberOfTriangles; i++) {\n          if (i % 2 === 0) {\n            newIndices.push(index.getX(i));\n            newIndices.push(index.getX(i + 1));\n            newIndices.push(index.getX(i + 2));\n          } else {\n            newIndices.push(index.getX(i + 2));\n            newIndices.push(index.getX(i + 1));\n            newIndices.push(index.getX(i));\n          }\n        }\n      }\n    }\n\n    if (newIndices.length / 3 !== numberOfTriangles) {\n      console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.');\n    } // build final geometry\n\n\n    const newGeometry = geometry.clone();\n    newGeometry.setIndex(newIndices);\n    newGeometry.clearGroups();\n    return newGeometry;\n  } else {\n    console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode);\n    return geometry;\n  }\n}\n/**\n * Calculates the morphed attributes of a morphed/skinned BufferGeometry.\n * Helpful for Raytracing or Decals.\n * @param {Mesh | Line | Points} object An instance of Mesh, Line or Points.\n * @return {Object} An Object with original position/normal attributes and morphed ones.\n */\n\n\nfunction computeMorphedAttributes(object) {\n  if (object.geometry.isBufferGeometry !== true) {\n    console.error('THREE.BufferGeometryUtils: Geometry is not of type BufferGeometry.');\n    return null;\n  }\n\n  const _vA = new Vector3();\n\n  const _vB = new Vector3();\n\n  const _vC = new Vector3();\n\n  const _tempA = new Vector3();\n\n  const _tempB = new Vector3();\n\n  const _tempC = new Vector3();\n\n  const _morphA = new Vector3();\n\n  const _morphB = new Vector3();\n\n  const _morphC = new Vector3();\n\n  function _calculateMorphedAttributeData(object, material, attribute, morphAttribute, morphTargetsRelative, a, b, c, modifiedAttributeArray) {\n    _vA.fromBufferAttribute(attribute, a);\n\n    _vB.fromBufferAttribute(attribute, b);\n\n    _vC.fromBufferAttribute(attribute, c);\n\n    const morphInfluences = object.morphTargetInfluences;\n\n    if ( // @ts-expect-error\n    material.morphTargets && morphAttribute && morphInfluences) {\n      _morphA.set(0, 0, 0);\n\n      _morphB.set(0, 0, 0);\n\n      _morphC.set(0, 0, 0);\n\n      for (let i = 0, il = morphAttribute.length; i < il; i++) {\n        const influence = morphInfluences[i];\n        const morph = morphAttribute[i];\n        if (influence === 0) continue;\n\n        _tempA.fromBufferAttribute(morph, a);\n\n        _tempB.fromBufferAttribute(morph, b);\n\n        _tempC.fromBufferAttribute(morph, c);\n\n        if (morphTargetsRelative) {\n          _morphA.addScaledVector(_tempA, influence);\n\n          _morphB.addScaledVector(_tempB, influence);\n\n          _morphC.addScaledVector(_tempC, influence);\n        } else {\n          _morphA.addScaledVector(_tempA.sub(_vA), influence);\n\n          _morphB.addScaledVector(_tempB.sub(_vB), influence);\n\n          _morphC.addScaledVector(_tempC.sub(_vC), influence);\n        }\n      }\n\n      _vA.add(_morphA);\n\n      _vB.add(_morphB);\n\n      _vC.add(_morphC);\n    }\n\n    if (object.isSkinnedMesh) {\n      // @ts-expect-error – https://github.com/three-types/three-ts-types/issues/37\n      object.boneTransform(a, _vA); // @ts-expect-error – https://github.com/three-types/three-ts-types/issues/37\n\n      object.boneTransform(b, _vB); // @ts-expect-error – https://github.com/three-types/three-ts-types/issues/37\n\n      object.boneTransform(c, _vC);\n    }\n\n    modifiedAttributeArray[a * 3 + 0] = _vA.x;\n    modifiedAttributeArray[a * 3 + 1] = _vA.y;\n    modifiedAttributeArray[a * 3 + 2] = _vA.z;\n    modifiedAttributeArray[b * 3 + 0] = _vB.x;\n    modifiedAttributeArray[b * 3 + 1] = _vB.y;\n    modifiedAttributeArray[b * 3 + 2] = _vB.z;\n    modifiedAttributeArray[c * 3 + 0] = _vC.x;\n    modifiedAttributeArray[c * 3 + 1] = _vC.y;\n    modifiedAttributeArray[c * 3 + 2] = _vC.z;\n  }\n\n  const geometry = object.geometry;\n  const material = object.material;\n  let a, b, c;\n  const index = geometry.index;\n  const positionAttribute = geometry.attributes.position;\n  const morphPosition = geometry.morphAttributes.position;\n  const morphTargetsRelative = geometry.morphTargetsRelative;\n  const normalAttribute = geometry.attributes.normal;\n  const morphNormal = geometry.morphAttributes.position;\n  const groups = geometry.groups;\n  const drawRange = geometry.drawRange;\n  let i, j, il, jl;\n  let group, groupMaterial;\n  let start, end;\n  const modifiedPosition = new Float32Array(positionAttribute.count * positionAttribute.itemSize);\n  const modifiedNormal = new Float32Array(normalAttribute.count * normalAttribute.itemSize);\n\n  if (index !== null) {\n    // indexed buffer geometry\n    if (Array.isArray(material)) {\n      for (i = 0, il = groups.length; i < il; i++) {\n        group = groups[i];\n        groupMaterial = material[group.materialIndex];\n        start = Math.max(group.start, drawRange.start);\n        end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n        for (j = start, jl = end; j < jl; j += 3) {\n          a = index.getX(j);\n          b = index.getX(j + 1);\n          c = index.getX(j + 2);\n\n          _calculateMorphedAttributeData(object, groupMaterial, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n          _calculateMorphedAttributeData(object, groupMaterial, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n        }\n      }\n    } else {\n      start = Math.max(0, drawRange.start);\n      end = Math.min(index.count, drawRange.start + drawRange.count);\n\n      for (i = start, il = end; i < il; i += 3) {\n        a = index.getX(i);\n        b = index.getX(i + 1);\n        c = index.getX(i + 2);\n\n        _calculateMorphedAttributeData(object, material, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n        _calculateMorphedAttributeData(object, material, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n      }\n    }\n  } else if (positionAttribute !== undefined) {\n    // non-indexed buffer geometry\n    if (Array.isArray(material)) {\n      for (i = 0, il = groups.length; i < il; i++) {\n        group = groups[i];\n        groupMaterial = material[group.materialIndex];\n        start = Math.max(group.start, drawRange.start);\n        end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n        for (j = start, jl = end; j < jl; j += 3) {\n          a = j;\n          b = j + 1;\n          c = j + 2;\n\n          _calculateMorphedAttributeData(object, groupMaterial, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n          _calculateMorphedAttributeData(object, groupMaterial, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n        }\n      }\n    } else {\n      start = Math.max(0, drawRange.start);\n      end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n      for (i = start, il = end; i < il; i += 3) {\n        a = i;\n        b = i + 1;\n        c = i + 2;\n\n        _calculateMorphedAttributeData(object, material, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n        _calculateMorphedAttributeData(object, material, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n      }\n    }\n  }\n\n  const morphedPositionAttribute = new Float32BufferAttribute(modifiedPosition, 3);\n  const morphedNormalAttribute = new Float32BufferAttribute(modifiedNormal, 3);\n  return {\n    positionAttribute: positionAttribute,\n    normalAttribute: normalAttribute,\n    morphedPositionAttribute: morphedPositionAttribute,\n    morphedNormalAttribute: morphedNormalAttribute\n  };\n}\n\nexport { computeMorphedAttributes, estimateBytesUsed, interleaveAttributes, mergeBufferAttributes, mergeBufferGeometries, mergeVertices, toTrianglesDrawMode };","map":{"version":3,"names":["BufferGeometry","BufferAttribute","InterleavedBuffer","InterleavedBufferAttribute","TrianglesDrawMode","TriangleFanDrawMode","TriangleStripDrawMode","Vector3","Float32BufferAttribute","getWithKey","mergeBufferGeometries","geometries","useGroups","isIndexed","index","attributesUsed","Set","Object","keys","attributes","morphAttributesUsed","morphAttributes","morphTargetsRelative","mergedGeometry","offset","forEach","geom","i","attributesCount","console","error","name","has","undefined","push","size","userData","mergedUserData","count","position","addGroup","indexOffset","mergedIndex","j","getX","setIndex","mergedAttribute","mergeBufferAttributes","setAttribute","numMorphTargets","length","morphAttributesToMerge","mergedMorphAttribute","TypedArray","itemSize","normalized","arrayLength","attr","array","constructor","set","interleaveAttributes","stride","l","attribute","interleavedBuffer","res","getters","setters","iba","c","k","get","estimateBytesUsed","geometry","mem","getAttribute","BYTES_PER_ELEMENT","indices","getIndex","mergeVertices","tolerance","Math","max","Number","EPSILON","hashToIndex","positions","vertexCount","nextIndex","attributeNames","attrArrays","morphAttrsArrays","newIndices","morphAttr","Array","fill","map","decimalShift","log10","shiftMultiplier","pow","hash","newarray","newMorphArrays","getterFunc","m","ml","result","clone","oldAttribute","buffer","oldMorphAttribute","morphAttribute","toTrianglesDrawMode","drawMode","warn","numberOfTriangles","newGeometry","clearGroups","computeMorphedAttributes","object","isBufferGeometry","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_calculateMorphedAttributeData","material","a","b","modifiedAttributeArray","fromBufferAttribute","morphInfluences","morphTargetInfluences","morphTargets","il","influence","morph","addScaledVector","sub","add","isSkinnedMesh","boneTransform","x","y","z","positionAttribute","morphPosition","normalAttribute","normal","morphNormal","groups","drawRange","jl","group","groupMaterial","start","end","modifiedPosition","Float32Array","modifiedNormal","isArray","materialIndex","min","morphedPositionAttribute","morphedNormalAttribute"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/three-stdlib/utils/BufferGeometryUtils.js"],"sourcesContent":["import { BufferGeometry, BufferAttribute, InterleavedBuffer, InterleavedBufferAttribute, TrianglesDrawMode, TriangleFanDrawMode, TriangleStripDrawMode, Vector3, Float32BufferAttribute } from 'three';\nimport { getWithKey } from '../types/helpers.js';\n\n/**\n * @param  {Array<BufferGeometry>} geometries\n * @param  {Boolean} useGroups\n * @return {BufferGeometry}\n */\nconst mergeBufferGeometries = (geometries, useGroups) => {\n  const isIndexed = geometries[0].index !== null;\n  const attributesUsed = new Set(Object.keys(geometries[0].attributes));\n  const morphAttributesUsed = new Set(Object.keys(geometries[0].morphAttributes));\n  const attributes = {};\n  const morphAttributes = {};\n  const morphTargetsRelative = geometries[0].morphTargetsRelative;\n  const mergedGeometry = new BufferGeometry();\n  let offset = 0;\n  geometries.forEach((geom, i) => {\n    let attributesCount = 0; // ensure that all geometries are indexed, or none\n\n    if (isIndexed !== (geom.index !== null)) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.');\n      return null;\n    } // gather attributes, exit early if they're different\n\n\n    for (let name in geom.attributes) {\n      if (!attributesUsed.has(name)) {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.');\n        return null;\n      }\n\n      if (attributes[name] === undefined) {\n        attributes[name] = [];\n      }\n\n      attributes[name].push(geom.attributes[name]);\n      attributesCount++;\n    } // ensure geometries have the same number of attributes\n\n\n    if (attributesCount !== attributesUsed.size) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.');\n      return null;\n    } // gather morph attributes, exit early if they're different\n\n\n    if (morphTargetsRelative !== geom.morphTargetsRelative) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.');\n      return null;\n    }\n\n    for (let name in geom.morphAttributes) {\n      if (!morphAttributesUsed.has(name)) {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.');\n        return null;\n      }\n\n      if (morphAttributes[name] === undefined) morphAttributes[name] = [];\n      morphAttributes[name].push(geom.morphAttributes[name]);\n    } // gather .userData\n\n\n    mergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];\n    mergedGeometry.userData.mergedUserData.push(geom.userData);\n\n    if (useGroups) {\n      let count;\n\n      if (geom.index) {\n        count = geom.index.count;\n      } else if (geom.attributes.position !== undefined) {\n        count = geom.attributes.position.count;\n      } else {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute');\n        return null;\n      }\n\n      mergedGeometry.addGroup(offset, count, i);\n      offset += count;\n    }\n  }); // merge indices\n\n  if (isIndexed) {\n    let indexOffset = 0;\n    const mergedIndex = [];\n    geometries.forEach(geom => {\n      const index = geom.index;\n\n      for (let j = 0; j < index.count; ++j) {\n        mergedIndex.push(index.getX(j) + indexOffset);\n      }\n\n      indexOffset += geom.attributes.position.count;\n    });\n    mergedGeometry.setIndex(mergedIndex);\n  } // merge attributes\n\n\n  for (let name in attributes) {\n    const mergedAttribute = mergeBufferAttributes(attributes[name]);\n\n    if (!mergedAttribute) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' attribute.');\n      return null;\n    }\n\n    mergedGeometry.setAttribute(name, mergedAttribute);\n  } // merge morph attributes\n\n\n  for (let name in morphAttributes) {\n    const numMorphTargets = morphAttributes[name][0].length;\n    if (numMorphTargets === 0) break;\n    mergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n    mergedGeometry.morphAttributes[name] = [];\n\n    for (let i = 0; i < numMorphTargets; ++i) {\n      const morphAttributesToMerge = [];\n\n      for (let j = 0; j < morphAttributes[name].length; ++j) {\n        morphAttributesToMerge.push(morphAttributes[name][j][i]);\n      }\n\n      const mergedMorphAttribute = mergeBufferAttributes(morphAttributesToMerge);\n\n      if (!mergedMorphAttribute) {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' morphAttribute.');\n        return null;\n      }\n\n      mergedGeometry.morphAttributes[name].push(mergedMorphAttribute);\n    }\n  }\n\n  return mergedGeometry;\n};\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {BufferAttribute}\n */\n\nconst mergeBufferAttributes = attributes => {\n  let TypedArray = undefined;\n  let itemSize = undefined;\n  let normalized = undefined;\n  let arrayLength = 0;\n  attributes.forEach(attr => {\n    if (TypedArray === undefined) {\n      TypedArray = attr.array.constructor;\n    }\n\n    if (TypedArray !== attr.array.constructor) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.');\n      return null;\n    }\n\n    if (itemSize === undefined) itemSize = attr.itemSize;\n\n    if (itemSize !== attr.itemSize) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.');\n      return null;\n    }\n\n    if (normalized === undefined) normalized = attr.normalized;\n\n    if (normalized !== attr.normalized) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.');\n      return null;\n    }\n\n    arrayLength += attr.array.length;\n  });\n\n  if (TypedArray && itemSize) {\n    // @ts-expect-error this works in JS and TS is complaining but it's such a tiny thing I can live with the guilt\n    const array = new TypedArray(arrayLength);\n    let offset = 0;\n    attributes.forEach(attr => {\n      array.set(attr.array, offset);\n      offset += attr.array.length;\n    });\n    return new BufferAttribute(array, itemSize, normalized);\n  }\n};\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {Array<InterleavedBufferAttribute>}\n */\n\nconst interleaveAttributes = attributes => {\n  // Interleaves the provided attributes into an InterleavedBuffer and returns\n  // a set of InterleavedBufferAttributes for each attribute\n  let TypedArray = undefined;\n  let arrayLength = 0;\n  let stride = 0; // calculate the the length and type of the interleavedBuffer\n\n  for (let i = 0, l = attributes.length; i < l; ++i) {\n    const attribute = attributes[i];\n    if (TypedArray === undefined) TypedArray = attribute.array.constructor;\n\n    if (TypedArray !== attribute.array.constructor) {\n      console.error('AttributeBuffers of different types cannot be interleaved');\n      return null;\n    }\n\n    arrayLength += attribute.array.length;\n    stride += attribute.itemSize;\n  } // Create the set of buffer attributes\n  // @ts-expect-error this works in JS and TS is complaining but it's such a tiny thing I can live with the guilt\n\n\n  const interleavedBuffer = new InterleavedBuffer(new TypedArray(arrayLength), stride);\n  let offset = 0;\n  const res = [];\n  const getters = ['getX', 'getY', 'getZ', 'getW'];\n  const setters = ['setX', 'setY', 'setZ', 'setW'];\n\n  for (let j = 0, l = attributes.length; j < l; j++) {\n    const attribute = attributes[j];\n    const itemSize = attribute.itemSize;\n    const count = attribute.count;\n    const iba = new InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, attribute.normalized);\n    res.push(iba);\n    offset += itemSize; // Move the data for each attribute into the new interleavedBuffer\n    // at the appropriate offset\n\n    for (let c = 0; c < count; c++) {\n      for (let k = 0; k < itemSize; k++) {\n        const set = getWithKey(iba, setters[k]);\n        const get = getWithKey(attribute, getters[k]);\n        set(c, get(c));\n      }\n    }\n  }\n\n  return res;\n};\n/**\n * @param {Array<BufferGeometry>} geometry\n * @return {number}\n */\n\nfunction estimateBytesUsed(geometry) {\n  // Return the estimated memory used by this geometry in bytes\n  // Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n  // for InterleavedBufferAttributes.\n  let mem = 0;\n\n  for (let name in geometry.attributes) {\n    const attr = geometry.getAttribute(name);\n    mem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n  }\n\n  const indices = geometry.getIndex();\n  mem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n  return mem;\n}\n/**\n * @param {BufferGeometry} geometry\n * @param {number} tolerance\n * @return {BufferGeometry>}\n */\n\nfunction mergeVertices(geometry, tolerance = 1e-4) {\n  tolerance = Math.max(tolerance, Number.EPSILON); // Generate an index buffer if the geometry doesn't have one, or optimize it\n  // if it's already available.\n\n  const hashToIndex = {};\n  const indices = geometry.getIndex();\n  const positions = geometry.getAttribute('position');\n  const vertexCount = indices ? indices.count : positions.count; // next value for triangle indices\n\n  let nextIndex = 0; // attributes and new attribute arrays\n\n  const attributeNames = Object.keys(geometry.attributes);\n  const attrArrays = {};\n  const morphAttrsArrays = {};\n  const newIndices = [];\n  const getters = ['getX', 'getY', 'getZ', 'getW']; // initialize the arrays\n\n  for (let i = 0, l = attributeNames.length; i < l; i++) {\n    const name = attributeNames[i];\n    attrArrays[name] = [];\n    const morphAttr = geometry.morphAttributes[name];\n\n    if (morphAttr) {\n      morphAttrsArrays[name] = new Array(morphAttr.length).fill(0).map(() => []);\n    }\n  } // convert the error tolerance to an amount of decimal places to truncate to\n\n\n  const decimalShift = Math.log10(1 / tolerance);\n  const shiftMultiplier = Math.pow(10, decimalShift);\n\n  for (let i = 0; i < vertexCount; i++) {\n    const index = indices ? indices.getX(i) : i; // Generate a hash for the vertex attributes at the current index 'i'\n\n    let hash = '';\n\n    for (let j = 0, l = attributeNames.length; j < l; j++) {\n      const name = attributeNames[j];\n      const attribute = geometry.getAttribute(name);\n      const itemSize = attribute.itemSize;\n\n      for (let k = 0; k < itemSize; k++) {\n        // double tilde truncates the decimal value\n        // @ts-ignore no\n        hash += `${~~(attribute[getters[k]](index) * shiftMultiplier)},`;\n      }\n    } // Add another reference to the vertex if it's already\n    // used by another index\n\n\n    if (hash in hashToIndex) {\n      newIndices.push(hashToIndex[hash]);\n    } else {\n      // copy data to the new index in the attribute arrays\n      for (let j = 0, l = attributeNames.length; j < l; j++) {\n        const name = attributeNames[j];\n        const attribute = geometry.getAttribute(name);\n        const morphAttr = geometry.morphAttributes[name];\n        const itemSize = attribute.itemSize;\n        const newarray = attrArrays[name];\n        const newMorphArrays = morphAttrsArrays[name];\n\n        for (let k = 0; k < itemSize; k++) {\n          const getterFunc = getters[k]; // @ts-ignore\n\n          newarray.push(attribute[getterFunc](index));\n\n          if (morphAttr) {\n            for (let m = 0, ml = morphAttr.length; m < ml; m++) {\n              // @ts-ignore\n              newMorphArrays[m].push(morphAttr[m][getterFunc](index));\n            }\n          }\n        }\n      }\n\n      hashToIndex[hash] = nextIndex;\n      newIndices.push(nextIndex);\n      nextIndex++;\n    }\n  } // Generate typed arrays from new attribute arrays and update\n  // the attributeBuffers\n\n\n  const result = geometry.clone();\n\n  for (let i = 0, l = attributeNames.length; i < l; i++) {\n    const name = attributeNames[i];\n    const oldAttribute = geometry.getAttribute(name); //@ts-expect-error  something to do with functions and constructors and new\n\n    const buffer = new oldAttribute.array.constructor(attrArrays[name]);\n    const attribute = new BufferAttribute(buffer, oldAttribute.itemSize, oldAttribute.normalized);\n    result.setAttribute(name, attribute); // Update the attribute arrays\n\n    if (name in morphAttrsArrays) {\n      for (let j = 0; j < morphAttrsArrays[name].length; j++) {\n        const oldMorphAttribute = geometry.morphAttributes[name][j]; //@ts-expect-error something to do with functions and constructors and new\n\n        const buffer = new oldMorphAttribute.array.constructor(morphAttrsArrays[name][j]);\n        const morphAttribute = new BufferAttribute(buffer, oldMorphAttribute.itemSize, oldMorphAttribute.normalized);\n        result.morphAttributes[name][j] = morphAttribute;\n      }\n    }\n  } // indices\n\n\n  result.setIndex(newIndices);\n  return result;\n}\n/**\n * @param {BufferGeometry} geometry\n * @param {number} drawMode\n * @return {BufferGeometry}\n */\n\nfunction toTrianglesDrawMode(geometry, drawMode) {\n  if (drawMode === TrianglesDrawMode) {\n    console.warn('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.');\n    return geometry;\n  }\n\n  if (drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode) {\n    let index = geometry.getIndex(); // generate index if not present\n\n    if (index === null) {\n      const indices = [];\n      const position = geometry.getAttribute('position');\n\n      if (position !== undefined) {\n        for (let i = 0; i < position.count; i++) {\n          indices.push(i);\n        }\n\n        geometry.setIndex(indices);\n        index = geometry.getIndex();\n      } else {\n        console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.');\n        return geometry;\n      }\n    } //\n\n\n    const numberOfTriangles = index.count - 2;\n    const newIndices = [];\n\n    if (index) {\n      if (drawMode === TriangleFanDrawMode) {\n        // gl.TRIANGLE_FAN\n        for (let i = 1; i <= numberOfTriangles; i++) {\n          newIndices.push(index.getX(0));\n          newIndices.push(index.getX(i));\n          newIndices.push(index.getX(i + 1));\n        }\n      } else {\n        // gl.TRIANGLE_STRIP\n        for (let i = 0; i < numberOfTriangles; i++) {\n          if (i % 2 === 0) {\n            newIndices.push(index.getX(i));\n            newIndices.push(index.getX(i + 1));\n            newIndices.push(index.getX(i + 2));\n          } else {\n            newIndices.push(index.getX(i + 2));\n            newIndices.push(index.getX(i + 1));\n            newIndices.push(index.getX(i));\n          }\n        }\n      }\n    }\n\n    if (newIndices.length / 3 !== numberOfTriangles) {\n      console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.');\n    } // build final geometry\n\n\n    const newGeometry = geometry.clone();\n    newGeometry.setIndex(newIndices);\n    newGeometry.clearGroups();\n    return newGeometry;\n  } else {\n    console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode);\n    return geometry;\n  }\n}\n/**\n * Calculates the morphed attributes of a morphed/skinned BufferGeometry.\n * Helpful for Raytracing or Decals.\n * @param {Mesh | Line | Points} object An instance of Mesh, Line or Points.\n * @return {Object} An Object with original position/normal attributes and morphed ones.\n */\n\nfunction computeMorphedAttributes(object) {\n  if (object.geometry.isBufferGeometry !== true) {\n    console.error('THREE.BufferGeometryUtils: Geometry is not of type BufferGeometry.');\n    return null;\n  }\n\n  const _vA = new Vector3();\n\n  const _vB = new Vector3();\n\n  const _vC = new Vector3();\n\n  const _tempA = new Vector3();\n\n  const _tempB = new Vector3();\n\n  const _tempC = new Vector3();\n\n  const _morphA = new Vector3();\n\n  const _morphB = new Vector3();\n\n  const _morphC = new Vector3();\n\n  function _calculateMorphedAttributeData(object, material, attribute, morphAttribute, morphTargetsRelative, a, b, c, modifiedAttributeArray) {\n    _vA.fromBufferAttribute(attribute, a);\n\n    _vB.fromBufferAttribute(attribute, b);\n\n    _vC.fromBufferAttribute(attribute, c);\n\n    const morphInfluences = object.morphTargetInfluences;\n\n    if ( // @ts-expect-error\n    material.morphTargets && morphAttribute && morphInfluences) {\n      _morphA.set(0, 0, 0);\n\n      _morphB.set(0, 0, 0);\n\n      _morphC.set(0, 0, 0);\n\n      for (let i = 0, il = morphAttribute.length; i < il; i++) {\n        const influence = morphInfluences[i];\n        const morph = morphAttribute[i];\n        if (influence === 0) continue;\n\n        _tempA.fromBufferAttribute(morph, a);\n\n        _tempB.fromBufferAttribute(morph, b);\n\n        _tempC.fromBufferAttribute(morph, c);\n\n        if (morphTargetsRelative) {\n          _morphA.addScaledVector(_tempA, influence);\n\n          _morphB.addScaledVector(_tempB, influence);\n\n          _morphC.addScaledVector(_tempC, influence);\n        } else {\n          _morphA.addScaledVector(_tempA.sub(_vA), influence);\n\n          _morphB.addScaledVector(_tempB.sub(_vB), influence);\n\n          _morphC.addScaledVector(_tempC.sub(_vC), influence);\n        }\n      }\n\n      _vA.add(_morphA);\n\n      _vB.add(_morphB);\n\n      _vC.add(_morphC);\n    }\n\n    if (object.isSkinnedMesh) {\n      // @ts-expect-error – https://github.com/three-types/three-ts-types/issues/37\n      object.boneTransform(a, _vA); // @ts-expect-error – https://github.com/three-types/three-ts-types/issues/37\n\n      object.boneTransform(b, _vB); // @ts-expect-error – https://github.com/three-types/three-ts-types/issues/37\n\n      object.boneTransform(c, _vC);\n    }\n\n    modifiedAttributeArray[a * 3 + 0] = _vA.x;\n    modifiedAttributeArray[a * 3 + 1] = _vA.y;\n    modifiedAttributeArray[a * 3 + 2] = _vA.z;\n    modifiedAttributeArray[b * 3 + 0] = _vB.x;\n    modifiedAttributeArray[b * 3 + 1] = _vB.y;\n    modifiedAttributeArray[b * 3 + 2] = _vB.z;\n    modifiedAttributeArray[c * 3 + 0] = _vC.x;\n    modifiedAttributeArray[c * 3 + 1] = _vC.y;\n    modifiedAttributeArray[c * 3 + 2] = _vC.z;\n  }\n\n  const geometry = object.geometry;\n  const material = object.material;\n  let a, b, c;\n  const index = geometry.index;\n  const positionAttribute = geometry.attributes.position;\n  const morphPosition = geometry.morphAttributes.position;\n  const morphTargetsRelative = geometry.morphTargetsRelative;\n  const normalAttribute = geometry.attributes.normal;\n  const morphNormal = geometry.morphAttributes.position;\n  const groups = geometry.groups;\n  const drawRange = geometry.drawRange;\n  let i, j, il, jl;\n  let group, groupMaterial;\n  let start, end;\n  const modifiedPosition = new Float32Array(positionAttribute.count * positionAttribute.itemSize);\n  const modifiedNormal = new Float32Array(normalAttribute.count * normalAttribute.itemSize);\n\n  if (index !== null) {\n    // indexed buffer geometry\n    if (Array.isArray(material)) {\n      for (i = 0, il = groups.length; i < il; i++) {\n        group = groups[i];\n        groupMaterial = material[group.materialIndex];\n        start = Math.max(group.start, drawRange.start);\n        end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n        for (j = start, jl = end; j < jl; j += 3) {\n          a = index.getX(j);\n          b = index.getX(j + 1);\n          c = index.getX(j + 2);\n\n          _calculateMorphedAttributeData(object, groupMaterial, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n          _calculateMorphedAttributeData(object, groupMaterial, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n        }\n      }\n    } else {\n      start = Math.max(0, drawRange.start);\n      end = Math.min(index.count, drawRange.start + drawRange.count);\n\n      for (i = start, il = end; i < il; i += 3) {\n        a = index.getX(i);\n        b = index.getX(i + 1);\n        c = index.getX(i + 2);\n\n        _calculateMorphedAttributeData(object, material, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n        _calculateMorphedAttributeData(object, material, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n      }\n    }\n  } else if (positionAttribute !== undefined) {\n    // non-indexed buffer geometry\n    if (Array.isArray(material)) {\n      for (i = 0, il = groups.length; i < il; i++) {\n        group = groups[i];\n        groupMaterial = material[group.materialIndex];\n        start = Math.max(group.start, drawRange.start);\n        end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n        for (j = start, jl = end; j < jl; j += 3) {\n          a = j;\n          b = j + 1;\n          c = j + 2;\n\n          _calculateMorphedAttributeData(object, groupMaterial, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n          _calculateMorphedAttributeData(object, groupMaterial, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n        }\n      }\n    } else {\n      start = Math.max(0, drawRange.start);\n      end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n      for (i = start, il = end; i < il; i += 3) {\n        a = i;\n        b = i + 1;\n        c = i + 2;\n\n        _calculateMorphedAttributeData(object, material, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n        _calculateMorphedAttributeData(object, material, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n      }\n    }\n  }\n\n  const morphedPositionAttribute = new Float32BufferAttribute(modifiedPosition, 3);\n  const morphedNormalAttribute = new Float32BufferAttribute(modifiedNormal, 3);\n  return {\n    positionAttribute: positionAttribute,\n    normalAttribute: normalAttribute,\n    morphedPositionAttribute: morphedPositionAttribute,\n    morphedNormalAttribute: morphedNormalAttribute\n  };\n}\n\nexport { computeMorphedAttributes, estimateBytesUsed, interleaveAttributes, mergeBufferAttributes, mergeBufferGeometries, mergeVertices, toTrianglesDrawMode };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}