{"ast":null,"code":"import { Scene, WebGLRenderTarget, FloatType, MeshPhongMaterial, MeshBasicMaterial, DoubleSide, PlaneGeometry, Mesh, PlaneBufferGeometry } from 'three';\nimport potpack from 'potpack';\n/**\n * Progressive Light Map Accumulator, by [zalo](https://github.com/zalo/)\n *\n * To use, simply construct a `ProgressiveLightMap` object,\n * `plmap.addObjectsToLightMap(object)` an array of semi-static\n * objects and lights to the class once, and then call\n * `plmap.update(camera)` every frame to begin accumulating\n * lighting samples.\n *\n * This should begin accumulating lightmaps which apply to\n * your objects, so you can start jittering lighting to achieve\n * the texture-space effect you're looking for.\n *\n * @param {WebGLRenderer} renderer A WebGL Rendering Context\n * @param {number} res The side-long dimension of you total lightmap\n */\n\nclass ProgressiveLightMap {\n  constructor(renderer) {\n    let res = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1024;\n    this.renderer = renderer;\n    this.res = res;\n    this.lightMapContainers = [];\n    this.compiled = false;\n    this.scene = new Scene();\n    this.scene.background = null;\n    this.tinyTarget = new WebGLRenderTarget(1, 1);\n    this.buffer1Active = false;\n    this.firstUpdate = true;\n    this.warned = false; // Create the Progressive LightMap Texture\n\n    const format = /(Android|iPad|iPhone|iPod)/g.test(navigator.userAgent) ? alfFloatType : FloatType;\n    this.progressiveLightMap1 = new WebGLRenderTarget(this.res, this.res, {\n      type: format\n    });\n    this.progressiveLightMap2 = new WebGLRenderTarget(this.res, this.res, {\n      type: format\n    }); // Inject some spicy new logic into a standard phong material\n\n    this.uvMat = new MeshPhongMaterial();\n    this.uvMat.uniforms = {};\n\n    this.uvMat.onBeforeCompile = shader => {\n      // Vertex Shader: Set Vertex Positions to the Unwrapped UV Positions\n      shader.vertexShader = '#define USE_LIGHTMAP\\n' + shader.vertexShader.slice(0, -1) + '\tgl_Position = vec4((uv2 - 0.5) * 2.0, 1.0, 1.0); }'; // Fragment Shader: Set Pixels to average in the Previous frame's Shadows\n\n      const bodyStart = shader.fragmentShader.indexOf('void main() {');\n      shader.fragmentShader = 'varying vec2 vUv2;\\n' + shader.fragmentShader.slice(0, bodyStart) + '\tuniform sampler2D previousShadowMap;\\n\tuniform float averagingWindow;\\n' + shader.fragmentShader.slice(bodyStart - 1, -1) + `\\nvec3 texelOld = texture2D(previousShadowMap, vUv2).rgb;\n\t\t\t\tgl_FragColor.rgb = mix(texelOld, gl_FragColor.rgb, 1.0/averagingWindow);\n\t\t\t}`; // Set the Previous Frame's Texture Buffer and Averaging Window\n\n      shader.uniforms.previousShadowMap = {\n        value: this.progressiveLightMap1.texture\n      };\n      shader.uniforms.averagingWindow = {\n        value: 100\n      };\n      this.uvMat.uniforms = shader.uniforms; // Set the new Shader to this\n\n      this.uvMat.userData.shader = shader;\n      this.compiled = true;\n    };\n  }\n  /**\n   * Sets these objects' materials' lightmaps and modifies their uv2's.\n   * @param {Object3D} objects An array of objects and lights to set up your lightmap.\n   */\n\n\n  addObjectsToLightMap(objects) {\n    // Prepare list of UV bounding boxes for packing later...\n    this.uv_boxes = [];\n    const padding = 3 / this.res;\n\n    for (let ob = 0; ob < objects.length; ob++) {\n      const object = objects[ob]; // If this object is a light, simply add it to the internal scene\n\n      if (object.isLight) {\n        this.scene.attach(object);\n        continue;\n      }\n\n      if (!object.geometry.hasAttribute('uv')) {\n        console.warn('All lightmap objects need UVs!');\n        continue;\n      }\n\n      if (this.blurringPlane == null) {\n        this._initializeBlurPlane(this.res, this.progressiveLightMap1);\n      } // Apply the lightmap to the object\n\n\n      object.material.lightMap = this.progressiveLightMap2.texture;\n      object.material.dithering = true;\n      object.castShadow = true;\n      object.receiveShadow = true;\n      object.renderOrder = 1000 + ob; // Prepare UV boxes for potpack\n      // TODO: Size these by object surface area\n\n      this.uv_boxes.push({\n        w: 1 + padding * 2,\n        h: 1 + padding * 2,\n        index: ob\n      });\n      this.lightMapContainers.push({\n        basicMat: object.material,\n        object: object\n      });\n      this.compiled = false;\n    } // Pack the objects' lightmap UVs into the same global space\n\n\n    const dimensions = potpack(this.uv_boxes);\n    this.uv_boxes.forEach(box => {\n      const uv2 = objects[box.index].geometry.getAttribute('uv').clone();\n\n      for (let i = 0; i < uv2.array.length; i += uv2.itemSize) {\n        uv2.array[i] = (uv2.array[i] + box.x + padding) / dimensions.w;\n        uv2.array[i + 1] = (uv2.array[i + 1] + box.y + padding) / dimensions.h;\n      }\n\n      objects[box.index].geometry.setAttribute('uv2', uv2);\n      objects[box.index].geometry.getAttribute('uv2').needsUpdate = true;\n    });\n  }\n  /**\n   * This function renders each mesh one at a time into their respective surface maps\n   * @param {Camera} camera Standard Rendering Camera\n   * @param {number} blendWindow When >1, samples will accumulate over time.\n   * @param {boolean} blurEdges  Whether to fix UV Edges via blurring\n   */\n\n\n  update(camera) {\n    let blendWindow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n    let blurEdges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (this.blurringPlane == null) {\n      return;\n    } // Store the original Render Target\n\n\n    const oldTarget = this.renderer.getRenderTarget(); // The blurring plane applies blur to the seams of the lightmap\n\n    this.blurringPlane.visible = blurEdges; // Steal the Object3D from the real world to our special dimension\n\n    for (let l = 0; l < this.lightMapContainers.length; l++) {\n      this.lightMapContainers[l].object.oldScene = this.lightMapContainers[l].object.parent;\n      this.scene.attach(this.lightMapContainers[l].object);\n    } // Render once normally to initialize everything\n\n\n    if (this.firstUpdate) {\n      this.renderer.setRenderTarget(this.tinyTarget); // Tiny for Speed\n\n      this.renderer.render(this.scene, camera);\n      this.firstUpdate = false;\n    } // Set each object's material to the UV Unwrapped Surface Mapping Version\n\n\n    for (let l = 0; l < this.lightMapContainers.length; l++) {\n      this.uvMat.uniforms.averagingWindow = {\n        value: blendWindow\n      };\n      this.lightMapContainers[l].object.material = this.uvMat;\n      this.lightMapContainers[l].object.oldFrustumCulled = this.lightMapContainers[l].object.frustumCulled;\n      this.lightMapContainers[l].object.frustumCulled = false;\n    } // Ping-pong two surface buffers for reading/writing\n\n\n    const activeMap = this.buffer1Active ? this.progressiveLightMap1 : this.progressiveLightMap2;\n    const inactiveMap = this.buffer1Active ? this.progressiveLightMap2 : this.progressiveLightMap1; // Render the object's surface maps\n\n    this.renderer.setRenderTarget(activeMap);\n    this.uvMat.uniforms.previousShadowMap = {\n      value: inactiveMap.texture\n    };\n    this.blurringPlane.material.uniforms.previousShadowMap = {\n      value: inactiveMap.texture\n    };\n    this.buffer1Active = !this.buffer1Active;\n    this.renderer.render(this.scene, camera); // Restore the object's Real-time Material and add it back to the original world\n\n    for (let l = 0; l < this.lightMapContainers.length; l++) {\n      this.lightMapContainers[l].object.frustumCulled = this.lightMapContainers[l].object.oldFrustumCulled;\n      this.lightMapContainers[l].object.material = this.lightMapContainers[l].basicMat;\n      this.lightMapContainers[l].object.oldScene.attach(this.lightMapContainers[l].object);\n    } // Restore the original Render Target\n\n\n    this.renderer.setRenderTarget(oldTarget);\n  }\n  /** DEBUG\n   * Draw the lightmap in the main scene.  Call this after adding the objects to it.\n   * @param {boolean} visible Whether the debug plane should be visible\n   * @param {Vector3} position Where the debug plane should be drawn\n   */\n\n\n  showDebugLightmap(visible) {\n    let position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n    if (this.lightMapContainers.length == 0) {\n      if (!this.warned) {\n        console.warn('Call this after adding the objects!');\n        this.warned = true;\n      }\n\n      return;\n    }\n\n    if (this.labelMesh == null) {\n      this.labelMaterial = new MeshBasicMaterial({\n        map: this.progressiveLightMap1.texture,\n        side: DoubleSide\n      });\n      this.labelPlane = new PlaneGeometry(100, 100);\n      this.labelMesh = new Mesh(this.labelPlane, this.labelMaterial);\n      this.labelMesh.position.y = 250;\n      this.lightMapContainers[0].object.parent.add(this.labelMesh);\n    }\n\n    if (position != undefined) {\n      this.labelMesh.position.copy(position);\n    }\n\n    this.labelMesh.visible = visible;\n  }\n  /**\n   * INTERNAL Creates the Blurring Plane\n   * @param {number} res The square resolution of this object's lightMap.\n   * @param {WebGLRenderTexture} lightMap The lightmap to initialize the plane with.\n   */\n\n\n  _initializeBlurPlane(res) {\n    let lightMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const blurMaterial = new MeshBasicMaterial();\n    blurMaterial.uniforms = {\n      previousShadowMap: {\n        value: null\n      },\n      pixelOffset: {\n        value: 1.0 / res\n      },\n      polygonOffset: true,\n      polygonOffsetFactor: -1,\n      polygonOffsetUnits: 3.0\n    };\n\n    blurMaterial.onBeforeCompile = shader => {\n      // Vertex Shader: Set Vertex Positions to the Unwrapped UV Positions\n      shader.vertexShader = '#define USE_UV\\n' + shader.vertexShader.slice(0, -1) + '\tgl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }'; // Fragment Shader: Set Pixels to 9-tap box blur the current frame's Shadows\n\n      const bodyStart = shader.fragmentShader.indexOf('void main() {');\n      shader.fragmentShader = '#define USE_UV\\n' + shader.fragmentShader.slice(0, bodyStart) + '\tuniform sampler2D previousShadowMap;\\n\tuniform float pixelOffset;\\n' + shader.fragmentShader.slice(bodyStart - 1, -1) + `\tgl_FragColor.rgb = (\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset,  0.0        )).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( 0.0        ,  pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( 0.0        , -pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset,  0.0        )).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset,  pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset,  pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset, -pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset, -pixelOffset)).rgb)/8.0;\n\t\t}`; // Set the LightMap Accumulation Buffer\n\n      shader.uniforms.previousShadowMap = {\n        value: lightMap.texture\n      };\n      shader.uniforms.pixelOffset = {\n        value: 0.5 / res\n      };\n      blurMaterial.uniforms = shader.uniforms; // Set the new Shader to this\n\n      blurMaterial.userData.shader = shader;\n      this.compiled = true;\n    };\n\n    this.blurringPlane = new Mesh(new PlaneBufferGeometry(1, 1), blurMaterial);\n    this.blurringPlane.name = 'Blurring Plane';\n    this.blurringPlane.frustumCulled = false;\n    this.blurringPlane.renderOrder = 0;\n    this.blurringPlane.material.depthWrite = false;\n    this.scene.add(this.blurringPlane);\n  }\n\n}\n\nexport { ProgressiveLightMap };","map":{"version":3,"names":["Scene","WebGLRenderTarget","FloatType","MeshPhongMaterial","MeshBasicMaterial","DoubleSide","PlaneGeometry","Mesh","PlaneBufferGeometry","potpack","ProgressiveLightMap","constructor","renderer","res","lightMapContainers","compiled","scene","background","tinyTarget","buffer1Active","firstUpdate","warned","format","test","navigator","userAgent","alfFloatType","progressiveLightMap1","type","progressiveLightMap2","uvMat","uniforms","onBeforeCompile","shader","vertexShader","slice","bodyStart","fragmentShader","indexOf","previousShadowMap","value","texture","averagingWindow","userData","addObjectsToLightMap","objects","uv_boxes","padding","ob","length","object","isLight","attach","geometry","hasAttribute","console","warn","blurringPlane","_initializeBlurPlane","material","lightMap","dithering","castShadow","receiveShadow","renderOrder","push","w","h","index","basicMat","dimensions","forEach","box","uv2","getAttribute","clone","i","array","itemSize","x","y","setAttribute","needsUpdate","update","camera","blendWindow","blurEdges","oldTarget","getRenderTarget","visible","l","oldScene","parent","setRenderTarget","render","oldFrustumCulled","frustumCulled","activeMap","inactiveMap","showDebugLightmap","position","undefined","labelMesh","labelMaterial","map","side","labelPlane","add","copy","blurMaterial","pixelOffset","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","name","depthWrite"],"sources":["/home/odin/Desktop/THP☠/Developpeur/Final_Project/pokeland/node_modules/three-stdlib/misc/ProgressiveLightmap.js"],"sourcesContent":["import { Scene, WebGLRenderTarget, FloatType, MeshPhongMaterial, MeshBasicMaterial, DoubleSide, PlaneGeometry, Mesh, PlaneBufferGeometry } from 'three';\nimport potpack from 'potpack';\n\n/**\n * Progressive Light Map Accumulator, by [zalo](https://github.com/zalo/)\n *\n * To use, simply construct a `ProgressiveLightMap` object,\n * `plmap.addObjectsToLightMap(object)` an array of semi-static\n * objects and lights to the class once, and then call\n * `plmap.update(camera)` every frame to begin accumulating\n * lighting samples.\n *\n * This should begin accumulating lightmaps which apply to\n * your objects, so you can start jittering lighting to achieve\n * the texture-space effect you're looking for.\n *\n * @param {WebGLRenderer} renderer A WebGL Rendering Context\n * @param {number} res The side-long dimension of you total lightmap\n */\n\nclass ProgressiveLightMap {\n  constructor(renderer, res = 1024) {\n    this.renderer = renderer;\n    this.res = res;\n    this.lightMapContainers = [];\n    this.compiled = false;\n    this.scene = new Scene();\n    this.scene.background = null;\n    this.tinyTarget = new WebGLRenderTarget(1, 1);\n    this.buffer1Active = false;\n    this.firstUpdate = true;\n    this.warned = false; // Create the Progressive LightMap Texture\n\n    const format = /(Android|iPad|iPhone|iPod)/g.test(navigator.userAgent) ? alfFloatType : FloatType;\n    this.progressiveLightMap1 = new WebGLRenderTarget(this.res, this.res, {\n      type: format\n    });\n    this.progressiveLightMap2 = new WebGLRenderTarget(this.res, this.res, {\n      type: format\n    }); // Inject some spicy new logic into a standard phong material\n\n    this.uvMat = new MeshPhongMaterial();\n    this.uvMat.uniforms = {};\n\n    this.uvMat.onBeforeCompile = shader => {\n      // Vertex Shader: Set Vertex Positions to the Unwrapped UV Positions\n      shader.vertexShader = '#define USE_LIGHTMAP\\n' + shader.vertexShader.slice(0, -1) + '\tgl_Position = vec4((uv2 - 0.5) * 2.0, 1.0, 1.0); }'; // Fragment Shader: Set Pixels to average in the Previous frame's Shadows\n\n      const bodyStart = shader.fragmentShader.indexOf('void main() {');\n      shader.fragmentShader = 'varying vec2 vUv2;\\n' + shader.fragmentShader.slice(0, bodyStart) + '\tuniform sampler2D previousShadowMap;\\n\tuniform float averagingWindow;\\n' + shader.fragmentShader.slice(bodyStart - 1, -1) + `\\nvec3 texelOld = texture2D(previousShadowMap, vUv2).rgb;\n\t\t\t\tgl_FragColor.rgb = mix(texelOld, gl_FragColor.rgb, 1.0/averagingWindow);\n\t\t\t}`; // Set the Previous Frame's Texture Buffer and Averaging Window\n\n      shader.uniforms.previousShadowMap = {\n        value: this.progressiveLightMap1.texture\n      };\n      shader.uniforms.averagingWindow = {\n        value: 100\n      };\n      this.uvMat.uniforms = shader.uniforms; // Set the new Shader to this\n\n      this.uvMat.userData.shader = shader;\n      this.compiled = true;\n    };\n  }\n  /**\n   * Sets these objects' materials' lightmaps and modifies their uv2's.\n   * @param {Object3D} objects An array of objects and lights to set up your lightmap.\n   */\n\n\n  addObjectsToLightMap(objects) {\n    // Prepare list of UV bounding boxes for packing later...\n    this.uv_boxes = [];\n    const padding = 3 / this.res;\n\n    for (let ob = 0; ob < objects.length; ob++) {\n      const object = objects[ob]; // If this object is a light, simply add it to the internal scene\n\n      if (object.isLight) {\n        this.scene.attach(object);\n        continue;\n      }\n\n      if (!object.geometry.hasAttribute('uv')) {\n        console.warn('All lightmap objects need UVs!');\n        continue;\n      }\n\n      if (this.blurringPlane == null) {\n        this._initializeBlurPlane(this.res, this.progressiveLightMap1);\n      } // Apply the lightmap to the object\n\n\n      object.material.lightMap = this.progressiveLightMap2.texture;\n      object.material.dithering = true;\n      object.castShadow = true;\n      object.receiveShadow = true;\n      object.renderOrder = 1000 + ob; // Prepare UV boxes for potpack\n      // TODO: Size these by object surface area\n\n      this.uv_boxes.push({\n        w: 1 + padding * 2,\n        h: 1 + padding * 2,\n        index: ob\n      });\n      this.lightMapContainers.push({\n        basicMat: object.material,\n        object: object\n      });\n      this.compiled = false;\n    } // Pack the objects' lightmap UVs into the same global space\n\n\n    const dimensions = potpack(this.uv_boxes);\n    this.uv_boxes.forEach(box => {\n      const uv2 = objects[box.index].geometry.getAttribute('uv').clone();\n\n      for (let i = 0; i < uv2.array.length; i += uv2.itemSize) {\n        uv2.array[i] = (uv2.array[i] + box.x + padding) / dimensions.w;\n        uv2.array[i + 1] = (uv2.array[i + 1] + box.y + padding) / dimensions.h;\n      }\n\n      objects[box.index].geometry.setAttribute('uv2', uv2);\n      objects[box.index].geometry.getAttribute('uv2').needsUpdate = true;\n    });\n  }\n  /**\n   * This function renders each mesh one at a time into their respective surface maps\n   * @param {Camera} camera Standard Rendering Camera\n   * @param {number} blendWindow When >1, samples will accumulate over time.\n   * @param {boolean} blurEdges  Whether to fix UV Edges via blurring\n   */\n\n\n  update(camera, blendWindow = 100, blurEdges = true) {\n    if (this.blurringPlane == null) {\n      return;\n    } // Store the original Render Target\n\n\n    const oldTarget = this.renderer.getRenderTarget(); // The blurring plane applies blur to the seams of the lightmap\n\n    this.blurringPlane.visible = blurEdges; // Steal the Object3D from the real world to our special dimension\n\n    for (let l = 0; l < this.lightMapContainers.length; l++) {\n      this.lightMapContainers[l].object.oldScene = this.lightMapContainers[l].object.parent;\n      this.scene.attach(this.lightMapContainers[l].object);\n    } // Render once normally to initialize everything\n\n\n    if (this.firstUpdate) {\n      this.renderer.setRenderTarget(this.tinyTarget); // Tiny for Speed\n\n      this.renderer.render(this.scene, camera);\n      this.firstUpdate = false;\n    } // Set each object's material to the UV Unwrapped Surface Mapping Version\n\n\n    for (let l = 0; l < this.lightMapContainers.length; l++) {\n      this.uvMat.uniforms.averagingWindow = {\n        value: blendWindow\n      };\n      this.lightMapContainers[l].object.material = this.uvMat;\n      this.lightMapContainers[l].object.oldFrustumCulled = this.lightMapContainers[l].object.frustumCulled;\n      this.lightMapContainers[l].object.frustumCulled = false;\n    } // Ping-pong two surface buffers for reading/writing\n\n\n    const activeMap = this.buffer1Active ? this.progressiveLightMap1 : this.progressiveLightMap2;\n    const inactiveMap = this.buffer1Active ? this.progressiveLightMap2 : this.progressiveLightMap1; // Render the object's surface maps\n\n    this.renderer.setRenderTarget(activeMap);\n    this.uvMat.uniforms.previousShadowMap = {\n      value: inactiveMap.texture\n    };\n    this.blurringPlane.material.uniforms.previousShadowMap = {\n      value: inactiveMap.texture\n    };\n    this.buffer1Active = !this.buffer1Active;\n    this.renderer.render(this.scene, camera); // Restore the object's Real-time Material and add it back to the original world\n\n    for (let l = 0; l < this.lightMapContainers.length; l++) {\n      this.lightMapContainers[l].object.frustumCulled = this.lightMapContainers[l].object.oldFrustumCulled;\n      this.lightMapContainers[l].object.material = this.lightMapContainers[l].basicMat;\n      this.lightMapContainers[l].object.oldScene.attach(this.lightMapContainers[l].object);\n    } // Restore the original Render Target\n\n\n    this.renderer.setRenderTarget(oldTarget);\n  }\n  /** DEBUG\n   * Draw the lightmap in the main scene.  Call this after adding the objects to it.\n   * @param {boolean} visible Whether the debug plane should be visible\n   * @param {Vector3} position Where the debug plane should be drawn\n   */\n\n\n  showDebugLightmap(visible, position = undefined) {\n    if (this.lightMapContainers.length == 0) {\n      if (!this.warned) {\n        console.warn('Call this after adding the objects!');\n        this.warned = true;\n      }\n\n      return;\n    }\n\n    if (this.labelMesh == null) {\n      this.labelMaterial = new MeshBasicMaterial({\n        map: this.progressiveLightMap1.texture,\n        side: DoubleSide\n      });\n      this.labelPlane = new PlaneGeometry(100, 100);\n      this.labelMesh = new Mesh(this.labelPlane, this.labelMaterial);\n      this.labelMesh.position.y = 250;\n      this.lightMapContainers[0].object.parent.add(this.labelMesh);\n    }\n\n    if (position != undefined) {\n      this.labelMesh.position.copy(position);\n    }\n\n    this.labelMesh.visible = visible;\n  }\n  /**\n   * INTERNAL Creates the Blurring Plane\n   * @param {number} res The square resolution of this object's lightMap.\n   * @param {WebGLRenderTexture} lightMap The lightmap to initialize the plane with.\n   */\n\n\n  _initializeBlurPlane(res, lightMap = null) {\n    const blurMaterial = new MeshBasicMaterial();\n    blurMaterial.uniforms = {\n      previousShadowMap: {\n        value: null\n      },\n      pixelOffset: {\n        value: 1.0 / res\n      },\n      polygonOffset: true,\n      polygonOffsetFactor: -1,\n      polygonOffsetUnits: 3.0\n    };\n\n    blurMaterial.onBeforeCompile = shader => {\n      // Vertex Shader: Set Vertex Positions to the Unwrapped UV Positions\n      shader.vertexShader = '#define USE_UV\\n' + shader.vertexShader.slice(0, -1) + '\tgl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }'; // Fragment Shader: Set Pixels to 9-tap box blur the current frame's Shadows\n\n      const bodyStart = shader.fragmentShader.indexOf('void main() {');\n      shader.fragmentShader = '#define USE_UV\\n' + shader.fragmentShader.slice(0, bodyStart) + '\tuniform sampler2D previousShadowMap;\\n\tuniform float pixelOffset;\\n' + shader.fragmentShader.slice(bodyStart - 1, -1) + `\tgl_FragColor.rgb = (\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset,  0.0        )).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( 0.0        ,  pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( 0.0        , -pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset,  0.0        )).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset,  pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset,  pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset, -pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset, -pixelOffset)).rgb)/8.0;\n\t\t}`; // Set the LightMap Accumulation Buffer\n\n      shader.uniforms.previousShadowMap = {\n        value: lightMap.texture\n      };\n      shader.uniforms.pixelOffset = {\n        value: 0.5 / res\n      };\n      blurMaterial.uniforms = shader.uniforms; // Set the new Shader to this\n\n      blurMaterial.userData.shader = shader;\n      this.compiled = true;\n    };\n\n    this.blurringPlane = new Mesh(new PlaneBufferGeometry(1, 1), blurMaterial);\n    this.blurringPlane.name = 'Blurring Plane';\n    this.blurringPlane.frustumCulled = false;\n    this.blurringPlane.renderOrder = 0;\n    this.blurringPlane.material.depthWrite = false;\n    this.scene.add(this.blurringPlane);\n  }\n\n}\n\nexport { ProgressiveLightMap };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}