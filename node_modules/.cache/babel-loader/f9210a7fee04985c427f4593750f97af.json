{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Object3D, Sphere, Box3 } from 'three';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = 'index-finger-tip';\n\nclass OculusHandModel extends Object3D {\n  constructor(controller, leftModelPath, rightModelPath) {\n    super();\n\n    _defineProperty(this, \"controller\", void 0);\n\n    _defineProperty(this, \"motionController\", void 0);\n\n    _defineProperty(this, \"envMap\", void 0);\n\n    _defineProperty(this, \"mesh\", void 0);\n\n    _defineProperty(this, \"xrInputSource\", void 0);\n\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    this.xrInputSource = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource;\n        this.motionController = new XRHandMeshModel(this, controller, undefined, xrInputSource.handedness, xrInputSource.handedness === 'left' ? leftModelPath : rightModelPath);\n      }\n    });\n    controller.addEventListener('disconnected', () => {\n      this.dispose();\n    });\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n\n  getPointerPosition() {\n    // @ts-ignore XRController needs to extend Group\n    const indexFingerTip = this.controller.joints[POINTING_JOINT];\n\n    if (indexFingerTip) {\n      return indexFingerTip.position;\n    } else {\n      return null;\n    }\n  }\n\n  intersectBoxObject(boxObject) {\n    const pointerPosition = this.getPointerPosition();\n\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n      const box = new Box3().setFromObject(boxObject);\n      return indexSphere.intersectsBox(box);\n    } else {\n      return false;\n    }\n  }\n\n  checkButton(button) {\n    if (this.intersectBoxObject(button)) {\n      button.onPress();\n    } else {\n      button.onClear();\n    }\n\n    if (button.isPressed()) {\n      button.whilePressed();\n    }\n  }\n\n  dispose() {\n    this.clear();\n    this.motionController = null;\n  }\n\n}\n\nexport { OculusHandModel };","map":{"version":3,"names":["_defineProperty","Object3D","Sphere","Box3","XRHandMeshModel","TOUCH_RADIUS","POINTING_JOINT","OculusHandModel","constructor","controller","leftModelPath","rightModelPath","motionController","envMap","mesh","xrInputSource","addEventListener","event","data","hand","undefined","handedness","dispose","updateMatrixWorld","force","updateMesh","getPointerPosition","indexFingerTip","joints","position","intersectBoxObject","boxObject","pointerPosition","indexSphere","box","setFromObject","intersectsBox","checkButton","button","onPress","onClear","isPressed","whilePressed","clear"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/three-stdlib/webxr/OculusHandModel.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Object3D, Sphere, Box3 } from 'three';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\n\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = 'index-finger-tip';\n\nclass OculusHandModel extends Object3D {\n  constructor(controller, leftModelPath, rightModelPath) {\n    super();\n\n    _defineProperty(this, \"controller\", void 0);\n\n    _defineProperty(this, \"motionController\", void 0);\n\n    _defineProperty(this, \"envMap\", void 0);\n\n    _defineProperty(this, \"mesh\", void 0);\n\n    _defineProperty(this, \"xrInputSource\", void 0);\n\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    this.xrInputSource = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource;\n        this.motionController = new XRHandMeshModel(this, controller, undefined, xrInputSource.handedness, xrInputSource.handedness === 'left' ? leftModelPath : rightModelPath);\n      }\n    });\n    controller.addEventListener('disconnected', () => {\n      this.dispose();\n    });\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n\n  getPointerPosition() {\n    // @ts-ignore XRController needs to extend Group\n    const indexFingerTip = this.controller.joints[POINTING_JOINT];\n\n    if (indexFingerTip) {\n      return indexFingerTip.position;\n    } else {\n      return null;\n    }\n  }\n\n  intersectBoxObject(boxObject) {\n    const pointerPosition = this.getPointerPosition();\n\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n      const box = new Box3().setFromObject(boxObject);\n      return indexSphere.intersectsBox(box);\n    } else {\n      return false;\n    }\n  }\n\n  checkButton(button) {\n    if (this.intersectBoxObject(button)) {\n      button.onPress();\n    } else {\n      button.onClear();\n    }\n\n    if (button.isPressed()) {\n      button.whilePressed();\n    }\n  }\n\n  dispose() {\n    this.clear();\n    this.motionController = null;\n  }\n\n}\n\nexport { OculusHandModel };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}