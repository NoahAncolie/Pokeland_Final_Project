{"ast":null,"code":"import { Mesh, Vector3, Matrix3 } from 'three';\n/**\n * https://github.com/gkjohnson/ply-exporter-js\n *\n * Usage:\n *  const exporter = new PLYExporter();\n *\n *  // second argument is a list of options\n *  exporter.parse(mesh, data => console.log(data), { binary: true, excludeAttributes: [ 'color' ], littleEndian: true });\n *\n * Format Definition:\n * http://paulbourke.net/dataformats/ply/\n */\n\nclass PLYExporter {\n  parse(object, onDone, options) {\n    if (onDone && typeof onDone === 'object') {\n      console.warn('THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.');\n      options = onDone;\n      onDone = undefined;\n    } // Default options\n\n\n    const defaultOptions = {\n      binary: false,\n      excludeAttributes: [],\n      // normal, uv, color, index\n      littleEndian: false\n    };\n    options = Object.assign(defaultOptions, options);\n    const excludeAttributes = options.excludeAttributes;\n    let includeNormals = false;\n    let includeColors = false;\n    let includeUVs = false; // count the vertices, check which properties are used,\n    // and cache the BufferGeometry\n\n    let vertexCount = 0;\n    let faceCount = 0;\n    object.traverse(function (child) {\n      if (child instanceof Mesh && child.isMesh) {\n        const mesh = child;\n        const geometry = mesh.geometry;\n\n        if (!geometry.isBufferGeometry) {\n          throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.');\n        }\n\n        const vertices = geometry.getAttribute('position');\n        const normals = geometry.getAttribute('normal');\n        const uvs = geometry.getAttribute('uv');\n        const colors = geometry.getAttribute('color');\n        const indices = geometry.getIndex();\n\n        if (vertices === undefined) {\n          return;\n        }\n\n        vertexCount += vertices.count;\n        faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        if (normals !== undefined) includeNormals = true;\n        if (uvs !== undefined) includeUVs = true;\n        if (colors !== undefined) includeColors = true;\n      }\n    });\n    const includeIndices = (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('index')) === -1;\n    includeNormals = includeNormals && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('normal')) === -1;\n    includeColors = includeColors && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('color')) === -1;\n    includeUVs = includeUVs && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('uv')) === -1;\n\n    if (includeIndices && faceCount !== Math.floor(faceCount)) {\n      // point cloud meshes will not have an index array and may not have a\n      // number of vertices that is divisble by 3 (and therefore representable\n      // as triangles)\n      console.error('PLYExporter: Failed to generate a valid PLY file with triangle indices because the ' + 'number of indices is not divisible by 3.');\n      return null;\n    }\n\n    const indexByteCount = 4;\n    let header = 'ply\\n' + `format ${options.binary ? options.littleEndian ? 'binary_little_endian' : 'binary_big_endian' : 'ascii'} 1.0\\n` + `element vertex ${vertexCount}\\n` + // position\n    'property float x\\n' + 'property float y\\n' + 'property float z\\n';\n\n    if (includeNormals) {\n      // normal\n      header += 'property float nx\\n' + 'property float ny\\n' + 'property float nz\\n';\n    }\n\n    if (includeUVs) {\n      // uvs\n      header += 'property float s\\n' + 'property float t\\n';\n    }\n\n    if (includeColors) {\n      // colors\n      header += 'property uchar red\\n' + 'property uchar green\\n' + 'property uchar blue\\n';\n    }\n\n    if (includeIndices) {\n      // faces\n      header += `${`element face ${faceCount}\\n`}property list uchar int vertex_index\\n`;\n    }\n\n    header += 'end_header\\n'; // Generate attribute data\n\n    const vertex = new Vector3();\n    const normalMatrixWorld = new Matrix3();\n    let result = null;\n\n    if (options.binary) {\n      // Binary File Generation\n      const headerBin = new TextEncoder().encode(header); // 3 position values at 4 bytes\n      // 3 normal values at 4 bytes\n      // 3 color channels with 1 byte\n      // 2 uv values at 4 bytes\n\n      const vertexListLength = vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0)); // 1 byte shape desciptor\n      // 3 vertex indices at ${indexByteCount} bytes\n\n      const faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0;\n      const output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength));\n      new Uint8Array(output.buffer).set(headerBin, 0);\n      let vOffset = headerBin.length;\n      let fOffset = headerBin.length + vertexListLength;\n      let writtenVertices = 0;\n      this.traverseMeshes(object, function (mesh, geometry) {\n        const vertices = geometry.getAttribute('position');\n        const normals = geometry.getAttribute('normal');\n        const uvs = geometry.getAttribute('uv');\n        const colors = geometry.getAttribute('color');\n        const indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld); // Position information\n\n          output.setFloat32(vOffset, vertex.x, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.y, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.z, options.littleEndian);\n          vOffset += 4; // Normal information\n\n          if (includeNormals) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              output.setFloat32(vOffset, vertex.x, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.y, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.z, options.littleEndian);\n              vOffset += 4;\n            } else {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          } // UV information\n\n\n          if (includeUVs) {\n            if (uvs != null) {\n              output.setFloat32(vOffset, uvs.getX(i), options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, uvs.getY(i), options.littleEndian);\n              vOffset += 4;\n            } else if (!includeUVs) {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          } // Color information\n\n\n          if (includeColors) {\n            if (colors != null) {\n              output.setUint8(vOffset, Math.floor(colors.getX(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getY(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255));\n              vOffset += 1;\n            } else {\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n            }\n          }\n        }\n\n        if (includeIndices) {\n          // Create the face list\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, indices.getX(i + 0) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(i + 1) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(i + 2) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, writtenVertices + i, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + i + 1, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + i + 2, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          }\n        } // Save the amount of verts we've already written so we can offset\n        // the face index on the next mesh\n\n\n        writtenVertices += vertices.count;\n      });\n      result = output.buffer;\n    } else {\n      // Ascii File Generation\n      // count the number of vertices\n      let writtenVertices = 0;\n      let vertexList = '';\n      let faceList = '';\n      this.traverseMeshes(object, function (mesh, geometry) {\n        const vertices = geometry.getAttribute('position');\n        const normals = geometry.getAttribute('normal');\n        const uvs = geometry.getAttribute('uv');\n        const colors = geometry.getAttribute('color');\n        const indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld); // form each line\n\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld); // Position information\n\n          let line = vertex.x + ' ' + vertex.y + ' ' + vertex.z; // Normal information\n\n          if (includeNormals) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              line += ' ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z;\n            } else {\n              line += ' 0 0 0';\n            }\n          } // UV information\n\n\n          if (includeUVs) {\n            if (uvs != null) {\n              line += ' ' + uvs.getX(i) + ' ' + uvs.getY(i);\n            } else if (includeUVs) {\n              line += ' 0 0';\n            }\n          } // Color information\n\n\n          if (includeColors) {\n            if (colors != null) {\n              line += ' ' + Math.floor(colors.getX(i) * 255) + ' ' + Math.floor(colors.getY(i) * 255) + ' ' + Math.floor(colors.getZ(i) * 255);\n            } else {\n              line += ' 255 255 255';\n            }\n          }\n\n          vertexList += line + '\\n';\n        } // Create the face list\n\n\n        if (includeIndices) {\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              faceList += `3 ${indices.getX(i + 0) + writtenVertices}`;\n              faceList += ` ${indices.getX(i + 1) + writtenVertices}`;\n              faceList += ` ${indices.getX(i + 2) + writtenVertices}\\n`;\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              faceList += `3 ${writtenVertices + i} ${writtenVertices + i + 1} ${writtenVertices + i + 2}\\n`;\n            }\n          }\n\n          faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        }\n\n        writtenVertices += vertices.count;\n      });\n      result = `${header}${vertexList}${includeIndices ? `${faceList}\\n` : '\\n'}`;\n    }\n\n    if (typeof onDone === 'function') {\n      requestAnimationFrame(() => onDone && onDone(typeof result === 'string' ? result : ''));\n    }\n\n    return result;\n  } // Iterate over the valid meshes in the object\n\n\n  traverseMeshes(object, cb) {\n    object.traverse(function (child) {\n      if (child instanceof Mesh && child.isMesh) {\n        const mesh = child;\n        const geometry = mesh.geometry;\n\n        if (!geometry.isBufferGeometry) {\n          throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.');\n        }\n\n        if (geometry.hasAttribute('position')) {\n          cb(mesh, geometry);\n        }\n      }\n    });\n  }\n\n}\n\nexport { PLYExporter };","map":{"version":3,"names":["Mesh","Vector3","Matrix3","PLYExporter","parse","object","onDone","options","console","warn","undefined","defaultOptions","binary","excludeAttributes","littleEndian","Object","assign","includeNormals","includeColors","includeUVs","vertexCount","faceCount","traverse","child","isMesh","mesh","geometry","isBufferGeometry","Error","vertices","getAttribute","normals","uvs","colors","indices","getIndex","count","includeIndices","indexOf","Math","floor","error","indexByteCount","header","vertex","normalMatrixWorld","result","headerBin","TextEncoder","encode","vertexListLength","faceListLength","output","DataView","ArrayBuffer","length","Uint8Array","buffer","set","vOffset","fOffset","writtenVertices","traverseMeshes","getNormalMatrix","matrixWorld","i","l","x","getX","y","getY","z","getZ","applyMatrix4","setFloat32","applyMatrix3","normalize","setUint8","setUint32","vertexList","faceList","line","requestAnimationFrame","cb","hasAttribute"],"sources":["/home/odin/Desktop/THP☠/Developpeur/Final_Project/pokeland/node_modules/three-stdlib/exporters/PLYExporter.js"],"sourcesContent":["import { Mesh, Vector3, Matrix3 } from 'three';\n\n/**\n * https://github.com/gkjohnson/ply-exporter-js\n *\n * Usage:\n *  const exporter = new PLYExporter();\n *\n *  // second argument is a list of options\n *  exporter.parse(mesh, data => console.log(data), { binary: true, excludeAttributes: [ 'color' ], littleEndian: true });\n *\n * Format Definition:\n * http://paulbourke.net/dataformats/ply/\n */\n\nclass PLYExporter {\n  parse(object, onDone, options) {\n    if (onDone && typeof onDone === 'object') {\n      console.warn('THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.');\n      options = onDone;\n      onDone = undefined;\n    } // Default options\n\n\n    const defaultOptions = {\n      binary: false,\n      excludeAttributes: [],\n      // normal, uv, color, index\n      littleEndian: false\n    };\n    options = Object.assign(defaultOptions, options);\n    const excludeAttributes = options.excludeAttributes;\n    let includeNormals = false;\n    let includeColors = false;\n    let includeUVs = false; // count the vertices, check which properties are used,\n    // and cache the BufferGeometry\n\n    let vertexCount = 0;\n    let faceCount = 0;\n    object.traverse(function (child) {\n      if (child instanceof Mesh && child.isMesh) {\n        const mesh = child;\n        const geometry = mesh.geometry;\n\n        if (!geometry.isBufferGeometry) {\n          throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.');\n        }\n\n        const vertices = geometry.getAttribute('position');\n        const normals = geometry.getAttribute('normal');\n        const uvs = geometry.getAttribute('uv');\n        const colors = geometry.getAttribute('color');\n        const indices = geometry.getIndex();\n\n        if (vertices === undefined) {\n          return;\n        }\n\n        vertexCount += vertices.count;\n        faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        if (normals !== undefined) includeNormals = true;\n        if (uvs !== undefined) includeUVs = true;\n        if (colors !== undefined) includeColors = true;\n      }\n    });\n    const includeIndices = (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('index')) === -1;\n    includeNormals = includeNormals && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('normal')) === -1;\n    includeColors = includeColors && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('color')) === -1;\n    includeUVs = includeUVs && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('uv')) === -1;\n\n    if (includeIndices && faceCount !== Math.floor(faceCount)) {\n      // point cloud meshes will not have an index array and may not have a\n      // number of vertices that is divisble by 3 (and therefore representable\n      // as triangles)\n      console.error('PLYExporter: Failed to generate a valid PLY file with triangle indices because the ' + 'number of indices is not divisible by 3.');\n      return null;\n    }\n\n    const indexByteCount = 4;\n    let header = 'ply\\n' + `format ${options.binary ? options.littleEndian ? 'binary_little_endian' : 'binary_big_endian' : 'ascii'} 1.0\\n` + `element vertex ${vertexCount}\\n` + // position\n    'property float x\\n' + 'property float y\\n' + 'property float z\\n';\n\n    if (includeNormals) {\n      // normal\n      header += 'property float nx\\n' + 'property float ny\\n' + 'property float nz\\n';\n    }\n\n    if (includeUVs) {\n      // uvs\n      header += 'property float s\\n' + 'property float t\\n';\n    }\n\n    if (includeColors) {\n      // colors\n      header += 'property uchar red\\n' + 'property uchar green\\n' + 'property uchar blue\\n';\n    }\n\n    if (includeIndices) {\n      // faces\n      header += `${`element face ${faceCount}\\n`}property list uchar int vertex_index\\n`;\n    }\n\n    header += 'end_header\\n'; // Generate attribute data\n\n    const vertex = new Vector3();\n    const normalMatrixWorld = new Matrix3();\n    let result = null;\n\n    if (options.binary) {\n      // Binary File Generation\n      const headerBin = new TextEncoder().encode(header); // 3 position values at 4 bytes\n      // 3 normal values at 4 bytes\n      // 3 color channels with 1 byte\n      // 2 uv values at 4 bytes\n\n      const vertexListLength = vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0)); // 1 byte shape desciptor\n      // 3 vertex indices at ${indexByteCount} bytes\n\n      const faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0;\n      const output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength));\n      new Uint8Array(output.buffer).set(headerBin, 0);\n      let vOffset = headerBin.length;\n      let fOffset = headerBin.length + vertexListLength;\n      let writtenVertices = 0;\n      this.traverseMeshes(object, function (mesh, geometry) {\n        const vertices = geometry.getAttribute('position');\n        const normals = geometry.getAttribute('normal');\n        const uvs = geometry.getAttribute('uv');\n        const colors = geometry.getAttribute('color');\n        const indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld); // Position information\n\n          output.setFloat32(vOffset, vertex.x, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.y, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.z, options.littleEndian);\n          vOffset += 4; // Normal information\n\n          if (includeNormals) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              output.setFloat32(vOffset, vertex.x, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.y, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.z, options.littleEndian);\n              vOffset += 4;\n            } else {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          } // UV information\n\n\n          if (includeUVs) {\n            if (uvs != null) {\n              output.setFloat32(vOffset, uvs.getX(i), options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, uvs.getY(i), options.littleEndian);\n              vOffset += 4;\n            } else if (!includeUVs) {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          } // Color information\n\n\n          if (includeColors) {\n            if (colors != null) {\n              output.setUint8(vOffset, Math.floor(colors.getX(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getY(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255));\n              vOffset += 1;\n            } else {\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n            }\n          }\n        }\n\n        if (includeIndices) {\n          // Create the face list\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, indices.getX(i + 0) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(i + 1) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(i + 2) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, writtenVertices + i, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + i + 1, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + i + 2, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          }\n        } // Save the amount of verts we've already written so we can offset\n        // the face index on the next mesh\n\n\n        writtenVertices += vertices.count;\n      });\n      result = output.buffer;\n    } else {\n      // Ascii File Generation\n      // count the number of vertices\n      let writtenVertices = 0;\n      let vertexList = '';\n      let faceList = '';\n      this.traverseMeshes(object, function (mesh, geometry) {\n        const vertices = geometry.getAttribute('position');\n        const normals = geometry.getAttribute('normal');\n        const uvs = geometry.getAttribute('uv');\n        const colors = geometry.getAttribute('color');\n        const indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld); // form each line\n\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld); // Position information\n\n          let line = vertex.x + ' ' + vertex.y + ' ' + vertex.z; // Normal information\n\n          if (includeNormals) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              line += ' ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z;\n            } else {\n              line += ' 0 0 0';\n            }\n          } // UV information\n\n\n          if (includeUVs) {\n            if (uvs != null) {\n              line += ' ' + uvs.getX(i) + ' ' + uvs.getY(i);\n            } else if (includeUVs) {\n              line += ' 0 0';\n            }\n          } // Color information\n\n\n          if (includeColors) {\n            if (colors != null) {\n              line += ' ' + Math.floor(colors.getX(i) * 255) + ' ' + Math.floor(colors.getY(i) * 255) + ' ' + Math.floor(colors.getZ(i) * 255);\n            } else {\n              line += ' 255 255 255';\n            }\n          }\n\n          vertexList += line + '\\n';\n        } // Create the face list\n\n\n        if (includeIndices) {\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              faceList += `3 ${indices.getX(i + 0) + writtenVertices}`;\n              faceList += ` ${indices.getX(i + 1) + writtenVertices}`;\n              faceList += ` ${indices.getX(i + 2) + writtenVertices}\\n`;\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              faceList += `3 ${writtenVertices + i} ${writtenVertices + i + 1} ${writtenVertices + i + 2}\\n`;\n            }\n          }\n\n          faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        }\n\n        writtenVertices += vertices.count;\n      });\n      result = `${header}${vertexList}${includeIndices ? `${faceList}\\n` : '\\n'}`;\n    }\n\n    if (typeof onDone === 'function') {\n      requestAnimationFrame(() => onDone && onDone(typeof result === 'string' ? result : ''));\n    }\n\n    return result;\n  } // Iterate over the valid meshes in the object\n\n\n  traverseMeshes(object, cb) {\n    object.traverse(function (child) {\n      if (child instanceof Mesh && child.isMesh) {\n        const mesh = child;\n        const geometry = mesh.geometry;\n\n        if (!geometry.isBufferGeometry) {\n          throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.');\n        }\n\n        if (geometry.hasAttribute('position')) {\n          cb(mesh, geometry);\n        }\n      }\n    });\n  }\n\n}\n\nexport { PLYExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}