{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { PropertyBinding, InterpolateLinear, Vector3, RGBAFormat, ShaderMaterial, MeshStandardMaterial, MeshBasicMaterial, MeshPhysicalMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshToonMaterial, MeshLambertMaterial, DoubleSide, LineSegments, LineLoop, Line, Points, MeshDepthMaterial, InterleavedBufferAttribute, BufferAttribute, Object3D, Material, OrthographicCamera, PerspectiveCamera, MathUtils, InterpolateDiscrete, SkinnedMesh, Matrix4, Mesh, Camera, Scene, DirectionalLight, PointLight, SpotLight, NearestFilter, NearestMipmapNearestFilter, NearestMipmapLinearFilter, LinearFilter, LinearMipmapNearestFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping, RepeatWrapping, MirroredRepeatWrapping } from 'three';\n\nclass GLTFExporter {\n  constructor() {\n    _defineProperty(this, \"pluginCallbacks\", void 0);\n\n    this.pluginCallbacks = [];\n    this.register(function (writer) {\n      return new GLTFLightExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsUnlitExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsPBRSpecularGlossiness(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsTransmissionExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsVolumeExtension(writer);\n    });\n  }\n\n  register(callback) {\n    if (this.pluginCallbacks.indexOf(callback) === -1) {\n      this.pluginCallbacks.push(callback);\n    }\n\n    return this;\n  }\n\n  unregister(callback) {\n    if (this.pluginCallbacks.indexOf(callback) !== -1) {\n      this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(callback), 1);\n    }\n\n    return this;\n  }\n\n  parse(input, onDone, options) {\n    const writer = new GLTFWriter();\n    const plugins = [];\n\n    for (let i = 0, il = this.pluginCallbacks.length; i < il; i++) {\n      plugins.push(this.pluginCallbacks[i](writer));\n    }\n\n    writer.setPlugins(plugins);\n    writer.write(input, onDone, options);\n  }\n  /**\n   * Static utility functions\n   */\n\n\n} //------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\n\n_defineProperty(GLTFExporter, \"Utils\", {\n  insertKeyframe: function (track, time) {\n    const tolerance = 0.001; // 1ms\n\n    const valueSize = track.getValueSize(); // @ts-expect-error\n\n    const times = new track.TimeBufferType(track.times.length + 1); // @ts-expect-error\n\n    const values = new track.ValueBufferType(track.values.length + valueSize);\n    /**\n     * NOTE: createInterpolant does not exist in the type, but it does exist as a property of the class\n     * https://github.com/mrdoob/three.js/blob/77480d339d737b7505b335101ffd3cf29a30738d/src/animation/KeyframeTrack.js#L117\n     */\n    // @ts-expect-error\n\n    const interpolant = track.createInterpolant(new track.ValueBufferType(valueSize));\n    let index;\n\n    if (track.times.length === 0) {\n      times[0] = time;\n\n      for (let i = 0; i < valueSize; i++) {\n        values[i] = 0;\n      }\n\n      index = 0;\n    } else if (time < track.times[0]) {\n      if (Math.abs(track.times[0] - time) < tolerance) return 0;\n      times[0] = time;\n      times.set(track.times, 1);\n      values.set(interpolant.evaluate(time), 0);\n      values.set(track.values, valueSize);\n      index = 0;\n    } else if (time > track.times[track.times.length - 1]) {\n      if (Math.abs(track.times[track.times.length - 1] - time) < tolerance) {\n        return track.times.length - 1;\n      }\n\n      times[times.length - 1] = time;\n      times.set(track.times, 0);\n      values.set(track.values, 0);\n      values.set(interpolant.evaluate(time), track.values.length);\n      index = times.length - 1;\n    } else {\n      for (let i = 0; i < track.times.length; i++) {\n        if (Math.abs(track.times[i] - time) < tolerance) return i;\n\n        if (track.times[i] < time && track.times[i + 1] > time) {\n          times.set(track.times.slice(0, i + 1), 0);\n          times[i + 1] = time;\n          times.set(track.times.slice(i + 1), i + 2);\n          values.set(track.values.slice(0, (i + 1) * valueSize), 0);\n          values.set(interpolant.evaluate(time), (i + 1) * valueSize);\n          values.set(track.values.slice((i + 1) * valueSize), (i + 2) * valueSize);\n          index = i + 1;\n          break;\n        }\n      }\n    }\n\n    track.times = times;\n    track.values = values;\n    return index;\n  },\n  mergeMorphTargetTracks: function (clip, root) {\n    const tracks = [];\n    const mergedTracks = {};\n    const sourceTracks = clip.tracks;\n\n    for (let i = 0; i < sourceTracks.length; ++i) {\n      let sourceTrack = sourceTracks[i];\n      const sourceTrackBinding = PropertyBinding.parseTrackName(sourceTrack.name);\n      const sourceTrackNode = PropertyBinding.findNode(root, sourceTrackBinding.nodeName);\n\n      if (sourceTrackBinding.propertyName !== 'morphTargetInfluences' || sourceTrackBinding.propertyIndex === undefined) {\n        // Tracks that don't affect morph targets, or that affect all morph targets together, can be left as-is.\n        tracks.push(sourceTrack);\n        continue;\n      }\n\n      if ( // @ts-expect-error\n      sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete && // @ts-expect-error\n      sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear) {\n        // @ts-expect-error\n        if (sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n          // This should never happen, because glTF morph target animations\n          // affect all targets already.\n          throw new Error('THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.');\n        }\n\n        console.warn('THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.');\n        sourceTrack = sourceTrack.clone();\n        sourceTrack.setInterpolation(InterpolateLinear);\n      }\n\n      const targetCount = sourceTrackNode.morphTargetInfluences.length;\n      const targetIndex = sourceTrackNode.morphTargetDictionary[sourceTrackBinding.propertyIndex];\n\n      if (targetIndex === undefined) {\n        throw new Error('THREE.GLTFExporter: Morph target name not found: ' + sourceTrackBinding.propertyIndex);\n      }\n\n      let mergedTrack; // If this is the first time we've seen this object, create a new\n      // track to store merged keyframe data for each morph target.\n\n      if (mergedTracks[sourceTrackNode.uuid] === undefined) {\n        mergedTrack = sourceTrack.clone(); // @ts-expect-error\n\n        const values = new mergedTrack.ValueBufferType(targetCount * mergedTrack.times.length);\n\n        for (let j = 0; j < mergedTrack.times.length; j++) {\n          values[j * targetCount + targetIndex] = mergedTrack.values[j];\n        } // We need to take into consideration the intended target node\n        // of our original un-merged morphTarget animation.\n\n\n        mergedTrack.name = (sourceTrackBinding.nodeName || '') + '.morphTargetInfluences';\n        mergedTrack.values = values;\n        mergedTracks[sourceTrackNode.uuid] = mergedTrack;\n        tracks.push(mergedTrack);\n        continue;\n      } // @ts-expect-error\n\n\n      const sourceInterpolant = sourceTrack.createInterpolant(new sourceTrack.ValueBufferType(1));\n      mergedTrack = mergedTracks[sourceTrackNode.uuid]; // For every existing keyframe of the merged track, write a (possibly\n      // interpolated) value from the source track.\n\n      for (let j = 0; j < mergedTrack.times.length; j++) {\n        mergedTrack.values[j * targetCount + targetIndex] = sourceInterpolant.evaluate(mergedTrack.times[j]);\n      } // For every existing keyframe of the source track, write a (possibly\n      // new) keyframe to the merged track. Values from the previous loop may\n      // be written again, but keyframes are de-duplicated.\n\n\n      for (let j = 0; j < sourceTrack.times.length; j++) {\n        const keyframeIndex = this.insertKeyframe(mergedTrack, sourceTrack.times[j]);\n        mergedTrack.values[keyframeIndex * targetCount + targetIndex] = sourceTrack.values[j];\n      }\n    }\n\n    clip.tracks = tracks;\n    return clip;\n  }\n});\n\nconst WEBGL_CONSTANTS = {\n  POINTS: 0x0000,\n  LINES: 0x0001,\n  LINE_LOOP: 0x0002,\n  LINE_STRIP: 0x0003,\n  TRIANGLES: 0x0004,\n  TRIANGLE_STRIP: 0x0005,\n  TRIANGLE_FAN: 0x0006,\n  UNSIGNED_BYTE: 0x1401,\n  UNSIGNED_SHORT: 0x1403,\n  FLOAT: 0x1406,\n  UNSIGNED_INT: 0x1405,\n  ARRAY_BUFFER: 0x8892,\n  ELEMENT_ARRAY_BUFFER: 0x8893,\n  NEAREST: 0x2600,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_NEAREST: 0x2700,\n  LINEAR_MIPMAP_NEAREST: 0x2701,\n  NEAREST_MIPMAP_LINEAR: 0x2702,\n  LINEAR_MIPMAP_LINEAR: 0x2703,\n  CLAMP_TO_EDGE: 33071,\n  MIRRORED_REPEAT: 33648,\n  REPEAT: 10497\n};\nconst THREE_TO_WEBGL = {};\nTHREE_TO_WEBGL[NearestFilter] = WEBGL_CONSTANTS.NEAREST;\nTHREE_TO_WEBGL[NearestMipmapNearestFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[NearestMipmapLinearFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[LinearFilter] = WEBGL_CONSTANTS.LINEAR;\nTHREE_TO_WEBGL[LinearMipmapNearestFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[LinearMipmapLinearFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[ClampToEdgeWrapping] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\nTHREE_TO_WEBGL[RepeatWrapping] = WEBGL_CONSTANTS.REPEAT;\nTHREE_TO_WEBGL[MirroredRepeatWrapping] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\nconst PATH_PROPERTIES = {\n  scale: 'scale',\n  position: 'translation',\n  quaternion: 'rotation',\n  morphTargetInfluences: 'weights'\n}; // GLB constants\n// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\n\nconst GLB_HEADER_BYTES = 12;\nconst GLB_HEADER_MAGIC = 0x46546c67;\nconst GLB_VERSION = 2;\nconst GLB_CHUNK_PREFIX_BYTES = 8;\nconst GLB_CHUNK_TYPE_JSON = 0x4e4f534a;\nconst GLB_CHUNK_TYPE_BIN = 0x004e4942;\n/**\n * Writer\n */\n\nclass GLTFWriter {\n  constructor() {\n    _defineProperty(this, \"plugins\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"pending\", void 0);\n\n    _defineProperty(this, \"buffers\", void 0);\n\n    _defineProperty(this, \"byteOffset\", void 0);\n\n    _defineProperty(this, \"nodeMap\", void 0);\n\n    _defineProperty(this, \"skins\", void 0);\n\n    _defineProperty(this, \"extensionsUsed\", void 0);\n\n    _defineProperty(this, \"uids\", void 0);\n\n    _defineProperty(this, \"uid\", void 0);\n\n    _defineProperty(this, \"json\", void 0);\n\n    _defineProperty(this, \"cache\", void 0);\n\n    _defineProperty(this, \"cachedCanvas\", void 0);\n\n    this.plugins = [];\n    this.options = {};\n    this.pending = [];\n    this.buffers = [];\n    this.byteOffset = 0;\n    this.nodeMap = new Map();\n    this.skins = [];\n    this.extensionsUsed = {};\n    this.uids = new Map();\n    this.uid = 0;\n    this.json = {\n      asset: {\n        version: '2.0',\n        generator: 'THREE.GLTFExporter'\n      }\n    };\n    this.cache = {\n      meshes: new Map(),\n      attributes: new Map(),\n      attributesNormalized: new Map(),\n      materials: new Map(),\n      textures: new Map(),\n      images: new Map()\n    };\n    this.cachedCanvas = null;\n  }\n\n  setPlugins(plugins) {\n    this.plugins = plugins;\n  }\n  /**\n   * Parse scenes and generate GLTF output\n   * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n   * @param  {Function} onDone  Callback on completed\n   * @param  {Object} options options\n   */\n\n\n  write(input, onDone, options) {\n    this.options = Object.assign({}, {\n      // default options\n      binary: false,\n      trs: false,\n      onlyVisible: true,\n      truncateDrawRange: true,\n      embedImages: true,\n      maxTextureSize: Infinity,\n      animations: [],\n      includeCustomExtensions: false\n    }, options);\n\n    if (this.options.animations !== undefined && this.options.animations.length > 0) {\n      // Only TRS properties, and not matrices, may be targeted by animation.\n      this.options.trs = true;\n    }\n\n    this.processInput(input);\n    const writer = this;\n    Promise.all(this.pending).then(() => {\n      const buffers = writer.buffers;\n      const json = writer.json;\n      const options = writer.options;\n      const extensionsUsed = writer.extensionsUsed; // Merge buffers.\n\n      const blob = new Blob(buffers, {\n        type: 'application/octet-stream'\n      }); // Declare extensions.\n\n      const extensionsUsedList = Object.keys(extensionsUsed);\n      if (extensionsUsedList.length > 0) json.extensionsUsed = extensionsUsedList; // Update bytelength of the single buffer.\n\n      if (json.buffers && json.buffers.length > 0) json.buffers[0].byteLength = blob.size;\n\n      if (options.binary) {\n        // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\n        const reader = new window.FileReader();\n        reader.readAsArrayBuffer(blob);\n\n        reader.onloadend = () => {\n          if (reader.result !== null && typeof reader.result !== 'string') {\n            // Binary chunk.\n            const binaryChunk = this.getPaddedArrayBuffer(reader.result);\n            const binaryChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n            binaryChunkPrefix.setUint32(0, binaryChunk.byteLength, true);\n            binaryChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_BIN, true); // JSON chunk.\n\n            const jsonChunk = this.getPaddedArrayBuffer(this.stringToArrayBuffer(JSON.stringify(json)), 0x20);\n            const jsonChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n            jsonChunkPrefix.setUint32(0, jsonChunk.byteLength, true);\n            jsonChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_JSON, true); // GLB header.\n\n            const header = new ArrayBuffer(GLB_HEADER_BYTES);\n            const headerView = new DataView(header);\n            headerView.setUint32(0, GLB_HEADER_MAGIC, true);\n            headerView.setUint32(4, GLB_VERSION, true);\n            const totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;\n            headerView.setUint32(8, totalByteLength, true);\n            const glbBlob = new Blob([header, jsonChunkPrefix, jsonChunk, binaryChunkPrefix, binaryChunk], {\n              type: 'application/octet-stream'\n            });\n            const glbReader = new window.FileReader();\n            glbReader.readAsArrayBuffer(glbBlob);\n\n            glbReader.onloadend = function () {\n              if (glbReader.result !== null && typeof glbReader.result !== 'string') {\n                onDone(glbReader.result);\n              }\n            };\n          }\n        };\n      } else {\n        if (json.buffers && json.buffers.length > 0) {\n          const reader = new window.FileReader();\n          reader.readAsDataURL(blob);\n\n          reader.onloadend = function () {\n            const base64data = reader.result;\n\n            if (json.buffers !== undefined && base64data !== null) {\n              json.buffers[0].uri = base64data;\n              onDone(json);\n            }\n          };\n        } else {\n          onDone(json);\n        }\n      }\n    });\n  }\n  /**\n   * Serializes a userData.\n   *\n   * @param {THREE.Object3D|THREE.Material} object\n   * @param {Object} objectDef\n   */\n\n\n  serializeUserData(object, objectDef) {\n    if (Object.keys(object.userData).length === 0) return;\n    const options = this.options;\n    const extensionsUsed = this.extensionsUsed;\n\n    try {\n      const json = JSON.parse(JSON.stringify(object.userData));\n\n      if (options.includeCustomExtensions && json.gltfExtensions) {\n        if (objectDef.extensions === undefined) objectDef.extensions = {};\n\n        for (const extensionName in json.gltfExtensions) {\n          objectDef.extensions[extensionName] = json.gltfExtensions[extensionName];\n          extensionsUsed[extensionName] = true;\n        }\n\n        delete json.gltfExtensions;\n      }\n\n      if (Object.keys(json).length > 0) objectDef.extras = json;\n    } catch (error) {\n      if (error instanceof Error) {\n        console.warn(\"THREE.GLTFExporter: userData of '\" + object.name + \"' \" + \"won't be serialized because of JSON.stringify error - \" + error.message);\n      }\n    }\n  }\n  /**\n   * Assign and return a temporal unique id for an object\n   * especially which doesn't have .uuid\n   * @param  {Object} object\n   * @return {Integer}\n   */\n\n\n  getUID(object) {\n    if (!this.uids.has(object)) this.uids.set(object, this.uid++);\n    return this.uids.get(object);\n  }\n  /**\n   * Checks if normal attribute values are normalized.\n   *\n   * @param {BufferAttribute} normal\n   * @returns {Boolean}\n   */\n\n\n  isNormalizedNormalAttribute(normal) {\n    const cache = this.cache;\n    if (cache.attributesNormalized.has(normal)) return false;\n    const v = new Vector3();\n\n    for (let i = 0, il = normal.count; i < il; i++) {\n      // 0.0005 is from glTF-validator\n      if (Math.abs(v.fromBufferAttribute(normal, i).length() - 1.0) > 0.0005) return false;\n    }\n\n    return true;\n  }\n  /**\n   * Creates normalized normal buffer attribute.\n   *\n   * @param {BufferAttribute} normal\n   * @returns {BufferAttribute}\n   *\n   */\n\n\n  createNormalizedNormalAttribute(normal) {\n    const cache = this.cache;\n    if (cache.attributesNormalized.has(normal)) return cache.attributesNormalized.get(normal);\n    const attribute = normal.clone();\n    const v = new Vector3();\n\n    for (let i = 0, il = attribute.count; i < il; i++) {\n      v.fromBufferAttribute(attribute, i);\n\n      if (v.x === 0 && v.y === 0 && v.z === 0) {\n        // if values can't be normalized set (1, 0, 0)\n        v.setX(1.0);\n      } else {\n        v.normalize();\n      }\n\n      attribute.setXYZ(i, v.x, v.y, v.z);\n    }\n\n    cache.attributesNormalized.set(normal, attribute);\n    return attribute;\n  }\n  /**\n   * Applies a texture transform, if present, to the map definition. Requires\n   * the KHR_texture_transform extension.\n   *\n   * @param {Object} mapDef\n   * @param {THREE.Texture} texture\n   */\n\n\n  applyTextureTransform(mapDef, texture) {\n    let didTransform = false;\n    const transformDef = {};\n\n    if (texture.offset.x !== 0 || texture.offset.y !== 0) {\n      transformDef.offset = texture.offset.toArray();\n      didTransform = true;\n    }\n\n    if (texture.rotation !== 0) {\n      transformDef.rotation = texture.rotation;\n      didTransform = true;\n    }\n\n    if (texture.repeat.x !== 1 || texture.repeat.y !== 1) {\n      transformDef.scale = texture.repeat.toArray();\n      didTransform = true;\n    }\n\n    if (didTransform) {\n      mapDef.extensions = mapDef.extensions || {};\n      mapDef.extensions['KHR_texture_transform'] = transformDef;\n      this.extensionsUsed['KHR_texture_transform'] = true;\n    }\n  }\n  /**\n   * Process a buffer to append to the default one.\n   * @param  {ArrayBuffer} buffer\n   * @return {Integer}\n   */\n\n\n  processBuffer(buffer) {\n    const json = this.json;\n    const buffers = this.buffers;\n    if (!json.buffers) json.buffers = [{\n      byteLength: 0\n    }]; // All buffers are merged before export.\n\n    buffers.push(buffer);\n    return 0;\n  }\n  /**\n   * Process and generate a BufferView\n   * @param  {BufferAttribute} attribute\n   * @param  {number} componentType\n   * @param  {number} start\n   * @param  {number} count\n   * @param  {number} target (Optional) Target usage of the BufferView\n   * @return {Object}\n   */\n\n\n  processBufferView(attribute, componentType, start, count, target) {\n    const json = this.json;\n    if (!json.bufferViews) json.bufferViews = []; // Create a new dataview and dump the attribute's array into it\n\n    let componentSize;\n\n    if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n      componentSize = 1;\n    } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n      componentSize = 2;\n    } else {\n      componentSize = 4;\n    }\n\n    const byteLength = this.getPaddedBufferSize(count * attribute.itemSize * componentSize);\n    const dataView = new DataView(new ArrayBuffer(byteLength));\n    let offset = 0;\n\n    for (let i = start; i < start + count; i++) {\n      for (let a = 0; a < attribute.itemSize; a++) {\n        let value;\n\n        if (attribute.itemSize > 4) {\n          // no support for interleaved data for itemSize > 4\n          value = attribute.array[i * attribute.itemSize + a];\n        } else {\n          if (a === 0) value = attribute.getX(i);else if (a === 1) value = attribute.getY(i);else if (a === 2) value = attribute.getZ(i);else if (a === 3) value = attribute.getW(i);\n        }\n\n        if (value !== undefined) {\n          if (componentType === WEBGL_CONSTANTS.FLOAT) {\n            dataView.setFloat32(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_INT) {\n            dataView.setUint32(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n            dataView.setUint16(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n            dataView.setUint8(offset, value);\n          }\n        }\n\n        offset += componentSize;\n      }\n    }\n\n    const bufferViewDef = {\n      buffer: this.processBuffer(dataView.buffer),\n      byteOffset: this.byteOffset,\n      byteLength: byteLength\n    };\n    if (target !== undefined) bufferViewDef.target = target;\n\n    if (target === WEBGL_CONSTANTS.ARRAY_BUFFER) {\n      // Only define byteStride for vertex attributes.\n      bufferViewDef.byteStride = attribute.itemSize * componentSize;\n    }\n\n    this.byteOffset += byteLength;\n    json.bufferViews.push(bufferViewDef); // @TODO Merge bufferViews where possible.\n\n    const output = {\n      id: json.bufferViews.length - 1,\n      byteLength: 0\n    };\n    return output;\n  }\n  /**\n   * Process and generate a BufferView from an image Blob.\n   * @param {Blob} blob\n   * @return {Promise<Integer>}\n   */\n\n\n  processBufferViewImage(blob) {\n    const writer = this;\n    const json = writer.json;\n    if (!json.bufferViews) json.bufferViews = [];\n    return new Promise(resolve => {\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(blob);\n\n      reader.onloadend = () => {\n        if (reader.result !== null && typeof reader.result !== 'string' && json.bufferViews !== undefined) {\n          const buffer = this.getPaddedArrayBuffer(reader.result);\n          const bufferViewDef = {\n            buffer: writer.processBuffer(buffer),\n            byteOffset: writer.byteOffset,\n            byteLength: buffer.byteLength\n          };\n          writer.byteOffset += buffer.byteLength;\n          resolve(json.bufferViews.push(bufferViewDef) - 1);\n        }\n      };\n    });\n  }\n  /**\n   * Process attribute to generate an accessor\n   * @param  {BufferAttribute} attribute Attribute to process\n   * @param  {THREE.BufferGeometry} geometry (Optional) Geometry used for truncated draw range\n   * @param  {Integer} start (Optional)\n   * @param  {Integer} count (Optional)\n   * @return {Integer|null} Index of the processed accessor on the \"accessors\" array\n   */\n\n\n  processAccessor(attribute, geometry, start, count) {\n    const options = this.options;\n    const json = this.json;\n    const types = {\n      1: 'SCALAR',\n      2: 'VEC2',\n      3: 'VEC3',\n      4: 'VEC4',\n      16: 'MAT4'\n    };\n    let componentType; // Detect the component type of the attribute array (float, uint or ushort)\n\n    if (attribute.array.constructor === Float32Array) {\n      componentType = WEBGL_CONSTANTS.FLOAT;\n    } else if (attribute.array.constructor === Uint32Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_INT;\n    } else if (attribute.array.constructor === Uint16Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\n    } else if (attribute.array.constructor === Uint8Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\n    } else {\n      throw new Error('THREE.GLTFExporter: Unsupported bufferAttribute component type.');\n    }\n\n    if (start === undefined) start = 0;\n    if (count === undefined) count = attribute.count; // @TODO Indexed buffer geometry with drawRange not supported yet\n\n    if (options.truncateDrawRange && geometry !== undefined && geometry.index === null) {\n      const end = start + count;\n      const end2 = geometry.drawRange.count === Infinity ? attribute.count : geometry.drawRange.start + geometry.drawRange.count;\n      start = Math.max(start, geometry.drawRange.start);\n      count = Math.min(end, end2) - start;\n      if (count < 0) count = 0;\n    } // Skip creating an accessor if the attribute doesn't have data to export\n\n\n    if (count === 0) return null;\n    const minMax = this.getMinMax(attribute, start, count);\n    let bufferViewTarget; // If geometry isn't provided, don't infer the target usage of the bufferView. For\n    // animation samplers, target must not be set.\n\n    if (geometry !== undefined) {\n      bufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\n    }\n\n    if (bufferViewTarget !== undefined) {\n      const bufferView = this.processBufferView(attribute, componentType, start, count, bufferViewTarget);\n      const accessorDef = {\n        bufferView: bufferView.id,\n        byteOffset: bufferView.byteOffset,\n        componentType: componentType,\n        count: count,\n        max: minMax.max,\n        min: minMax.min,\n        type: types[attribute.itemSize]\n      };\n      if (attribute.normalized) accessorDef.normalized = true;\n      if (!json.accessors) json.accessors = [];\n      return json.accessors.push(accessorDef) - 1;\n    }\n  }\n  /**\n   * Process image\n   * @param  {Image} image to process\n   * @param  {Integer} format of the image (RGBAFormat)\n   * @param  {Boolean} flipY before writing out the image\n   * @return {Integer}     Index of the processed texture in the \"images\" array\n   */\n\n\n  processImage(image, format, flipY) {\n    const writer = this;\n    const cache = writer.cache;\n    const json = writer.json;\n    const options = writer.options;\n    const pending = writer.pending;\n    if (!cache.images.has(image)) cache.images.set(image, {});\n    const cachedImages = cache.images.get(image);\n    const mimeType = format === RGBAFormat ? 'image/png' : 'image/jpeg';\n    const key = mimeType + ':flipY/' + flipY.toString();\n    if (cachedImages !== undefined && cachedImages[key] !== undefined) return cachedImages[key];\n    if (!json.images) json.images = [];\n    const imageDef = {\n      mimeType: mimeType\n    };\n\n    if (options.embedImages && options.maxTextureSize !== undefined) {\n      const canvas = this.cachedCanvas = this.cachedCanvas || document.createElement('canvas');\n      canvas.width = Math.min(image.width, options.maxTextureSize);\n      canvas.height = Math.min(image.height, options.maxTextureSize);\n      const ctx = canvas.getContext('2d');\n\n      if (flipY) {\n        ctx === null || ctx === void 0 ? void 0 : ctx.translate(0, canvas.height);\n        ctx === null || ctx === void 0 ? void 0 : ctx.scale(1, -1);\n      }\n\n      if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n        ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n      } else {\n        if (format !== RGBAFormat) {\n          console.error('GLTFExporter: Only RGBA format is supported.');\n        }\n\n        if (image.width > options.maxTextureSize || image.height > options.maxTextureSize) {\n          console.warn('GLTFExporter: Image size is bigger than maxTextureSize', image);\n        }\n\n        const data = new Uint8ClampedArray(image.height * image.width * 4);\n\n        if (image instanceof ImageData) {\n          for (let i = 0; i < data.length; i += 4) {\n            data[i + 0] = image.data[i + 0];\n            data[i + 1] = image.data[i + 1];\n            data[i + 2] = image.data[i + 2];\n            data[i + 3] = image.data[i + 3];\n          }\n        }\n\n        ctx === null || ctx === void 0 ? void 0 : ctx.putImageData(new ImageData(data, image.width, image.height), 0, 0);\n      }\n\n      if (options.binary) {\n        pending.push(new Promise(function (resolve) {\n          canvas.toBlob(function (blob) {\n            if (blob !== null) {\n              writer.processBufferViewImage(blob).then(function (bufferViewIndex) {\n                imageDef.bufferView = bufferViewIndex; // @ts-expect-error\n\n                resolve();\n              });\n            }\n          }, mimeType);\n        }));\n      } else {\n        imageDef.uri = canvas.toDataURL(mimeType);\n      }\n    } else if (image instanceof Image) {\n      imageDef.uri = image.src;\n    }\n\n    const index = json.images.push(imageDef) - 1;\n    if (cachedImages !== undefined) cachedImages[key] = index;\n    return index;\n  }\n  /**\n   * Process sampler\n   * @param  {Texture} map Texture to process\n   * @return {Integer}     Index of the processed texture in the \"samplers\" array\n   */\n\n\n  processSampler(map) {\n    const json = this.json;\n    if (!json.samplers) json.samplers = [];\n    const samplerDef = {\n      magFilter: THREE_TO_WEBGL[map.magFilter],\n      minFilter: THREE_TO_WEBGL[map.minFilter],\n      wrapS: THREE_TO_WEBGL[map.wrapS],\n      wrapT: THREE_TO_WEBGL[map.wrapT]\n    };\n    return json.samplers.push(samplerDef) - 1;\n  }\n  /**\n   * Process texture\n   * @param  {Texture} map Map to process\n   * @return {Integer} Index of the processed texture in the \"textures\" array\n   */\n\n\n  processTexture(map) {\n    const cache = this.cache;\n    const json = this.json;\n    if (cache.textures.has(map)) return cache.textures.get(map);\n    if (!json.textures) json.textures = [];\n    const textureDef = {\n      sampler: this.processSampler(map),\n      source: this.processImage(map.image, map.format, map.flipY)\n    };\n    if (map.name) textureDef.name = map.name;\n\n    this._invokeAll(function (ext) {\n      ext.writeTexture && ext.writeTexture(map, textureDef);\n    });\n\n    const index = json.textures.push(textureDef) - 1;\n    cache.textures.set(map, index);\n    return index;\n  }\n  /**\n   * Process material\n   * @param  {THREE.Material} material Material to process\n   * @return {Integer|null} Index of the processed material in the \"materials\" array\n   */\n\n\n  processMaterial(material) {\n    const cache = this.cache;\n    const json = this.json;\n    if (cache.materials.has(material)) return cache.materials.get(material);\n\n    if (material instanceof ShaderMaterial && material.isShaderMaterial) {\n      console.warn('GLTFExporter: THREE.ShaderMaterial not supported.');\n      return null;\n    }\n\n    if (!json.materials) json.materials = []; // @QUESTION Should we avoid including any attribute that has the default value?\n\n    const materialDef = {\n      pbrMetallicRoughness: {}\n    };\n\n    if (!(material instanceof MeshStandardMaterial && material.isMeshStandardMaterial && material instanceof MeshBasicMaterial && // @ts-expect-error\n    material.isMeshBasicMaterial)) {\n      console.warn('GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.');\n    }\n\n    if (material instanceof MeshStandardMaterial || material instanceof MeshPhysicalMaterial) {\n      // pbrMetallicRoughness.baseColorFactor\n      const color = material.color.toArray().concat([material.opacity]);\n\n      if (!this.equalArray(color, [1, 1, 1, 1])) {\n        materialDef.pbrMetallicRoughness.baseColorFactor = color;\n      }\n    }\n\n    if (material instanceof MeshStandardMaterial && material.isMeshStandardMaterial) {\n      materialDef.pbrMetallicRoughness.metallicFactor = material.metalness;\n      materialDef.pbrMetallicRoughness.roughnessFactor = material.roughness;\n    } else {\n      materialDef.pbrMetallicRoughness.metallicFactor = 0.5;\n      materialDef.pbrMetallicRoughness.roughnessFactor = 0.5;\n    } // pbrMetallicRoughness.metallicRoughnessTexture\n\n\n    if (material instanceof MeshStandardMaterial && material.metalnessMap || material instanceof MeshStandardMaterial && material.roughnessMap) {\n      if (material.metalnessMap === material.roughnessMap && material.metalnessMap !== null) {\n        const metalRoughMapDef = {\n          index: this.processTexture(material.metalnessMap)\n        };\n        this.applyTextureTransform(metalRoughMapDef, material.metalnessMap);\n        materialDef.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\n      } else {\n        console.warn('THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.');\n      }\n    } // pbrMetallicRoughness.baseColorTexture or pbrSpecularGlossiness diffuseTexture\n\n\n    if ((material instanceof MeshStandardMaterial || material instanceof MeshPhysicalMaterial) && material.map) {\n      const baseColorMapDef = {\n        index: this.processTexture(material.map)\n      };\n      this.applyTextureTransform(baseColorMapDef, material.map);\n      materialDef.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\n    }\n\n    if ((material instanceof MeshStandardMaterial || material instanceof MeshPhysicalMaterial) && material.emissive) {\n      // note: emissive components are limited to stay within the 0 - 1 range to accommodate glTF spec. see #21849 and #22000.\n      const emissive = material.emissive.clone().multiplyScalar(material.emissiveIntensity);\n      const maxEmissiveComponent = Math.max(emissive.r, emissive.g, emissive.b);\n\n      if (maxEmissiveComponent > 1) {\n        emissive.multiplyScalar(1 / maxEmissiveComponent);\n        console.warn('THREE.GLTFExporter: Some emissive components exceed 1; emissive has been limited');\n      }\n\n      if (maxEmissiveComponent > 0) {\n        materialDef.emissiveFactor = emissive.toArray();\n      } // emissiveTexture\n\n\n      if (material.emissiveMap) {\n        const emissiveMapDef = {\n          index: this.processTexture(material.emissiveMap)\n        };\n        this.applyTextureTransform(emissiveMapDef, material.emissiveMap);\n        materialDef.emissiveTexture = emissiveMapDef;\n      }\n    } // normalTexture\n\n\n    if ((material instanceof MeshMatcapMaterial || material instanceof MeshNormalMaterial || material instanceof MeshPhongMaterial || material instanceof MeshStandardMaterial || material instanceof MeshToonMaterial) && material.normalMap) {\n      const normalMapDef = {\n        index: this.processTexture(material.normalMap)\n      };\n\n      if (material.normalScale && material.normalScale.x !== 1) {\n        // glTF normal scale is univariate. Ignore `y`, which may be flipped.\n        // Context: https://github.com/mrdoob/three.js/issues/11438#issuecomment-507003995\n        normalMapDef.scale = material.normalScale.x;\n      }\n\n      this.applyTextureTransform(normalMapDef, material.normalMap);\n      materialDef.normalTexture = normalMapDef;\n    } // occlusionTexture\n\n\n    if ((material instanceof MeshBasicMaterial || material instanceof MeshLambertMaterial || material instanceof MeshPhongMaterial || material instanceof MeshStandardMaterial || material instanceof MeshToonMaterial) && material.aoMap) {\n      const occlusionMapDef = {\n        index: this.processTexture(material.aoMap),\n        texCoord: 1\n      };\n\n      if (material.aoMapIntensity !== 1.0) {\n        occlusionMapDef.strength = material.aoMapIntensity;\n      }\n\n      this.applyTextureTransform(occlusionMapDef, material.aoMap);\n      materialDef.occlusionTexture = occlusionMapDef;\n    } // alphaMode\n\n\n    if (material.transparent) {\n      materialDef.alphaMode = 'BLEND';\n    } else {\n      if (material.alphaTest > 0.0) {\n        materialDef.alphaMode = 'MASK';\n        materialDef.alphaCutoff = material.alphaTest;\n      }\n    } // doubleSided\n\n\n    if (material.side === DoubleSide) materialDef.doubleSided = true;\n    if (material.name !== '') materialDef.name = material.name;\n    this.serializeUserData(material, materialDef);\n\n    this._invokeAll(function (ext) {\n      ext.writeMaterial && ext.writeMaterial(material, materialDef);\n    });\n\n    const index = json.materials.push(materialDef) - 1;\n    cache.materials.set(material, index);\n    return index;\n  }\n  /**\n   * Process mesh\n   * @param  {THREE.Mesh} mesh Mesh to process\n   * @return {Integer|null} Index of the processed mesh in the \"meshes\" array\n   */\n\n\n  processMesh(mesh) {\n    const cache = this.cache;\n    const json = this.json;\n    const meshCacheKeyParts = [mesh.geometry.uuid];\n\n    if (Array.isArray(mesh.material)) {\n      for (let i = 0, l = mesh.material.length; i < l; i++) {\n        meshCacheKeyParts.push(mesh.material[i].uuid);\n      }\n    } else {\n      meshCacheKeyParts.push(mesh.material.uuid);\n    }\n\n    const meshCacheKey = meshCacheKeyParts.join(':');\n    if (cache.meshes.has(meshCacheKey)) return cache.meshes.get(meshCacheKey);\n    const geometry = mesh.geometry;\n    let mode; // Use the correct mode\n\n    if (mesh instanceof LineSegments && mesh.isLineSegments) {\n      mode = WEBGL_CONSTANTS.LINES;\n    } else if (mesh instanceof LineLoop && mesh.isLineLoop) {\n      mode = WEBGL_CONSTANTS.LINE_LOOP;\n    } else if (mesh instanceof Line && mesh.isLine) {\n      mode = WEBGL_CONSTANTS.LINE_STRIP;\n    } else if (mesh instanceof Points && mesh.isPoints) {\n      mode = WEBGL_CONSTANTS.POINTS;\n    } else {\n      mode = (mesh.material instanceof MeshBasicMaterial || mesh.material instanceof MeshDepthMaterial || mesh.material instanceof MeshLambertMaterial || mesh.material instanceof MeshNormalMaterial || mesh.material instanceof MeshPhongMaterial || mesh.material instanceof MeshStandardMaterial || mesh.material instanceof MeshToonMaterial || mesh.material instanceof ShaderMaterial) && mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\n    }\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.GLTFExporter: Geometry is not of type THREE.BufferGeometry.');\n    }\n\n    const meshDef = {};\n    const attributes = {};\n    const primitives = [];\n    const targets = []; // Conversion between attributes names in threejs and gltf spec\n\n    const nameConversion = {\n      uv: 'TEXCOORD_0',\n      uv2: 'TEXCOORD_1',\n      color: 'COLOR_0',\n      skinWeight: 'WEIGHTS_0',\n      skinIndex: 'JOINTS_0'\n    };\n    const originalNormal = geometry.getAttribute('normal');\n\n    if (originalNormal !== undefined && !(originalNormal instanceof InterleavedBufferAttribute) && !this.isNormalizedNormalAttribute(originalNormal)) {\n      console.warn('THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.');\n      geometry.setAttribute('normal', this.createNormalizedNormalAttribute(originalNormal));\n    } // @QUESTION Detect if .vertexColors = true?\n    // For every attribute create an accessor\n\n\n    let modifiedAttribute = null;\n\n    for (let attributeName in geometry.attributes) {\n      // Ignore morph target attributes, which are exported later.\n      if (attributeName.substr(0, 5) === 'morph') continue;\n      const attribute = geometry.attributes[attributeName];\n      attributeName = nameConversion[attributeName] || attributeName.toUpperCase(); // Prefix all geometry attributes except the ones specifically\n      // listed in the spec; non-spec attributes are considered custom.\n\n      const validVertexAttributes = /^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\n      if (!validVertexAttributes.test(attributeName)) attributeName = '_' + attributeName;\n\n      if (cache.attributes.has(this.getUID(attribute))) {\n        attributes[attributeName] = cache.attributes.get(this.getUID(attribute));\n        continue;\n      } // JOINTS_0 must be UNSIGNED_BYTE or UNSIGNED_SHORT.\n\n\n      modifiedAttribute = null;\n      const array = attribute.array;\n\n      if (attributeName === 'JOINTS_0' && !(array instanceof Uint16Array) && !(array instanceof Uint8Array)) {\n        console.warn('GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.');\n        modifiedAttribute = new BufferAttribute(new Uint16Array(array), attribute.itemSize, attribute.normalized);\n      }\n\n      const accessor = modifiedAttribute !== null && this.processAccessor(modifiedAttribute || attribute, geometry);\n\n      if (accessor) {\n        attributes[attributeName] = accessor;\n        cache.attributes.set(this.getUID(attribute), accessor);\n      }\n    }\n\n    if (originalNormal !== undefined) geometry.setAttribute('normal', originalNormal); // Skip if no exportable attributes found\n\n    if (Object.keys(attributes).length === 0) return null; // Morph targets\n\n    if (mesh.morphTargetInfluences !== undefined && mesh.morphTargetInfluences.length > 0) {\n      const weights = [];\n      const targetNames = [];\n      const reverseDictionary = {};\n\n      if (mesh.morphTargetDictionary !== undefined) {\n        for (const key in mesh.morphTargetDictionary) {\n          reverseDictionary[mesh.morphTargetDictionary[key]] = key;\n        }\n      }\n\n      for (let i = 0; i < mesh.morphTargetInfluences.length; ++i) {\n        const target = {};\n        let warned = false;\n\n        for (const attributeName in geometry.morphAttributes) {\n          // glTF 2.0 morph supports only POSITION/NORMAL/TANGENT.\n          // Three.js doesn't support TANGENT yet.\n          if (attributeName !== 'position' && attributeName !== 'normal') {\n            if (!warned) {\n              console.warn('GLTFExporter: Only POSITION and NORMAL morph are supported.');\n              warned = true;\n            }\n\n            continue;\n          }\n\n          const attribute = geometry.morphAttributes[attributeName][i];\n          const gltfAttributeName = attributeName.toUpperCase(); // Three.js morph attribute has absolute values while the one of glTF has relative values.\n          //\n          // glTF 2.0 Specification:\n          // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#morph-targets\n\n          const baseAttribute = geometry.attributes[attributeName];\n\n          if (cache.attributes.has(this.getUID(attribute))) {\n            target[gltfAttributeName] = cache.attributes.get(this.getUID(attribute));\n            continue;\n          } // Clones attribute not to override\n\n\n          const relativeAttribute = attribute.clone();\n\n          if (!geometry.morphTargetsRelative) {\n            for (let j = 0, jl = attribute.count; j < jl; j++) {\n              relativeAttribute.setXYZ(j, attribute.getX(j) - baseAttribute.getX(j), attribute.getY(j) - baseAttribute.getY(j), attribute.getZ(j) - baseAttribute.getZ(j));\n            }\n          }\n\n          const accessor = this.processAccessor(relativeAttribute, geometry);\n\n          if (accessor != undefined) {\n            target[gltfAttributeName] = accessor;\n          }\n\n          cache.attributes.set(this.getUID(baseAttribute), target[gltfAttributeName]);\n        }\n\n        targets.push(target);\n        weights.push(mesh.morphTargetInfluences[i]);\n        if (mesh.morphTargetDictionary !== undefined) targetNames.push(reverseDictionary[i]);\n      }\n\n      meshDef.weights = weights;\n\n      if (targetNames.length > 0) {\n        meshDef.extras = {};\n        meshDef.extras.targetNames = targetNames;\n      }\n    }\n\n    const isMultiMaterial = Array.isArray(mesh.material);\n    if (isMultiMaterial && geometry.groups.length === 0) return null;\n    const materials = isMultiMaterial ? mesh.material : [mesh.material];\n    const groups = isMultiMaterial ? geometry.groups : [{\n      materialIndex: 0,\n      start: undefined,\n      count: undefined\n    }];\n\n    for (let i = 0, il = groups.length; i < il; i++) {\n      const primitive = {\n        mode: mode,\n        attributes: attributes\n      };\n\n      if (geometry instanceof Object3D || geometry instanceof Material) {\n        this.serializeUserData(geometry, primitive);\n      }\n\n      if (targets.length > 0) primitive.targets = targets;\n\n      if (geometry.index !== null) {\n        let cacheKey = this.getUID(geometry.index);\n\n        if (groups[i].start !== undefined || groups[i].count !== undefined) {\n          // @ts-expect-error\n          cacheKey += `:${groups[i].start}:${groups[i].count}`;\n        }\n\n        if (cache.attributes.has(cacheKey)) {\n          primitive.indices = cache.attributes.get(cacheKey);\n        } else {\n          primitive.indices = this.processAccessor(geometry.index, geometry, groups[i].start, groups[i].count);\n          cache.attributes.set(cacheKey, primitive.indices);\n        }\n\n        if (primitive.indices === null) delete primitive.indices;\n      }\n\n      const materialIndex = groups[i].materialIndex;\n\n      if (materialIndex !== undefined && Array.isArray(materials)) {\n        const targetMaterials = materials[materialIndex];\n\n        if (!Array.isArray(targetMaterials)) {\n          const material = this.processMaterial(targetMaterials);\n          if (material !== null) primitive.material = material;\n          primitives.push(primitive);\n        }\n      }\n    }\n\n    meshDef.primitives = primitives;\n    if (!json.meshes) json.meshes = [];\n\n    this._invokeAll(function (ext) {\n      ext.writeMesh && ext.writeMesh(mesh, meshDef);\n    });\n\n    const index = json.meshes.push(meshDef) - 1;\n    cache.meshes.set(meshCacheKey, index);\n    return index;\n  }\n  /**\n   * Process camera\n   * @param  {THREE.Camera} camera Camera to process\n   * @return {Integer}      Index of the processed mesh in the \"camera\" array\n   */\n\n\n  processCamera(camera) {\n    const json = this.json;\n    if (!json.cameras) json.cameras = [];\n    const isOrtho = camera instanceof OrthographicCamera && camera.isOrthographicCamera;\n    const cameraDef = {\n      type: isOrtho ? 'orthographic' : 'perspective'\n    };\n\n    if (camera instanceof OrthographicCamera && isOrtho) {\n      cameraDef.orthographic = {\n        xmag: camera.right * 2,\n        ymag: camera.top * 2,\n        zfar: camera.far <= 0 ? 0.001 : camera.far,\n        znear: camera.near < 0 ? 0 : camera.near\n      };\n    } else if (camera instanceof PerspectiveCamera) {\n      cameraDef.perspective = {\n        aspectRatio: camera.aspect,\n        yfov: MathUtils.degToRad(camera.fov),\n        zfar: camera.far <= 0 ? 0.001 : camera.far,\n        znear: camera.near < 0 ? 0 : camera.near\n      };\n    } // Question: Is saving \"type\" as name intentional?\n\n\n    if (camera.name !== '') cameraDef.name = camera.type;\n    return json.cameras.push(cameraDef) - 1;\n  }\n  /**\n   * Creates glTF animation entry from AnimationClip object.\n   *\n   * Status:\n   * - Only properties listed in PATH_PROPERTIES may be animated.\n   *\n   * @param {THREE.AnimationClip} clip\n   * @param {THREE.Object3D} root\n   * @return {number|null}\n   */\n\n\n  processAnimation(clip, root) {\n    const json = this.json;\n    const nodeMap = this.nodeMap;\n    if (!json.animations) json.animations = [];\n    clip = GLTFExporter.Utils.mergeMorphTargetTracks(clip.clone(), root);\n    const tracks = clip.tracks;\n    const channels = [];\n    const samplers = [];\n\n    for (let i = 0; i < tracks.length; ++i) {\n      const track = tracks[i];\n      const trackBinding = PropertyBinding.parseTrackName(track.name);\n      let trackNode = PropertyBinding.findNode(root, trackBinding.nodeName);\n      const trackProperty = PATH_PROPERTIES[trackBinding.propertyName];\n\n      if (trackBinding.objectName === 'bones') {\n        if (trackNode.isSkinnedMesh) {\n          trackNode = trackNode.skeleton.getBoneByName(trackBinding.objectIndex);\n        } else {\n          trackNode = undefined;\n        }\n      }\n\n      if (!trackNode || !trackProperty) {\n        console.warn('THREE.GLTFExporter: Could not export animation track \"%s\".', track.name);\n        return null;\n      }\n\n      const inputItemSize = 1;\n      let outputItemSize = track.values.length / track.times.length;\n\n      if (trackProperty === PATH_PROPERTIES.morphTargetInfluences) {\n        outputItemSize /= trackNode.morphTargetInfluences.length;\n      }\n\n      let interpolation; // @TODO export CubicInterpolant(InterpolateSmooth) as CUBICSPLINE\n      // Detecting glTF cubic spline interpolant by checking factory method's special property\n      // GLTFCubicSplineInterpolant is a custom interpolant and track doesn't return\n      // valid value from .getInterpolation().\n      // @ts-expect-error\n\n      if (track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n        interpolation = 'CUBICSPLINE'; // itemSize of CUBICSPLINE keyframe is 9\n        // (VEC3 * 3: inTangent, splineVertex, and outTangent)\n        // but needs to be stored as VEC3 so dividing by 3 here.\n\n        outputItemSize /= 3;\n      } else if (track.getInterpolation() === InterpolateDiscrete) {\n        interpolation = 'STEP';\n      } else {\n        interpolation = 'LINEAR';\n      }\n\n      samplers.push({\n        input: this.processAccessor(new BufferAttribute(track.times, inputItemSize)),\n        output: this.processAccessor(new BufferAttribute(track.values, outputItemSize)),\n        interpolation: interpolation\n      });\n      channels.push({\n        sampler: samplers.length - 1,\n        target: {\n          node: nodeMap.get(trackNode),\n          path: trackProperty\n        }\n      });\n    }\n\n    json.animations.push({\n      name: clip.name || 'clip_' + json.animations.length,\n      samplers: samplers,\n      channels: channels\n    });\n    return json.animations.length - 1;\n  }\n  /**\n   * @param {THREE.Object3D} object\n   * @return {number|null}\n   */\n\n\n  processSkin(object) {\n    const json = this.json;\n    const nodeMap = this.nodeMap;\n\n    if (json.nodes !== undefined && object instanceof SkinnedMesh) {\n      const node = json.nodes[nodeMap.get(object)];\n      const skeleton = object.skeleton;\n      if (skeleton === undefined) return null;\n      const rootJoint = object.skeleton.bones[0];\n      if (rootJoint === undefined) return null;\n      const joints = [];\n      const inverseBindMatrices = new Float32Array(skeleton.bones.length * 16);\n      const temporaryBoneInverse = new Matrix4();\n\n      for (let i = 0; i < skeleton.bones.length; ++i) {\n        joints.push(nodeMap.get(skeleton.bones[i]));\n        temporaryBoneInverse.copy(skeleton.boneInverses[i]);\n        temporaryBoneInverse.multiply(object.bindMatrix).toArray(inverseBindMatrices, i * 16);\n      }\n\n      if (json.skins === undefined) json.skins = [];\n      json.skins.push({\n        inverseBindMatrices: this.processAccessor(new BufferAttribute(inverseBindMatrices, 16)),\n        joints: joints,\n        skeleton: nodeMap.get(rootJoint)\n      });\n      const skinIndex = node.skin = json.skins.length - 1;\n      return skinIndex;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Process Object3D node\n   * @param  {THREE.Object3D} node Object3D to processNode\n   * @return {Integer} Index of the node in the nodes list\n   */\n\n\n  processNode(object) {\n    const json = this.json;\n    const options = this.options;\n    const nodeMap = this.nodeMap;\n    if (!json.nodes) json.nodes = [];\n    const nodeDef = {};\n\n    if (options.trs) {\n      const rotation = object.quaternion.toArray();\n      const position = object.position.toArray();\n      const scale = object.scale.toArray();\n\n      if (!this.equalArray(rotation, [0, 0, 0, 1])) {\n        nodeDef.rotation = rotation;\n      }\n\n      if (!this.equalArray(position, [0, 0, 0])) {\n        nodeDef.translation = position;\n      }\n\n      if (!this.equalArray(scale, [1, 1, 1])) {\n        nodeDef.scale = scale;\n      }\n    } else {\n      if (object.matrixAutoUpdate) {\n        object.updateMatrix();\n      }\n\n      if (!this.isIdentityMatrix(object.matrix)) {\n        nodeDef.matrix = object.matrix.elements;\n      }\n    } // We don't export empty strings name because it represents no-name in Three.js.\n\n\n    if (object.name !== '') nodeDef.name = String(object.name);\n    this.serializeUserData(object, nodeDef);\n\n    if ((object instanceof Mesh && object.isMesh || object instanceof Line && object.isLine || object instanceof Points && object.isPoints) && object instanceof Mesh) {\n      const meshIndex = this.processMesh(object);\n      if (meshIndex !== null) nodeDef.mesh = meshIndex;\n    } else if (object instanceof Camera && object.isCamera) {\n      nodeDef.camera = this.processCamera(object);\n    }\n\n    if (object instanceof SkinnedMesh && object.isSkinnedMesh) this.skins.push(object);\n\n    if (object.children.length > 0) {\n      const children = [];\n\n      for (let i = 0, l = object.children.length; i < l; i++) {\n        const child = object.children[i];\n\n        if (child.visible || !options.onlyVisible) {\n          const nodeIndex = this.processNode(child);\n          if (nodeIndex !== null) children.push(nodeIndex);\n        }\n      }\n\n      if (children.length > 0) nodeDef.children = children;\n    }\n\n    this._invokeAll(function (ext) {\n      ext.writeNode && ext.writeNode(object, nodeDef);\n    });\n\n    const nodeIndex = json.nodes.push(nodeDef) - 1;\n    nodeMap.set(object, nodeIndex);\n    return nodeIndex;\n  }\n  /**\n   * Process Scene\n   * @param  {Scene} node Scene to process\n   */\n\n\n  processScene(scene) {\n    const json = this.json;\n    const options = this.options;\n\n    if (!json.scenes) {\n      json.scenes = [];\n      json.scene = 0;\n    }\n\n    const sceneDef = {};\n    if (scene.name !== '') sceneDef.name = scene.name;\n    json.scenes.push(sceneDef);\n    const nodes = [];\n\n    for (let i = 0, l = scene.children.length; i < l; i++) {\n      const child = scene.children[i];\n\n      if (child.visible || !options.onlyVisible) {\n        const nodeIndex = this.processNode(child);\n        if (nodeIndex !== null) nodes.push(nodeIndex);\n      }\n    }\n\n    if (nodes.length > 0) sceneDef.nodes = nodes;\n    this.serializeUserData(scene, sceneDef);\n  }\n\n  processObjects(objects) {\n    const scene = new Scene();\n    scene.name = 'AuxScene';\n\n    for (let i = 0; i < objects.length; i++) {\n      // We push directly to children instead of calling `add` to prevent\n      // modify the .parent and break its original scene and hierarchy\n      scene.children.push(objects[i]);\n    }\n\n    this.processScene(scene);\n  }\n  /**\n   * @param {THREE.Object3D|Array<THREE.Object3D>} input\n   */\n\n\n  processInput(input) {\n    const options = this.options;\n    input = input instanceof Array ? input : [input];\n\n    this._invokeAll(function (ext) {\n      ext.beforeParse && ext.beforeParse(input);\n    });\n\n    const objectsWithoutScene = [];\n\n    for (let i = 0; i < input.length; i++) {\n      const inputScene = input[i];\n\n      if (inputScene instanceof Scene) {\n        this.processScene(inputScene);\n      } else {\n        objectsWithoutScene.push(input[i]);\n      }\n    }\n\n    if (objectsWithoutScene.length > 0) this.processObjects(objectsWithoutScene);\n\n    for (let i = 0; i < this.skins.length; ++i) {\n      this.processSkin(this.skins[i]);\n    }\n\n    for (let i = 0; options.animations !== undefined && i < options.animations.length; ++i) {\n      this.processAnimation(options.animations[i], input[0]);\n    }\n\n    this._invokeAll(function (ext) {\n      ext.afterParse && ext.afterParse(input);\n    });\n  }\n\n  _invokeAll(func) {\n    for (let i = 0, il = this.plugins.length; i < il; i++) {\n      func(this.plugins[i]);\n    }\n  } //------------------------------------------------------------------------------\n  // Utility functions\n  //------------------------------------------------------------------------------\n\n  /**\n   * Compare two arrays\n   * @param  {Array} array1 Array 1 to compare\n   * @param  {Array} array2 Array 2 to compare\n   * @return {Boolean}        Returns true if both arrays are equal\n   */\n\n\n  equalArray(array1, array2) {\n    return array1.length === array2.length && array1.every(function (element, index) {\n      return element === array2[index];\n    });\n  }\n  /**\n   * Converts a string to an ArrayBuffer.\n   * @param  {string} text\n   * @return {ArrayBuffer}\n   */\n\n\n  stringToArrayBuffer(text) {\n    if (window.TextEncoder !== undefined) {\n      return new TextEncoder().encode(text).buffer;\n    }\n\n    const array = new Uint8Array(new ArrayBuffer(text.length));\n\n    for (let i = 0, il = text.length; i < il; i++) {\n      const value = text.charCodeAt(i); // Replacing multi-byte character with space(0x20).\n\n      array[i] = value > 0xff ? 0x20 : value;\n    }\n\n    return array.buffer;\n  }\n\n  isIdentityMatrix(matrix) {\n    return this.equalArray(matrix.elements, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n  }\n\n  getMinMax(attribute, start, count) {\n    const output = {\n      min: new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),\n      max: new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)\n    };\n\n    for (let i = start; i < start + count; i++) {\n      for (let a = 0; a < attribute.itemSize; a++) {\n        let value;\n\n        if (attribute.itemSize > 4) {\n          // no support for interleaved data for itemSize > 4\n          value = attribute.array[i * attribute.itemSize + a];\n        } else {\n          if (a === 0) value = attribute.getX(i);else if (a === 1) value = attribute.getY(i);else if (a === 2) value = attribute.getZ(i);else if (a === 3) value = attribute.getW(i);\n        }\n\n        if (value !== undefined) {\n          output.min[a] = Math.min(output.min[a], value);\n          output.max[a] = Math.max(output.max[a], value);\n        }\n      }\n    }\n\n    return output;\n  }\n  /**\n   * Get the required size + padding for a buffer, rounded to the next 4-byte boundary.\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#data-alignment\n   */\n\n\n  getPaddedBufferSize(bufferSize) {\n    return Math.ceil(bufferSize / 4) * 4;\n  }\n  /**\n   * Returns a buffer aligned to 4-byte boundary.\n   *\n   * @param {ArrayBuffer} arrayBuffer Buffer to pad\n   * @param {Integer} paddingByte (Optional)\n   * @returns {ArrayBuffer} The same buffer if it's already aligned to 4-byte boundary or a new buffer\n   */\n\n\n  getPaddedArrayBuffer(arrayBuffer) {\n    let paddingByte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const paddedLength = this.getPaddedBufferSize(arrayBuffer.byteLength);\n\n    if (paddedLength !== arrayBuffer.byteLength) {\n      const array = new Uint8Array(paddedLength);\n      array.set(new Uint8Array(arrayBuffer));\n\n      if (paddingByte !== 0) {\n        for (let i = arrayBuffer.byteLength; i < paddedLength; i++) {\n          array[i] = paddingByte;\n        }\n      }\n\n      return array.buffer;\n    }\n\n    return arrayBuffer;\n  }\n\n}\n/**\n * Punctual Lights Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n */\n\n\nclass GLTFLightExtension {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    this.writer = writer;\n    this.name = 'KHR_lights_punctual';\n  }\n\n  writeNode(light, nodeDef) {\n    if (!light.isLight) return;\n\n    if (!(light instanceof DirectionalLight && light.isDirectionalLight) && // @ts-expect-error\n    !(light instanceof PointLight && light.isPointLight) && !(light instanceof SpotLight && light.isSpotLight)) {\n      console.warn('THREE.GLTFExporter: Only directional, point, and spot lights are supported.', light);\n      return;\n    }\n\n    const writer = this.writer;\n    const json = writer.json;\n    const extensionsUsed = writer.extensionsUsed;\n    const lightDef = {};\n    if (light.name) lightDef.name = light.name;\n    lightDef.color = light.color.toArray();\n    lightDef.intensity = light.intensity;\n\n    if (light instanceof DirectionalLight && light.isDirectionalLight) {\n      lightDef.type = 'directional';\n    } else if (light instanceof PointLight && // @ts-expect-error\n    light.isPointLight) {\n      lightDef.type = 'point';\n      if (light.distance > 0) lightDef.range = light.distance;\n    } else if (light instanceof SpotLight && light.isSpotLight) {\n      lightDef.type = 'spot';\n      if (light.distance > 0) lightDef.range = light.distance;\n      lightDef.spot = {};\n      lightDef.spot.innerConeAngle = (light.penumbra - 1.0) * light.angle * -1.0;\n      lightDef.spot.outerConeAngle = light.angle;\n    }\n\n    if (!(light instanceof DirectionalLight) && light.decay !== undefined && light.decay !== 2) {\n      console.warn('THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, ' + 'and expects light.decay=2.');\n    }\n\n    if (!(light instanceof PointLight) && light.target && (light.target.parent !== light || light.target.position.x !== 0 || light.target.position.y !== 0 || light.target.position.z !== -1)) {\n      console.warn('THREE.GLTFExporter: Light direction may be lost. For best results, ' + 'make light.target a child of the light with position 0,0,-1.');\n    }\n\n    if (!extensionsUsed[this.name]) {\n      json.extensions = json.extensions || {};\n      json.extensions[this.name] = {\n        lights: []\n      };\n      extensionsUsed[this.name] = true;\n    }\n\n    if (json.extensions !== undefined) {\n      const lights = json.extensions[this.name].lights;\n      lights.push(lightDef);\n      nodeDef.extensions = nodeDef.extensions || {};\n      nodeDef.extensions[this.name] = {\n        light: lights.length - 1\n      };\n    }\n  }\n\n}\n/**\n * Unlit Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n */\n\n\nclass GLTFMaterialsUnlitExtension {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    this.writer = writer;\n    this.name = 'KHR_materials_unlit';\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!(material instanceof MeshBasicMaterial && // @ts-expect-error\n    material.isMeshBasicMaterial)) {\n      return;\n    }\n\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = {};\n    extensionsUsed[this.name] = true;\n    materialDef.pbrMetallicRoughness.metallicFactor = 0.0;\n    materialDef.pbrMetallicRoughness.roughnessFactor = 0.9;\n  }\n\n}\n/**\n * Specular-Glossiness Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness\n */\n\n\nclass GLTFMaterialsPBRSpecularGlossiness {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    this.writer = writer;\n    this.name = 'KHR_materials_pbrSpecularGlossiness';\n  }\n\n  writeMaterial(material, materialDef) {\n    // @ts-expect-error\n    if (!material.isGLTFSpecularGlossinessMaterial) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n\n    if (materialDef.pbrMetallicRoughness.baseColorFactor) {\n      extensionDef.diffuseFactor = materialDef.pbrMetallicRoughness.baseColorFactor;\n    }\n\n    if (material instanceof MeshPhongMaterial) {\n      const specularFactor = [1, 1, 1];\n      material.specular.toArray(specularFactor, 0);\n      extensionDef.specularFactor = specularFactor;\n      extensionDef.glossinessFactor = // @ts-expect-error\n      material.glossiness;\n    }\n\n    if (materialDef.pbrMetallicRoughness.baseColorTexture) {\n      extensionDef.diffuseTexture = materialDef.pbrMetallicRoughness.baseColorTexture;\n    }\n\n    if ((material instanceof MeshBasicMaterial || material instanceof MeshLambertMaterial || material instanceof MeshPhongMaterial) && material.specularMap) {\n      const specularMapDef = {\n        index: writer.processTexture(material.specularMap)\n      };\n      writer.applyTextureTransform(specularMapDef, material.specularMap);\n      extensionDef.specularGlossinessTexture = specularMapDef;\n    }\n\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n\n}\n/**\n * Transmission Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_transmission\n */\n\n\nclass GLTFMaterialsTransmissionExtension {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    this.writer = writer;\n    this.name = 'KHR_materials_transmission';\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!(material instanceof MeshPhysicalMaterial && // @ts-expect-error\n    material.isMeshPhysicalMaterial) || material.transmission === 0) {\n      return;\n    }\n\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.transmissionFactor = material.transmission;\n\n    if (material.transmissionMap) {\n      const transmissionMapDef = {\n        index: writer.processTexture(material.transmissionMap)\n      };\n      writer.applyTextureTransform(transmissionMapDef, material.transmissionMap);\n      extensionDef.transmissionTexture = transmissionMapDef;\n    }\n\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n\n}\n/**\n * Materials Volume Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_volume\n */\n\n\nclass GLTFMaterialsVolumeExtension {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    this.writer = writer;\n    this.name = 'KHR_materials_volume';\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!(material instanceof MeshPhysicalMaterial && // @ts-expect-error\n    material.isMeshPhysicalMaterial) || material.thickness === 0) {\n      return;\n    }\n\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.thickness = material.thickness;\n\n    if (material.thicknessMap) {\n      const thicknessMapDef = {\n        index: writer.processTexture(material.thicknessMap)\n      };\n      writer.applyTextureTransform(thicknessMapDef, material.thicknessMap);\n      extensionDef.thicknessTexture = thicknessMapDef;\n    }\n\n    extensionDef.attenuationDistance = material.attenuationDistance;\n    extensionDef.attenuationColor = //@ts-expect-error\n    material.attenuationTint.toArray();\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n\n}\n\nexport { GLTFExporter };","map":{"version":3,"names":["_defineProperty","PropertyBinding","InterpolateLinear","Vector3","RGBAFormat","ShaderMaterial","MeshStandardMaterial","MeshBasicMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","MeshNormalMaterial","MeshPhongMaterial","MeshToonMaterial","MeshLambertMaterial","DoubleSide","LineSegments","LineLoop","Line","Points","MeshDepthMaterial","InterleavedBufferAttribute","BufferAttribute","Object3D","Material","OrthographicCamera","PerspectiveCamera","MathUtils","InterpolateDiscrete","SkinnedMesh","Matrix4","Mesh","Camera","Scene","DirectionalLight","PointLight","SpotLight","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","GLTFExporter","constructor","pluginCallbacks","register","writer","GLTFLightExtension","GLTFMaterialsUnlitExtension","GLTFMaterialsPBRSpecularGlossiness","GLTFMaterialsTransmissionExtension","GLTFMaterialsVolumeExtension","callback","indexOf","push","unregister","splice","parse","input","onDone","options","GLTFWriter","plugins","i","il","length","setPlugins","write","insertKeyframe","track","time","tolerance","valueSize","getValueSize","times","TimeBufferType","values","ValueBufferType","interpolant","createInterpolant","index","Math","abs","set","evaluate","slice","mergeMorphTargetTracks","clip","root","tracks","mergedTracks","sourceTracks","sourceTrack","sourceTrackBinding","parseTrackName","name","sourceTrackNode","findNode","nodeName","propertyName","propertyIndex","undefined","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","isInterpolantFactoryMethodGLTFCubicSpline","Error","console","warn","clone","setInterpolation","targetCount","morphTargetInfluences","targetIndex","morphTargetDictionary","mergedTrack","uuid","j","sourceInterpolant","keyframeIndex","WEBGL_CONSTANTS","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","UNSIGNED_BYTE","UNSIGNED_SHORT","FLOAT","UNSIGNED_INT","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","NEAREST","LINEAR","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","CLAMP_TO_EDGE","MIRRORED_REPEAT","REPEAT","THREE_TO_WEBGL","PATH_PROPERTIES","scale","position","quaternion","GLB_HEADER_BYTES","GLB_HEADER_MAGIC","GLB_VERSION","GLB_CHUNK_PREFIX_BYTES","GLB_CHUNK_TYPE_JSON","GLB_CHUNK_TYPE_BIN","pending","buffers","byteOffset","nodeMap","Map","skins","extensionsUsed","uids","uid","json","asset","version","generator","cache","meshes","attributes","attributesNormalized","materials","textures","images","cachedCanvas","Object","assign","binary","trs","onlyVisible","truncateDrawRange","embedImages","maxTextureSize","Infinity","animations","includeCustomExtensions","processInput","Promise","all","then","blob","Blob","type","extensionsUsedList","keys","byteLength","size","reader","window","FileReader","readAsArrayBuffer","onloadend","result","binaryChunk","getPaddedArrayBuffer","binaryChunkPrefix","DataView","ArrayBuffer","setUint32","jsonChunk","stringToArrayBuffer","JSON","stringify","jsonChunkPrefix","header","headerView","totalByteLength","glbBlob","glbReader","readAsDataURL","base64data","uri","serializeUserData","object","objectDef","userData","gltfExtensions","extensions","extensionName","extras","error","message","getUID","has","get","isNormalizedNormalAttribute","normal","v","count","fromBufferAttribute","createNormalizedNormalAttribute","attribute","x","y","z","setX","normalize","setXYZ","applyTextureTransform","mapDef","texture","didTransform","transformDef","offset","toArray","rotation","repeat","processBuffer","buffer","processBufferView","componentType","start","target","bufferViews","componentSize","getPaddedBufferSize","itemSize","dataView","a","value","array","getX","getY","getZ","getW","setFloat32","setUint16","setUint8","bufferViewDef","byteStride","output","id","processBufferViewImage","resolve","processAccessor","geometry","types","Float32Array","Uint32Array","Uint16Array","Uint8Array","end","end2","drawRange","max","min","minMax","getMinMax","bufferViewTarget","bufferView","accessorDef","normalized","accessors","processImage","image","format","flipY","cachedImages","mimeType","key","toString","imageDef","canvas","document","createElement","width","height","ctx","getContext","translate","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","drawImage","data","Uint8ClampedArray","ImageData","putImageData","toBlob","bufferViewIndex","toDataURL","Image","src","processSampler","map","samplers","samplerDef","magFilter","minFilter","wrapS","wrapT","processTexture","textureDef","sampler","source","_invokeAll","ext","writeTexture","processMaterial","material","isShaderMaterial","materialDef","pbrMetallicRoughness","isMeshStandardMaterial","isMeshBasicMaterial","color","concat","opacity","equalArray","baseColorFactor","metallicFactor","metalness","roughnessFactor","roughness","metalnessMap","roughnessMap","metalRoughMapDef","metallicRoughnessTexture","baseColorMapDef","baseColorTexture","emissive","multiplyScalar","emissiveIntensity","maxEmissiveComponent","r","g","b","emissiveFactor","emissiveMap","emissiveMapDef","emissiveTexture","normalMap","normalMapDef","normalScale","normalTexture","aoMap","occlusionMapDef","texCoord","aoMapIntensity","strength","occlusionTexture","transparent","alphaMode","alphaTest","alphaCutoff","side","doubleSided","writeMaterial","processMesh","mesh","meshCacheKeyParts","Array","isArray","l","meshCacheKey","join","mode","isLineSegments","isLineLoop","isLine","isPoints","wireframe","isBufferGeometry","meshDef","primitives","targets","nameConversion","uv","uv2","skinWeight","skinIndex","originalNormal","getAttribute","setAttribute","modifiedAttribute","attributeName","substr","toUpperCase","validVertexAttributes","test","accessor","weights","targetNames","reverseDictionary","warned","morphAttributes","gltfAttributeName","baseAttribute","relativeAttribute","morphTargetsRelative","jl","isMultiMaterial","groups","materialIndex","primitive","cacheKey","indices","targetMaterials","writeMesh","processCamera","camera","cameras","isOrtho","isOrthographicCamera","cameraDef","orthographic","xmag","right","ymag","top","zfar","far","znear","near","perspective","aspectRatio","aspect","yfov","degToRad","fov","processAnimation","Utils","channels","trackBinding","trackNode","trackProperty","objectName","isSkinnedMesh","skeleton","getBoneByName","objectIndex","inputItemSize","outputItemSize","interpolation","getInterpolation","node","path","processSkin","nodes","rootJoint","bones","joints","inverseBindMatrices","temporaryBoneInverse","copy","boneInverses","multiply","bindMatrix","skin","processNode","nodeDef","translation","matrixAutoUpdate","updateMatrix","isIdentityMatrix","matrix","elements","String","isMesh","meshIndex","isCamera","children","child","visible","nodeIndex","writeNode","processScene","scene","scenes","sceneDef","processObjects","objects","beforeParse","objectsWithoutScene","inputScene","afterParse","func","array1","array2","every","element","text","TextEncoder","encode","charCodeAt","fill","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","bufferSize","ceil","arrayBuffer","paddingByte","paddedLength","light","isLight","isDirectionalLight","isPointLight","isSpotLight","lightDef","intensity","distance","range","spot","innerConeAngle","penumbra","angle","outerConeAngle","decay","parent","lights","isGLTFSpecularGlossinessMaterial","extensionDef","diffuseFactor","specularFactor","specular","glossinessFactor","glossiness","diffuseTexture","specularMap","specularMapDef","specularGlossinessTexture","isMeshPhysicalMaterial","transmission","transmissionFactor","transmissionMap","transmissionMapDef","transmissionTexture","thickness","thicknessMap","thicknessMapDef","thicknessTexture","attenuationDistance","attenuationColor","attenuationTint"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/three-stdlib/exporters/GLTFExporter.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { PropertyBinding, InterpolateLinear, Vector3, RGBAFormat, ShaderMaterial, MeshStandardMaterial, MeshBasicMaterial, MeshPhysicalMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshToonMaterial, MeshLambertMaterial, DoubleSide, LineSegments, LineLoop, Line, Points, MeshDepthMaterial, InterleavedBufferAttribute, BufferAttribute, Object3D, Material, OrthographicCamera, PerspectiveCamera, MathUtils, InterpolateDiscrete, SkinnedMesh, Matrix4, Mesh, Camera, Scene, DirectionalLight, PointLight, SpotLight, NearestFilter, NearestMipmapNearestFilter, NearestMipmapLinearFilter, LinearFilter, LinearMipmapNearestFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping, RepeatWrapping, MirroredRepeatWrapping } from 'three';\n\nclass GLTFExporter {\n  constructor() {\n    _defineProperty(this, \"pluginCallbacks\", void 0);\n\n    this.pluginCallbacks = [];\n    this.register(function (writer) {\n      return new GLTFLightExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsUnlitExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsPBRSpecularGlossiness(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsTransmissionExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsVolumeExtension(writer);\n    });\n  }\n\n  register(callback) {\n    if (this.pluginCallbacks.indexOf(callback) === -1) {\n      this.pluginCallbacks.push(callback);\n    }\n\n    return this;\n  }\n\n  unregister(callback) {\n    if (this.pluginCallbacks.indexOf(callback) !== -1) {\n      this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(callback), 1);\n    }\n\n    return this;\n  }\n\n  parse(input, onDone, options) {\n    const writer = new GLTFWriter();\n    const plugins = [];\n\n    for (let i = 0, il = this.pluginCallbacks.length; i < il; i++) {\n      plugins.push(this.pluginCallbacks[i](writer));\n    }\n\n    writer.setPlugins(plugins);\n    writer.write(input, onDone, options);\n  }\n  /**\n   * Static utility functions\n   */\n\n\n} //------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\n\n_defineProperty(GLTFExporter, \"Utils\", {\n  insertKeyframe: function (track, time) {\n    const tolerance = 0.001; // 1ms\n\n    const valueSize = track.getValueSize(); // @ts-expect-error\n\n    const times = new track.TimeBufferType(track.times.length + 1); // @ts-expect-error\n\n    const values = new track.ValueBufferType(track.values.length + valueSize);\n    /**\n     * NOTE: createInterpolant does not exist in the type, but it does exist as a property of the class\n     * https://github.com/mrdoob/three.js/blob/77480d339d737b7505b335101ffd3cf29a30738d/src/animation/KeyframeTrack.js#L117\n     */\n    // @ts-expect-error\n\n    const interpolant = track.createInterpolant(new track.ValueBufferType(valueSize));\n    let index;\n\n    if (track.times.length === 0) {\n      times[0] = time;\n\n      for (let i = 0; i < valueSize; i++) {\n        values[i] = 0;\n      }\n\n      index = 0;\n    } else if (time < track.times[0]) {\n      if (Math.abs(track.times[0] - time) < tolerance) return 0;\n      times[0] = time;\n      times.set(track.times, 1);\n      values.set(interpolant.evaluate(time), 0);\n      values.set(track.values, valueSize);\n      index = 0;\n    } else if (time > track.times[track.times.length - 1]) {\n      if (Math.abs(track.times[track.times.length - 1] - time) < tolerance) {\n        return track.times.length - 1;\n      }\n\n      times[times.length - 1] = time;\n      times.set(track.times, 0);\n      values.set(track.values, 0);\n      values.set(interpolant.evaluate(time), track.values.length);\n      index = times.length - 1;\n    } else {\n      for (let i = 0; i < track.times.length; i++) {\n        if (Math.abs(track.times[i] - time) < tolerance) return i;\n\n        if (track.times[i] < time && track.times[i + 1] > time) {\n          times.set(track.times.slice(0, i + 1), 0);\n          times[i + 1] = time;\n          times.set(track.times.slice(i + 1), i + 2);\n          values.set(track.values.slice(0, (i + 1) * valueSize), 0);\n          values.set(interpolant.evaluate(time), (i + 1) * valueSize);\n          values.set(track.values.slice((i + 1) * valueSize), (i + 2) * valueSize);\n          index = i + 1;\n          break;\n        }\n      }\n    }\n\n    track.times = times;\n    track.values = values;\n    return index;\n  },\n  mergeMorphTargetTracks: function (clip, root) {\n    const tracks = [];\n    const mergedTracks = {};\n    const sourceTracks = clip.tracks;\n\n    for (let i = 0; i < sourceTracks.length; ++i) {\n      let sourceTrack = sourceTracks[i];\n      const sourceTrackBinding = PropertyBinding.parseTrackName(sourceTrack.name);\n      const sourceTrackNode = PropertyBinding.findNode(root, sourceTrackBinding.nodeName);\n\n      if (sourceTrackBinding.propertyName !== 'morphTargetInfluences' || sourceTrackBinding.propertyIndex === undefined) {\n        // Tracks that don't affect morph targets, or that affect all morph targets together, can be left as-is.\n        tracks.push(sourceTrack);\n        continue;\n      }\n\n      if ( // @ts-expect-error\n      sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete && // @ts-expect-error\n      sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear) {\n        // @ts-expect-error\n        if (sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n          // This should never happen, because glTF morph target animations\n          // affect all targets already.\n          throw new Error('THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.');\n        }\n\n        console.warn('THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.');\n        sourceTrack = sourceTrack.clone();\n        sourceTrack.setInterpolation(InterpolateLinear);\n      }\n\n      const targetCount = sourceTrackNode.morphTargetInfluences.length;\n      const targetIndex = sourceTrackNode.morphTargetDictionary[sourceTrackBinding.propertyIndex];\n\n      if (targetIndex === undefined) {\n        throw new Error('THREE.GLTFExporter: Morph target name not found: ' + sourceTrackBinding.propertyIndex);\n      }\n\n      let mergedTrack; // If this is the first time we've seen this object, create a new\n      // track to store merged keyframe data for each morph target.\n\n      if (mergedTracks[sourceTrackNode.uuid] === undefined) {\n        mergedTrack = sourceTrack.clone(); // @ts-expect-error\n\n        const values = new mergedTrack.ValueBufferType(targetCount * mergedTrack.times.length);\n\n        for (let j = 0; j < mergedTrack.times.length; j++) {\n          values[j * targetCount + targetIndex] = mergedTrack.values[j];\n        } // We need to take into consideration the intended target node\n        // of our original un-merged morphTarget animation.\n\n\n        mergedTrack.name = (sourceTrackBinding.nodeName || '') + '.morphTargetInfluences';\n        mergedTrack.values = values;\n        mergedTracks[sourceTrackNode.uuid] = mergedTrack;\n        tracks.push(mergedTrack);\n        continue;\n      } // @ts-expect-error\n\n\n      const sourceInterpolant = sourceTrack.createInterpolant(new sourceTrack.ValueBufferType(1));\n      mergedTrack = mergedTracks[sourceTrackNode.uuid]; // For every existing keyframe of the merged track, write a (possibly\n      // interpolated) value from the source track.\n\n      for (let j = 0; j < mergedTrack.times.length; j++) {\n        mergedTrack.values[j * targetCount + targetIndex] = sourceInterpolant.evaluate(mergedTrack.times[j]);\n      } // For every existing keyframe of the source track, write a (possibly\n      // new) keyframe to the merged track. Values from the previous loop may\n      // be written again, but keyframes are de-duplicated.\n\n\n      for (let j = 0; j < sourceTrack.times.length; j++) {\n        const keyframeIndex = this.insertKeyframe(mergedTrack, sourceTrack.times[j]);\n        mergedTrack.values[keyframeIndex * targetCount + targetIndex] = sourceTrack.values[j];\n      }\n    }\n\n    clip.tracks = tracks;\n    return clip;\n  }\n});\n\nconst WEBGL_CONSTANTS = {\n  POINTS: 0x0000,\n  LINES: 0x0001,\n  LINE_LOOP: 0x0002,\n  LINE_STRIP: 0x0003,\n  TRIANGLES: 0x0004,\n  TRIANGLE_STRIP: 0x0005,\n  TRIANGLE_FAN: 0x0006,\n  UNSIGNED_BYTE: 0x1401,\n  UNSIGNED_SHORT: 0x1403,\n  FLOAT: 0x1406,\n  UNSIGNED_INT: 0x1405,\n  ARRAY_BUFFER: 0x8892,\n  ELEMENT_ARRAY_BUFFER: 0x8893,\n  NEAREST: 0x2600,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_NEAREST: 0x2700,\n  LINEAR_MIPMAP_NEAREST: 0x2701,\n  NEAREST_MIPMAP_LINEAR: 0x2702,\n  LINEAR_MIPMAP_LINEAR: 0x2703,\n  CLAMP_TO_EDGE: 33071,\n  MIRRORED_REPEAT: 33648,\n  REPEAT: 10497\n};\nconst THREE_TO_WEBGL = {};\nTHREE_TO_WEBGL[NearestFilter] = WEBGL_CONSTANTS.NEAREST;\nTHREE_TO_WEBGL[NearestMipmapNearestFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[NearestMipmapLinearFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[LinearFilter] = WEBGL_CONSTANTS.LINEAR;\nTHREE_TO_WEBGL[LinearMipmapNearestFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[LinearMipmapLinearFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[ClampToEdgeWrapping] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\nTHREE_TO_WEBGL[RepeatWrapping] = WEBGL_CONSTANTS.REPEAT;\nTHREE_TO_WEBGL[MirroredRepeatWrapping] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\nconst PATH_PROPERTIES = {\n  scale: 'scale',\n  position: 'translation',\n  quaternion: 'rotation',\n  morphTargetInfluences: 'weights'\n}; // GLB constants\n// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\n\nconst GLB_HEADER_BYTES = 12;\nconst GLB_HEADER_MAGIC = 0x46546c67;\nconst GLB_VERSION = 2;\nconst GLB_CHUNK_PREFIX_BYTES = 8;\nconst GLB_CHUNK_TYPE_JSON = 0x4e4f534a;\nconst GLB_CHUNK_TYPE_BIN = 0x004e4942;\n/**\n * Writer\n */\n\nclass GLTFWriter {\n  constructor() {\n    _defineProperty(this, \"plugins\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"pending\", void 0);\n\n    _defineProperty(this, \"buffers\", void 0);\n\n    _defineProperty(this, \"byteOffset\", void 0);\n\n    _defineProperty(this, \"nodeMap\", void 0);\n\n    _defineProperty(this, \"skins\", void 0);\n\n    _defineProperty(this, \"extensionsUsed\", void 0);\n\n    _defineProperty(this, \"uids\", void 0);\n\n    _defineProperty(this, \"uid\", void 0);\n\n    _defineProperty(this, \"json\", void 0);\n\n    _defineProperty(this, \"cache\", void 0);\n\n    _defineProperty(this, \"cachedCanvas\", void 0);\n\n    this.plugins = [];\n    this.options = {};\n    this.pending = [];\n    this.buffers = [];\n    this.byteOffset = 0;\n    this.nodeMap = new Map();\n    this.skins = [];\n    this.extensionsUsed = {};\n    this.uids = new Map();\n    this.uid = 0;\n    this.json = {\n      asset: {\n        version: '2.0',\n        generator: 'THREE.GLTFExporter'\n      }\n    };\n    this.cache = {\n      meshes: new Map(),\n      attributes: new Map(),\n      attributesNormalized: new Map(),\n      materials: new Map(),\n      textures: new Map(),\n      images: new Map()\n    };\n    this.cachedCanvas = null;\n  }\n\n  setPlugins(plugins) {\n    this.plugins = plugins;\n  }\n  /**\n   * Parse scenes and generate GLTF output\n   * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n   * @param  {Function} onDone  Callback on completed\n   * @param  {Object} options options\n   */\n\n\n  write(input, onDone, options) {\n    this.options = Object.assign({}, {\n      // default options\n      binary: false,\n      trs: false,\n      onlyVisible: true,\n      truncateDrawRange: true,\n      embedImages: true,\n      maxTextureSize: Infinity,\n      animations: [],\n      includeCustomExtensions: false\n    }, options);\n\n    if (this.options.animations !== undefined && this.options.animations.length > 0) {\n      // Only TRS properties, and not matrices, may be targeted by animation.\n      this.options.trs = true;\n    }\n\n    this.processInput(input);\n    const writer = this;\n    Promise.all(this.pending).then(() => {\n      const buffers = writer.buffers;\n      const json = writer.json;\n      const options = writer.options;\n      const extensionsUsed = writer.extensionsUsed; // Merge buffers.\n\n      const blob = new Blob(buffers, {\n        type: 'application/octet-stream'\n      }); // Declare extensions.\n\n      const extensionsUsedList = Object.keys(extensionsUsed);\n      if (extensionsUsedList.length > 0) json.extensionsUsed = extensionsUsedList; // Update bytelength of the single buffer.\n\n      if (json.buffers && json.buffers.length > 0) json.buffers[0].byteLength = blob.size;\n\n      if (options.binary) {\n        // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\n        const reader = new window.FileReader();\n        reader.readAsArrayBuffer(blob);\n\n        reader.onloadend = () => {\n          if (reader.result !== null && typeof reader.result !== 'string') {\n            // Binary chunk.\n            const binaryChunk = this.getPaddedArrayBuffer(reader.result);\n            const binaryChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n            binaryChunkPrefix.setUint32(0, binaryChunk.byteLength, true);\n            binaryChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_BIN, true); // JSON chunk.\n\n            const jsonChunk = this.getPaddedArrayBuffer(this.stringToArrayBuffer(JSON.stringify(json)), 0x20);\n            const jsonChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n            jsonChunkPrefix.setUint32(0, jsonChunk.byteLength, true);\n            jsonChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_JSON, true); // GLB header.\n\n            const header = new ArrayBuffer(GLB_HEADER_BYTES);\n            const headerView = new DataView(header);\n            headerView.setUint32(0, GLB_HEADER_MAGIC, true);\n            headerView.setUint32(4, GLB_VERSION, true);\n            const totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;\n            headerView.setUint32(8, totalByteLength, true);\n            const glbBlob = new Blob([header, jsonChunkPrefix, jsonChunk, binaryChunkPrefix, binaryChunk], {\n              type: 'application/octet-stream'\n            });\n            const glbReader = new window.FileReader();\n            glbReader.readAsArrayBuffer(glbBlob);\n\n            glbReader.onloadend = function () {\n              if (glbReader.result !== null && typeof glbReader.result !== 'string') {\n                onDone(glbReader.result);\n              }\n            };\n          }\n        };\n      } else {\n        if (json.buffers && json.buffers.length > 0) {\n          const reader = new window.FileReader();\n          reader.readAsDataURL(blob);\n\n          reader.onloadend = function () {\n            const base64data = reader.result;\n\n            if (json.buffers !== undefined && base64data !== null) {\n              json.buffers[0].uri = base64data;\n              onDone(json);\n            }\n          };\n        } else {\n          onDone(json);\n        }\n      }\n    });\n  }\n  /**\n   * Serializes a userData.\n   *\n   * @param {THREE.Object3D|THREE.Material} object\n   * @param {Object} objectDef\n   */\n\n\n  serializeUserData(object, objectDef) {\n    if (Object.keys(object.userData).length === 0) return;\n    const options = this.options;\n    const extensionsUsed = this.extensionsUsed;\n\n    try {\n      const json = JSON.parse(JSON.stringify(object.userData));\n\n      if (options.includeCustomExtensions && json.gltfExtensions) {\n        if (objectDef.extensions === undefined) objectDef.extensions = {};\n\n        for (const extensionName in json.gltfExtensions) {\n          objectDef.extensions[extensionName] = json.gltfExtensions[extensionName];\n          extensionsUsed[extensionName] = true;\n        }\n\n        delete json.gltfExtensions;\n      }\n\n      if (Object.keys(json).length > 0) objectDef.extras = json;\n    } catch (error) {\n      if (error instanceof Error) {\n        console.warn(\"THREE.GLTFExporter: userData of '\" + object.name + \"' \" + \"won't be serialized because of JSON.stringify error - \" + error.message);\n      }\n    }\n  }\n  /**\n   * Assign and return a temporal unique id for an object\n   * especially which doesn't have .uuid\n   * @param  {Object} object\n   * @return {Integer}\n   */\n\n\n  getUID(object) {\n    if (!this.uids.has(object)) this.uids.set(object, this.uid++);\n    return this.uids.get(object);\n  }\n  /**\n   * Checks if normal attribute values are normalized.\n   *\n   * @param {BufferAttribute} normal\n   * @returns {Boolean}\n   */\n\n\n  isNormalizedNormalAttribute(normal) {\n    const cache = this.cache;\n    if (cache.attributesNormalized.has(normal)) return false;\n    const v = new Vector3();\n\n    for (let i = 0, il = normal.count; i < il; i++) {\n      // 0.0005 is from glTF-validator\n      if (Math.abs(v.fromBufferAttribute(normal, i).length() - 1.0) > 0.0005) return false;\n    }\n\n    return true;\n  }\n  /**\n   * Creates normalized normal buffer attribute.\n   *\n   * @param {BufferAttribute} normal\n   * @returns {BufferAttribute}\n   *\n   */\n\n\n  createNormalizedNormalAttribute(normal) {\n    const cache = this.cache;\n    if (cache.attributesNormalized.has(normal)) return cache.attributesNormalized.get(normal);\n    const attribute = normal.clone();\n    const v = new Vector3();\n\n    for (let i = 0, il = attribute.count; i < il; i++) {\n      v.fromBufferAttribute(attribute, i);\n\n      if (v.x === 0 && v.y === 0 && v.z === 0) {\n        // if values can't be normalized set (1, 0, 0)\n        v.setX(1.0);\n      } else {\n        v.normalize();\n      }\n\n      attribute.setXYZ(i, v.x, v.y, v.z);\n    }\n\n    cache.attributesNormalized.set(normal, attribute);\n    return attribute;\n  }\n  /**\n   * Applies a texture transform, if present, to the map definition. Requires\n   * the KHR_texture_transform extension.\n   *\n   * @param {Object} mapDef\n   * @param {THREE.Texture} texture\n   */\n\n\n  applyTextureTransform(mapDef, texture) {\n    let didTransform = false;\n    const transformDef = {};\n\n    if (texture.offset.x !== 0 || texture.offset.y !== 0) {\n      transformDef.offset = texture.offset.toArray();\n      didTransform = true;\n    }\n\n    if (texture.rotation !== 0) {\n      transformDef.rotation = texture.rotation;\n      didTransform = true;\n    }\n\n    if (texture.repeat.x !== 1 || texture.repeat.y !== 1) {\n      transformDef.scale = texture.repeat.toArray();\n      didTransform = true;\n    }\n\n    if (didTransform) {\n      mapDef.extensions = mapDef.extensions || {};\n      mapDef.extensions['KHR_texture_transform'] = transformDef;\n      this.extensionsUsed['KHR_texture_transform'] = true;\n    }\n  }\n  /**\n   * Process a buffer to append to the default one.\n   * @param  {ArrayBuffer} buffer\n   * @return {Integer}\n   */\n\n\n  processBuffer(buffer) {\n    const json = this.json;\n    const buffers = this.buffers;\n    if (!json.buffers) json.buffers = [{\n      byteLength: 0\n    }]; // All buffers are merged before export.\n\n    buffers.push(buffer);\n    return 0;\n  }\n  /**\n   * Process and generate a BufferView\n   * @param  {BufferAttribute} attribute\n   * @param  {number} componentType\n   * @param  {number} start\n   * @param  {number} count\n   * @param  {number} target (Optional) Target usage of the BufferView\n   * @return {Object}\n   */\n\n\n  processBufferView(attribute, componentType, start, count, target) {\n    const json = this.json;\n    if (!json.bufferViews) json.bufferViews = []; // Create a new dataview and dump the attribute's array into it\n\n    let componentSize;\n\n    if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n      componentSize = 1;\n    } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n      componentSize = 2;\n    } else {\n      componentSize = 4;\n    }\n\n    const byteLength = this.getPaddedBufferSize(count * attribute.itemSize * componentSize);\n    const dataView = new DataView(new ArrayBuffer(byteLength));\n    let offset = 0;\n\n    for (let i = start; i < start + count; i++) {\n      for (let a = 0; a < attribute.itemSize; a++) {\n        let value;\n\n        if (attribute.itemSize > 4) {\n          // no support for interleaved data for itemSize > 4\n          value = attribute.array[i * attribute.itemSize + a];\n        } else {\n          if (a === 0) value = attribute.getX(i);else if (a === 1) value = attribute.getY(i);else if (a === 2) value = attribute.getZ(i);else if (a === 3) value = attribute.getW(i);\n        }\n\n        if (value !== undefined) {\n          if (componentType === WEBGL_CONSTANTS.FLOAT) {\n            dataView.setFloat32(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_INT) {\n            dataView.setUint32(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n            dataView.setUint16(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n            dataView.setUint8(offset, value);\n          }\n        }\n\n        offset += componentSize;\n      }\n    }\n\n    const bufferViewDef = {\n      buffer: this.processBuffer(dataView.buffer),\n      byteOffset: this.byteOffset,\n      byteLength: byteLength\n    };\n    if (target !== undefined) bufferViewDef.target = target;\n\n    if (target === WEBGL_CONSTANTS.ARRAY_BUFFER) {\n      // Only define byteStride for vertex attributes.\n      bufferViewDef.byteStride = attribute.itemSize * componentSize;\n    }\n\n    this.byteOffset += byteLength;\n    json.bufferViews.push(bufferViewDef); // @TODO Merge bufferViews where possible.\n\n    const output = {\n      id: json.bufferViews.length - 1,\n      byteLength: 0\n    };\n    return output;\n  }\n  /**\n   * Process and generate a BufferView from an image Blob.\n   * @param {Blob} blob\n   * @return {Promise<Integer>}\n   */\n\n\n  processBufferViewImage(blob) {\n    const writer = this;\n    const json = writer.json;\n    if (!json.bufferViews) json.bufferViews = [];\n    return new Promise(resolve => {\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(blob);\n\n      reader.onloadend = () => {\n        if (reader.result !== null && typeof reader.result !== 'string' && json.bufferViews !== undefined) {\n          const buffer = this.getPaddedArrayBuffer(reader.result);\n          const bufferViewDef = {\n            buffer: writer.processBuffer(buffer),\n            byteOffset: writer.byteOffset,\n            byteLength: buffer.byteLength\n          };\n          writer.byteOffset += buffer.byteLength;\n          resolve(json.bufferViews.push(bufferViewDef) - 1);\n        }\n      };\n    });\n  }\n  /**\n   * Process attribute to generate an accessor\n   * @param  {BufferAttribute} attribute Attribute to process\n   * @param  {THREE.BufferGeometry} geometry (Optional) Geometry used for truncated draw range\n   * @param  {Integer} start (Optional)\n   * @param  {Integer} count (Optional)\n   * @return {Integer|null} Index of the processed accessor on the \"accessors\" array\n   */\n\n\n  processAccessor(attribute, geometry, start, count) {\n    const options = this.options;\n    const json = this.json;\n    const types = {\n      1: 'SCALAR',\n      2: 'VEC2',\n      3: 'VEC3',\n      4: 'VEC4',\n      16: 'MAT4'\n    };\n    let componentType; // Detect the component type of the attribute array (float, uint or ushort)\n\n    if (attribute.array.constructor === Float32Array) {\n      componentType = WEBGL_CONSTANTS.FLOAT;\n    } else if (attribute.array.constructor === Uint32Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_INT;\n    } else if (attribute.array.constructor === Uint16Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\n    } else if (attribute.array.constructor === Uint8Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\n    } else {\n      throw new Error('THREE.GLTFExporter: Unsupported bufferAttribute component type.');\n    }\n\n    if (start === undefined) start = 0;\n    if (count === undefined) count = attribute.count; // @TODO Indexed buffer geometry with drawRange not supported yet\n\n    if (options.truncateDrawRange && geometry !== undefined && geometry.index === null) {\n      const end = start + count;\n      const end2 = geometry.drawRange.count === Infinity ? attribute.count : geometry.drawRange.start + geometry.drawRange.count;\n      start = Math.max(start, geometry.drawRange.start);\n      count = Math.min(end, end2) - start;\n      if (count < 0) count = 0;\n    } // Skip creating an accessor if the attribute doesn't have data to export\n\n\n    if (count === 0) return null;\n    const minMax = this.getMinMax(attribute, start, count);\n    let bufferViewTarget; // If geometry isn't provided, don't infer the target usage of the bufferView. For\n    // animation samplers, target must not be set.\n\n    if (geometry !== undefined) {\n      bufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\n    }\n\n    if (bufferViewTarget !== undefined) {\n      const bufferView = this.processBufferView(attribute, componentType, start, count, bufferViewTarget);\n      const accessorDef = {\n        bufferView: bufferView.id,\n        byteOffset: bufferView.byteOffset,\n        componentType: componentType,\n        count: count,\n        max: minMax.max,\n        min: minMax.min,\n        type: types[attribute.itemSize]\n      };\n      if (attribute.normalized) accessorDef.normalized = true;\n      if (!json.accessors) json.accessors = [];\n      return json.accessors.push(accessorDef) - 1;\n    }\n  }\n  /**\n   * Process image\n   * @param  {Image} image to process\n   * @param  {Integer} format of the image (RGBAFormat)\n   * @param  {Boolean} flipY before writing out the image\n   * @return {Integer}     Index of the processed texture in the \"images\" array\n   */\n\n\n  processImage(image, format, flipY) {\n    const writer = this;\n    const cache = writer.cache;\n    const json = writer.json;\n    const options = writer.options;\n    const pending = writer.pending;\n    if (!cache.images.has(image)) cache.images.set(image, {});\n    const cachedImages = cache.images.get(image);\n    const mimeType = format === RGBAFormat ? 'image/png' : 'image/jpeg';\n    const key = mimeType + ':flipY/' + flipY.toString();\n    if (cachedImages !== undefined && cachedImages[key] !== undefined) return cachedImages[key];\n    if (!json.images) json.images = [];\n    const imageDef = {\n      mimeType: mimeType\n    };\n\n    if (options.embedImages && options.maxTextureSize !== undefined) {\n      const canvas = this.cachedCanvas = this.cachedCanvas || document.createElement('canvas');\n      canvas.width = Math.min(image.width, options.maxTextureSize);\n      canvas.height = Math.min(image.height, options.maxTextureSize);\n      const ctx = canvas.getContext('2d');\n\n      if (flipY) {\n        ctx === null || ctx === void 0 ? void 0 : ctx.translate(0, canvas.height);\n        ctx === null || ctx === void 0 ? void 0 : ctx.scale(1, -1);\n      }\n\n      if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n        ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n      } else {\n        if (format !== RGBAFormat) {\n          console.error('GLTFExporter: Only RGBA format is supported.');\n        }\n\n        if (image.width > options.maxTextureSize || image.height > options.maxTextureSize) {\n          console.warn('GLTFExporter: Image size is bigger than maxTextureSize', image);\n        }\n\n        const data = new Uint8ClampedArray(image.height * image.width * 4);\n\n        if (image instanceof ImageData) {\n          for (let i = 0; i < data.length; i += 4) {\n            data[i + 0] = image.data[i + 0];\n            data[i + 1] = image.data[i + 1];\n            data[i + 2] = image.data[i + 2];\n            data[i + 3] = image.data[i + 3];\n          }\n        }\n\n        ctx === null || ctx === void 0 ? void 0 : ctx.putImageData(new ImageData(data, image.width, image.height), 0, 0);\n      }\n\n      if (options.binary) {\n        pending.push(new Promise(function (resolve) {\n          canvas.toBlob(function (blob) {\n            if (blob !== null) {\n              writer.processBufferViewImage(blob).then(function (bufferViewIndex) {\n                imageDef.bufferView = bufferViewIndex; // @ts-expect-error\n\n                resolve();\n              });\n            }\n          }, mimeType);\n        }));\n      } else {\n        imageDef.uri = canvas.toDataURL(mimeType);\n      }\n    } else if (image instanceof Image) {\n      imageDef.uri = image.src;\n    }\n\n    const index = json.images.push(imageDef) - 1;\n    if (cachedImages !== undefined) cachedImages[key] = index;\n    return index;\n  }\n  /**\n   * Process sampler\n   * @param  {Texture} map Texture to process\n   * @return {Integer}     Index of the processed texture in the \"samplers\" array\n   */\n\n\n  processSampler(map) {\n    const json = this.json;\n    if (!json.samplers) json.samplers = [];\n    const samplerDef = {\n      magFilter: THREE_TO_WEBGL[map.magFilter],\n      minFilter: THREE_TO_WEBGL[map.minFilter],\n      wrapS: THREE_TO_WEBGL[map.wrapS],\n      wrapT: THREE_TO_WEBGL[map.wrapT]\n    };\n    return json.samplers.push(samplerDef) - 1;\n  }\n  /**\n   * Process texture\n   * @param  {Texture} map Map to process\n   * @return {Integer} Index of the processed texture in the \"textures\" array\n   */\n\n\n  processTexture(map) {\n    const cache = this.cache;\n    const json = this.json;\n    if (cache.textures.has(map)) return cache.textures.get(map);\n    if (!json.textures) json.textures = [];\n    const textureDef = {\n      sampler: this.processSampler(map),\n      source: this.processImage(map.image, map.format, map.flipY)\n    };\n    if (map.name) textureDef.name = map.name;\n\n    this._invokeAll(function (ext) {\n      ext.writeTexture && ext.writeTexture(map, textureDef);\n    });\n\n    const index = json.textures.push(textureDef) - 1;\n    cache.textures.set(map, index);\n    return index;\n  }\n  /**\n   * Process material\n   * @param  {THREE.Material} material Material to process\n   * @return {Integer|null} Index of the processed material in the \"materials\" array\n   */\n\n\n  processMaterial(material) {\n    const cache = this.cache;\n    const json = this.json;\n    if (cache.materials.has(material)) return cache.materials.get(material);\n\n    if (material instanceof ShaderMaterial && material.isShaderMaterial) {\n      console.warn('GLTFExporter: THREE.ShaderMaterial not supported.');\n      return null;\n    }\n\n    if (!json.materials) json.materials = []; // @QUESTION Should we avoid including any attribute that has the default value?\n\n    const materialDef = {\n      pbrMetallicRoughness: {}\n    };\n\n    if (!(material instanceof MeshStandardMaterial && material.isMeshStandardMaterial && material instanceof MeshBasicMaterial && // @ts-expect-error\n    material.isMeshBasicMaterial)) {\n      console.warn('GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.');\n    }\n\n    if (material instanceof MeshStandardMaterial || material instanceof MeshPhysicalMaterial) {\n      // pbrMetallicRoughness.baseColorFactor\n      const color = material.color.toArray().concat([material.opacity]);\n\n      if (!this.equalArray(color, [1, 1, 1, 1])) {\n        materialDef.pbrMetallicRoughness.baseColorFactor = color;\n      }\n    }\n\n    if (material instanceof MeshStandardMaterial && material.isMeshStandardMaterial) {\n      materialDef.pbrMetallicRoughness.metallicFactor = material.metalness;\n      materialDef.pbrMetallicRoughness.roughnessFactor = material.roughness;\n    } else {\n      materialDef.pbrMetallicRoughness.metallicFactor = 0.5;\n      materialDef.pbrMetallicRoughness.roughnessFactor = 0.5;\n    } // pbrMetallicRoughness.metallicRoughnessTexture\n\n\n    if (material instanceof MeshStandardMaterial && material.metalnessMap || material instanceof MeshStandardMaterial && material.roughnessMap) {\n      if (material.metalnessMap === material.roughnessMap && material.metalnessMap !== null) {\n        const metalRoughMapDef = {\n          index: this.processTexture(material.metalnessMap)\n        };\n        this.applyTextureTransform(metalRoughMapDef, material.metalnessMap);\n        materialDef.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\n      } else {\n        console.warn('THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.');\n      }\n    } // pbrMetallicRoughness.baseColorTexture or pbrSpecularGlossiness diffuseTexture\n\n\n    if ((material instanceof MeshStandardMaterial || material instanceof MeshPhysicalMaterial) && material.map) {\n      const baseColorMapDef = {\n        index: this.processTexture(material.map)\n      };\n      this.applyTextureTransform(baseColorMapDef, material.map);\n      materialDef.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\n    }\n\n    if ((material instanceof MeshStandardMaterial || material instanceof MeshPhysicalMaterial) && material.emissive) {\n      // note: emissive components are limited to stay within the 0 - 1 range to accommodate glTF spec. see #21849 and #22000.\n      const emissive = material.emissive.clone().multiplyScalar(material.emissiveIntensity);\n      const maxEmissiveComponent = Math.max(emissive.r, emissive.g, emissive.b);\n\n      if (maxEmissiveComponent > 1) {\n        emissive.multiplyScalar(1 / maxEmissiveComponent);\n        console.warn('THREE.GLTFExporter: Some emissive components exceed 1; emissive has been limited');\n      }\n\n      if (maxEmissiveComponent > 0) {\n        materialDef.emissiveFactor = emissive.toArray();\n      } // emissiveTexture\n\n\n      if (material.emissiveMap) {\n        const emissiveMapDef = {\n          index: this.processTexture(material.emissiveMap)\n        };\n        this.applyTextureTransform(emissiveMapDef, material.emissiveMap);\n        materialDef.emissiveTexture = emissiveMapDef;\n      }\n    } // normalTexture\n\n\n    if ((material instanceof MeshMatcapMaterial || material instanceof MeshNormalMaterial || material instanceof MeshPhongMaterial || material instanceof MeshStandardMaterial || material instanceof MeshToonMaterial) && material.normalMap) {\n      const normalMapDef = {\n        index: this.processTexture(material.normalMap)\n      };\n\n      if (material.normalScale && material.normalScale.x !== 1) {\n        // glTF normal scale is univariate. Ignore `y`, which may be flipped.\n        // Context: https://github.com/mrdoob/three.js/issues/11438#issuecomment-507003995\n        normalMapDef.scale = material.normalScale.x;\n      }\n\n      this.applyTextureTransform(normalMapDef, material.normalMap);\n      materialDef.normalTexture = normalMapDef;\n    } // occlusionTexture\n\n\n    if ((material instanceof MeshBasicMaterial || material instanceof MeshLambertMaterial || material instanceof MeshPhongMaterial || material instanceof MeshStandardMaterial || material instanceof MeshToonMaterial) && material.aoMap) {\n      const occlusionMapDef = {\n        index: this.processTexture(material.aoMap),\n        texCoord: 1\n      };\n\n      if (material.aoMapIntensity !== 1.0) {\n        occlusionMapDef.strength = material.aoMapIntensity;\n      }\n\n      this.applyTextureTransform(occlusionMapDef, material.aoMap);\n      materialDef.occlusionTexture = occlusionMapDef;\n    } // alphaMode\n\n\n    if (material.transparent) {\n      materialDef.alphaMode = 'BLEND';\n    } else {\n      if (material.alphaTest > 0.0) {\n        materialDef.alphaMode = 'MASK';\n        materialDef.alphaCutoff = material.alphaTest;\n      }\n    } // doubleSided\n\n\n    if (material.side === DoubleSide) materialDef.doubleSided = true;\n    if (material.name !== '') materialDef.name = material.name;\n    this.serializeUserData(material, materialDef);\n\n    this._invokeAll(function (ext) {\n      ext.writeMaterial && ext.writeMaterial(material, materialDef);\n    });\n\n    const index = json.materials.push(materialDef) - 1;\n    cache.materials.set(material, index);\n    return index;\n  }\n  /**\n   * Process mesh\n   * @param  {THREE.Mesh} mesh Mesh to process\n   * @return {Integer|null} Index of the processed mesh in the \"meshes\" array\n   */\n\n\n  processMesh(mesh) {\n    const cache = this.cache;\n    const json = this.json;\n    const meshCacheKeyParts = [mesh.geometry.uuid];\n\n    if (Array.isArray(mesh.material)) {\n      for (let i = 0, l = mesh.material.length; i < l; i++) {\n        meshCacheKeyParts.push(mesh.material[i].uuid);\n      }\n    } else {\n      meshCacheKeyParts.push(mesh.material.uuid);\n    }\n\n    const meshCacheKey = meshCacheKeyParts.join(':');\n    if (cache.meshes.has(meshCacheKey)) return cache.meshes.get(meshCacheKey);\n    const geometry = mesh.geometry;\n    let mode; // Use the correct mode\n\n    if (mesh instanceof LineSegments && mesh.isLineSegments) {\n      mode = WEBGL_CONSTANTS.LINES;\n    } else if (mesh instanceof LineLoop && mesh.isLineLoop) {\n      mode = WEBGL_CONSTANTS.LINE_LOOP;\n    } else if (mesh instanceof Line && mesh.isLine) {\n      mode = WEBGL_CONSTANTS.LINE_STRIP;\n    } else if (mesh instanceof Points && mesh.isPoints) {\n      mode = WEBGL_CONSTANTS.POINTS;\n    } else {\n      mode = (mesh.material instanceof MeshBasicMaterial || mesh.material instanceof MeshDepthMaterial || mesh.material instanceof MeshLambertMaterial || mesh.material instanceof MeshNormalMaterial || mesh.material instanceof MeshPhongMaterial || mesh.material instanceof MeshStandardMaterial || mesh.material instanceof MeshToonMaterial || mesh.material instanceof ShaderMaterial) && mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\n    }\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.GLTFExporter: Geometry is not of type THREE.BufferGeometry.');\n    }\n\n    const meshDef = {};\n    const attributes = {};\n    const primitives = [];\n    const targets = []; // Conversion between attributes names in threejs and gltf spec\n\n    const nameConversion = {\n      uv: 'TEXCOORD_0',\n      uv2: 'TEXCOORD_1',\n      color: 'COLOR_0',\n      skinWeight: 'WEIGHTS_0',\n      skinIndex: 'JOINTS_0'\n    };\n    const originalNormal = geometry.getAttribute('normal');\n\n    if (originalNormal !== undefined && !(originalNormal instanceof InterleavedBufferAttribute) && !this.isNormalizedNormalAttribute(originalNormal)) {\n      console.warn('THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.');\n      geometry.setAttribute('normal', this.createNormalizedNormalAttribute(originalNormal));\n    } // @QUESTION Detect if .vertexColors = true?\n    // For every attribute create an accessor\n\n\n    let modifiedAttribute = null;\n\n    for (let attributeName in geometry.attributes) {\n      // Ignore morph target attributes, which are exported later.\n      if (attributeName.substr(0, 5) === 'morph') continue;\n      const attribute = geometry.attributes[attributeName];\n      attributeName = nameConversion[attributeName] || attributeName.toUpperCase(); // Prefix all geometry attributes except the ones specifically\n      // listed in the spec; non-spec attributes are considered custom.\n\n      const validVertexAttributes = /^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\n      if (!validVertexAttributes.test(attributeName)) attributeName = '_' + attributeName;\n\n      if (cache.attributes.has(this.getUID(attribute))) {\n        attributes[attributeName] = cache.attributes.get(this.getUID(attribute));\n        continue;\n      } // JOINTS_0 must be UNSIGNED_BYTE or UNSIGNED_SHORT.\n\n\n      modifiedAttribute = null;\n      const array = attribute.array;\n\n      if (attributeName === 'JOINTS_0' && !(array instanceof Uint16Array) && !(array instanceof Uint8Array)) {\n        console.warn('GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.');\n        modifiedAttribute = new BufferAttribute(new Uint16Array(array), attribute.itemSize, attribute.normalized);\n      }\n\n      const accessor = modifiedAttribute !== null && this.processAccessor(modifiedAttribute || attribute, geometry);\n\n      if (accessor) {\n        attributes[attributeName] = accessor;\n        cache.attributes.set(this.getUID(attribute), accessor);\n      }\n    }\n\n    if (originalNormal !== undefined) geometry.setAttribute('normal', originalNormal); // Skip if no exportable attributes found\n\n    if (Object.keys(attributes).length === 0) return null; // Morph targets\n\n    if (mesh.morphTargetInfluences !== undefined && mesh.morphTargetInfluences.length > 0) {\n      const weights = [];\n      const targetNames = [];\n      const reverseDictionary = {};\n\n      if (mesh.morphTargetDictionary !== undefined) {\n        for (const key in mesh.morphTargetDictionary) {\n          reverseDictionary[mesh.morphTargetDictionary[key]] = key;\n        }\n      }\n\n      for (let i = 0; i < mesh.morphTargetInfluences.length; ++i) {\n        const target = {};\n        let warned = false;\n\n        for (const attributeName in geometry.morphAttributes) {\n          // glTF 2.0 morph supports only POSITION/NORMAL/TANGENT.\n          // Three.js doesn't support TANGENT yet.\n          if (attributeName !== 'position' && attributeName !== 'normal') {\n            if (!warned) {\n              console.warn('GLTFExporter: Only POSITION and NORMAL morph are supported.');\n              warned = true;\n            }\n\n            continue;\n          }\n\n          const attribute = geometry.morphAttributes[attributeName][i];\n          const gltfAttributeName = attributeName.toUpperCase(); // Three.js morph attribute has absolute values while the one of glTF has relative values.\n          //\n          // glTF 2.0 Specification:\n          // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#morph-targets\n\n          const baseAttribute = geometry.attributes[attributeName];\n\n          if (cache.attributes.has(this.getUID(attribute))) {\n            target[gltfAttributeName] = cache.attributes.get(this.getUID(attribute));\n            continue;\n          } // Clones attribute not to override\n\n\n          const relativeAttribute = attribute.clone();\n\n          if (!geometry.morphTargetsRelative) {\n            for (let j = 0, jl = attribute.count; j < jl; j++) {\n              relativeAttribute.setXYZ(j, attribute.getX(j) - baseAttribute.getX(j), attribute.getY(j) - baseAttribute.getY(j), attribute.getZ(j) - baseAttribute.getZ(j));\n            }\n          }\n\n          const accessor = this.processAccessor(relativeAttribute, geometry);\n\n          if (accessor != undefined) {\n            target[gltfAttributeName] = accessor;\n          }\n\n          cache.attributes.set(this.getUID(baseAttribute), target[gltfAttributeName]);\n        }\n\n        targets.push(target);\n        weights.push(mesh.morphTargetInfluences[i]);\n        if (mesh.morphTargetDictionary !== undefined) targetNames.push(reverseDictionary[i]);\n      }\n\n      meshDef.weights = weights;\n\n      if (targetNames.length > 0) {\n        meshDef.extras = {};\n        meshDef.extras.targetNames = targetNames;\n      }\n    }\n\n    const isMultiMaterial = Array.isArray(mesh.material);\n    if (isMultiMaterial && geometry.groups.length === 0) return null;\n    const materials = isMultiMaterial ? mesh.material : [mesh.material];\n    const groups = isMultiMaterial ? geometry.groups : [{\n      materialIndex: 0,\n      start: undefined,\n      count: undefined\n    }];\n\n    for (let i = 0, il = groups.length; i < il; i++) {\n      const primitive = {\n        mode: mode,\n        attributes: attributes\n      };\n\n      if (geometry instanceof Object3D || geometry instanceof Material) {\n        this.serializeUserData(geometry, primitive);\n      }\n\n      if (targets.length > 0) primitive.targets = targets;\n\n      if (geometry.index !== null) {\n        let cacheKey = this.getUID(geometry.index);\n\n        if (groups[i].start !== undefined || groups[i].count !== undefined) {\n          // @ts-expect-error\n          cacheKey += `:${groups[i].start}:${groups[i].count}`;\n        }\n\n        if (cache.attributes.has(cacheKey)) {\n          primitive.indices = cache.attributes.get(cacheKey);\n        } else {\n          primitive.indices = this.processAccessor(geometry.index, geometry, groups[i].start, groups[i].count);\n          cache.attributes.set(cacheKey, primitive.indices);\n        }\n\n        if (primitive.indices === null) delete primitive.indices;\n      }\n\n      const materialIndex = groups[i].materialIndex;\n\n      if (materialIndex !== undefined && Array.isArray(materials)) {\n        const targetMaterials = materials[materialIndex];\n\n        if (!Array.isArray(targetMaterials)) {\n          const material = this.processMaterial(targetMaterials);\n          if (material !== null) primitive.material = material;\n          primitives.push(primitive);\n        }\n      }\n    }\n\n    meshDef.primitives = primitives;\n    if (!json.meshes) json.meshes = [];\n\n    this._invokeAll(function (ext) {\n      ext.writeMesh && ext.writeMesh(mesh, meshDef);\n    });\n\n    const index = json.meshes.push(meshDef) - 1;\n    cache.meshes.set(meshCacheKey, index);\n    return index;\n  }\n  /**\n   * Process camera\n   * @param  {THREE.Camera} camera Camera to process\n   * @return {Integer}      Index of the processed mesh in the \"camera\" array\n   */\n\n\n  processCamera(camera) {\n    const json = this.json;\n    if (!json.cameras) json.cameras = [];\n    const isOrtho = camera instanceof OrthographicCamera && camera.isOrthographicCamera;\n    const cameraDef = {\n      type: isOrtho ? 'orthographic' : 'perspective'\n    };\n\n    if (camera instanceof OrthographicCamera && isOrtho) {\n      cameraDef.orthographic = {\n        xmag: camera.right * 2,\n        ymag: camera.top * 2,\n        zfar: camera.far <= 0 ? 0.001 : camera.far,\n        znear: camera.near < 0 ? 0 : camera.near\n      };\n    } else if (camera instanceof PerspectiveCamera) {\n      cameraDef.perspective = {\n        aspectRatio: camera.aspect,\n        yfov: MathUtils.degToRad(camera.fov),\n        zfar: camera.far <= 0 ? 0.001 : camera.far,\n        znear: camera.near < 0 ? 0 : camera.near\n      };\n    } // Question: Is saving \"type\" as name intentional?\n\n\n    if (camera.name !== '') cameraDef.name = camera.type;\n    return json.cameras.push(cameraDef) - 1;\n  }\n  /**\n   * Creates glTF animation entry from AnimationClip object.\n   *\n   * Status:\n   * - Only properties listed in PATH_PROPERTIES may be animated.\n   *\n   * @param {THREE.AnimationClip} clip\n   * @param {THREE.Object3D} root\n   * @return {number|null}\n   */\n\n\n  processAnimation(clip, root) {\n    const json = this.json;\n    const nodeMap = this.nodeMap;\n    if (!json.animations) json.animations = [];\n    clip = GLTFExporter.Utils.mergeMorphTargetTracks(clip.clone(), root);\n    const tracks = clip.tracks;\n    const channels = [];\n    const samplers = [];\n\n    for (let i = 0; i < tracks.length; ++i) {\n      const track = tracks[i];\n      const trackBinding = PropertyBinding.parseTrackName(track.name);\n      let trackNode = PropertyBinding.findNode(root, trackBinding.nodeName);\n      const trackProperty = PATH_PROPERTIES[trackBinding.propertyName];\n\n      if (trackBinding.objectName === 'bones') {\n        if (trackNode.isSkinnedMesh) {\n          trackNode = trackNode.skeleton.getBoneByName(trackBinding.objectIndex);\n        } else {\n          trackNode = undefined;\n        }\n      }\n\n      if (!trackNode || !trackProperty) {\n        console.warn('THREE.GLTFExporter: Could not export animation track \"%s\".', track.name);\n        return null;\n      }\n\n      const inputItemSize = 1;\n      let outputItemSize = track.values.length / track.times.length;\n\n      if (trackProperty === PATH_PROPERTIES.morphTargetInfluences) {\n        outputItemSize /= trackNode.morphTargetInfluences.length;\n      }\n\n      let interpolation; // @TODO export CubicInterpolant(InterpolateSmooth) as CUBICSPLINE\n      // Detecting glTF cubic spline interpolant by checking factory method's special property\n      // GLTFCubicSplineInterpolant is a custom interpolant and track doesn't return\n      // valid value from .getInterpolation().\n      // @ts-expect-error\n\n      if (track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n        interpolation = 'CUBICSPLINE'; // itemSize of CUBICSPLINE keyframe is 9\n        // (VEC3 * 3: inTangent, splineVertex, and outTangent)\n        // but needs to be stored as VEC3 so dividing by 3 here.\n\n        outputItemSize /= 3;\n      } else if (track.getInterpolation() === InterpolateDiscrete) {\n        interpolation = 'STEP';\n      } else {\n        interpolation = 'LINEAR';\n      }\n\n      samplers.push({\n        input: this.processAccessor(new BufferAttribute(track.times, inputItemSize)),\n        output: this.processAccessor(new BufferAttribute(track.values, outputItemSize)),\n        interpolation: interpolation\n      });\n      channels.push({\n        sampler: samplers.length - 1,\n        target: {\n          node: nodeMap.get(trackNode),\n          path: trackProperty\n        }\n      });\n    }\n\n    json.animations.push({\n      name: clip.name || 'clip_' + json.animations.length,\n      samplers: samplers,\n      channels: channels\n    });\n    return json.animations.length - 1;\n  }\n  /**\n   * @param {THREE.Object3D} object\n   * @return {number|null}\n   */\n\n\n  processSkin(object) {\n    const json = this.json;\n    const nodeMap = this.nodeMap;\n\n    if (json.nodes !== undefined && object instanceof SkinnedMesh) {\n      const node = json.nodes[nodeMap.get(object)];\n      const skeleton = object.skeleton;\n      if (skeleton === undefined) return null;\n      const rootJoint = object.skeleton.bones[0];\n      if (rootJoint === undefined) return null;\n      const joints = [];\n      const inverseBindMatrices = new Float32Array(skeleton.bones.length * 16);\n      const temporaryBoneInverse = new Matrix4();\n\n      for (let i = 0; i < skeleton.bones.length; ++i) {\n        joints.push(nodeMap.get(skeleton.bones[i]));\n        temporaryBoneInverse.copy(skeleton.boneInverses[i]);\n        temporaryBoneInverse.multiply(object.bindMatrix).toArray(inverseBindMatrices, i * 16);\n      }\n\n      if (json.skins === undefined) json.skins = [];\n      json.skins.push({\n        inverseBindMatrices: this.processAccessor(new BufferAttribute(inverseBindMatrices, 16)),\n        joints: joints,\n        skeleton: nodeMap.get(rootJoint)\n      });\n      const skinIndex = node.skin = json.skins.length - 1;\n      return skinIndex;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Process Object3D node\n   * @param  {THREE.Object3D} node Object3D to processNode\n   * @return {Integer} Index of the node in the nodes list\n   */\n\n\n  processNode(object) {\n    const json = this.json;\n    const options = this.options;\n    const nodeMap = this.nodeMap;\n    if (!json.nodes) json.nodes = [];\n    const nodeDef = {};\n\n    if (options.trs) {\n      const rotation = object.quaternion.toArray();\n      const position = object.position.toArray();\n      const scale = object.scale.toArray();\n\n      if (!this.equalArray(rotation, [0, 0, 0, 1])) {\n        nodeDef.rotation = rotation;\n      }\n\n      if (!this.equalArray(position, [0, 0, 0])) {\n        nodeDef.translation = position;\n      }\n\n      if (!this.equalArray(scale, [1, 1, 1])) {\n        nodeDef.scale = scale;\n      }\n    } else {\n      if (object.matrixAutoUpdate) {\n        object.updateMatrix();\n      }\n\n      if (!this.isIdentityMatrix(object.matrix)) {\n        nodeDef.matrix = object.matrix.elements;\n      }\n    } // We don't export empty strings name because it represents no-name in Three.js.\n\n\n    if (object.name !== '') nodeDef.name = String(object.name);\n    this.serializeUserData(object, nodeDef);\n\n    if ((object instanceof Mesh && object.isMesh || object instanceof Line && object.isLine || object instanceof Points && object.isPoints) && object instanceof Mesh) {\n      const meshIndex = this.processMesh(object);\n      if (meshIndex !== null) nodeDef.mesh = meshIndex;\n    } else if (object instanceof Camera && object.isCamera) {\n      nodeDef.camera = this.processCamera(object);\n    }\n\n    if (object instanceof SkinnedMesh && object.isSkinnedMesh) this.skins.push(object);\n\n    if (object.children.length > 0) {\n      const children = [];\n\n      for (let i = 0, l = object.children.length; i < l; i++) {\n        const child = object.children[i];\n\n        if (child.visible || !options.onlyVisible) {\n          const nodeIndex = this.processNode(child);\n          if (nodeIndex !== null) children.push(nodeIndex);\n        }\n      }\n\n      if (children.length > 0) nodeDef.children = children;\n    }\n\n    this._invokeAll(function (ext) {\n      ext.writeNode && ext.writeNode(object, nodeDef);\n    });\n\n    const nodeIndex = json.nodes.push(nodeDef) - 1;\n    nodeMap.set(object, nodeIndex);\n    return nodeIndex;\n  }\n  /**\n   * Process Scene\n   * @param  {Scene} node Scene to process\n   */\n\n\n  processScene(scene) {\n    const json = this.json;\n    const options = this.options;\n\n    if (!json.scenes) {\n      json.scenes = [];\n      json.scene = 0;\n    }\n\n    const sceneDef = {};\n    if (scene.name !== '') sceneDef.name = scene.name;\n    json.scenes.push(sceneDef);\n    const nodes = [];\n\n    for (let i = 0, l = scene.children.length; i < l; i++) {\n      const child = scene.children[i];\n\n      if (child.visible || !options.onlyVisible) {\n        const nodeIndex = this.processNode(child);\n        if (nodeIndex !== null) nodes.push(nodeIndex);\n      }\n    }\n\n    if (nodes.length > 0) sceneDef.nodes = nodes;\n    this.serializeUserData(scene, sceneDef);\n  }\n\n  processObjects(objects) {\n    const scene = new Scene();\n    scene.name = 'AuxScene';\n\n    for (let i = 0; i < objects.length; i++) {\n      // We push directly to children instead of calling `add` to prevent\n      // modify the .parent and break its original scene and hierarchy\n      scene.children.push(objects[i]);\n    }\n\n    this.processScene(scene);\n  }\n  /**\n   * @param {THREE.Object3D|Array<THREE.Object3D>} input\n   */\n\n\n  processInput(input) {\n    const options = this.options;\n    input = input instanceof Array ? input : [input];\n\n    this._invokeAll(function (ext) {\n      ext.beforeParse && ext.beforeParse(input);\n    });\n\n    const objectsWithoutScene = [];\n\n    for (let i = 0; i < input.length; i++) {\n      const inputScene = input[i];\n\n      if (inputScene instanceof Scene) {\n        this.processScene(inputScene);\n      } else {\n        objectsWithoutScene.push(input[i]);\n      }\n    }\n\n    if (objectsWithoutScene.length > 0) this.processObjects(objectsWithoutScene);\n\n    for (let i = 0; i < this.skins.length; ++i) {\n      this.processSkin(this.skins[i]);\n    }\n\n    for (let i = 0; options.animations !== undefined && i < options.animations.length; ++i) {\n      this.processAnimation(options.animations[i], input[0]);\n    }\n\n    this._invokeAll(function (ext) {\n      ext.afterParse && ext.afterParse(input);\n    });\n  }\n\n  _invokeAll(func) {\n    for (let i = 0, il = this.plugins.length; i < il; i++) {\n      func(this.plugins[i]);\n    }\n  } //------------------------------------------------------------------------------\n  // Utility functions\n  //------------------------------------------------------------------------------\n\n  /**\n   * Compare two arrays\n   * @param  {Array} array1 Array 1 to compare\n   * @param  {Array} array2 Array 2 to compare\n   * @return {Boolean}        Returns true if both arrays are equal\n   */\n\n\n  equalArray(array1, array2) {\n    return array1.length === array2.length && array1.every(function (element, index) {\n      return element === array2[index];\n    });\n  }\n  /**\n   * Converts a string to an ArrayBuffer.\n   * @param  {string} text\n   * @return {ArrayBuffer}\n   */\n\n\n  stringToArrayBuffer(text) {\n    if (window.TextEncoder !== undefined) {\n      return new TextEncoder().encode(text).buffer;\n    }\n\n    const array = new Uint8Array(new ArrayBuffer(text.length));\n\n    for (let i = 0, il = text.length; i < il; i++) {\n      const value = text.charCodeAt(i); // Replacing multi-byte character with space(0x20).\n\n      array[i] = value > 0xff ? 0x20 : value;\n    }\n\n    return array.buffer;\n  }\n\n  isIdentityMatrix(matrix) {\n    return this.equalArray(matrix.elements, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n  }\n\n  getMinMax(attribute, start, count) {\n    const output = {\n      min: new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),\n      max: new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)\n    };\n\n    for (let i = start; i < start + count; i++) {\n      for (let a = 0; a < attribute.itemSize; a++) {\n        let value;\n\n        if (attribute.itemSize > 4) {\n          // no support for interleaved data for itemSize > 4\n          value = attribute.array[i * attribute.itemSize + a];\n        } else {\n          if (a === 0) value = attribute.getX(i);else if (a === 1) value = attribute.getY(i);else if (a === 2) value = attribute.getZ(i);else if (a === 3) value = attribute.getW(i);\n        }\n\n        if (value !== undefined) {\n          output.min[a] = Math.min(output.min[a], value);\n          output.max[a] = Math.max(output.max[a], value);\n        }\n      }\n    }\n\n    return output;\n  }\n  /**\n   * Get the required size + padding for a buffer, rounded to the next 4-byte boundary.\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#data-alignment\n   */\n\n\n  getPaddedBufferSize(bufferSize) {\n    return Math.ceil(bufferSize / 4) * 4;\n  }\n  /**\n   * Returns a buffer aligned to 4-byte boundary.\n   *\n   * @param {ArrayBuffer} arrayBuffer Buffer to pad\n   * @param {Integer} paddingByte (Optional)\n   * @returns {ArrayBuffer} The same buffer if it's already aligned to 4-byte boundary or a new buffer\n   */\n\n\n  getPaddedArrayBuffer(arrayBuffer, paddingByte = 0) {\n    const paddedLength = this.getPaddedBufferSize(arrayBuffer.byteLength);\n\n    if (paddedLength !== arrayBuffer.byteLength) {\n      const array = new Uint8Array(paddedLength);\n      array.set(new Uint8Array(arrayBuffer));\n\n      if (paddingByte !== 0) {\n        for (let i = arrayBuffer.byteLength; i < paddedLength; i++) {\n          array[i] = paddingByte;\n        }\n      }\n\n      return array.buffer;\n    }\n\n    return arrayBuffer;\n  }\n\n}\n/**\n * Punctual Lights Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n */\n\n\nclass GLTFLightExtension {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    this.writer = writer;\n    this.name = 'KHR_lights_punctual';\n  }\n\n  writeNode(light, nodeDef) {\n    if (!light.isLight) return;\n\n    if (!(light instanceof DirectionalLight && light.isDirectionalLight) && // @ts-expect-error\n    !(light instanceof PointLight && light.isPointLight) && !(light instanceof SpotLight && light.isSpotLight)) {\n      console.warn('THREE.GLTFExporter: Only directional, point, and spot lights are supported.', light);\n      return;\n    }\n\n    const writer = this.writer;\n    const json = writer.json;\n    const extensionsUsed = writer.extensionsUsed;\n    const lightDef = {};\n    if (light.name) lightDef.name = light.name;\n    lightDef.color = light.color.toArray();\n    lightDef.intensity = light.intensity;\n\n    if (light instanceof DirectionalLight && light.isDirectionalLight) {\n      lightDef.type = 'directional';\n    } else if (light instanceof PointLight && // @ts-expect-error\n    light.isPointLight) {\n      lightDef.type = 'point';\n      if (light.distance > 0) lightDef.range = light.distance;\n    } else if (light instanceof SpotLight && light.isSpotLight) {\n      lightDef.type = 'spot';\n      if (light.distance > 0) lightDef.range = light.distance;\n      lightDef.spot = {};\n      lightDef.spot.innerConeAngle = (light.penumbra - 1.0) * light.angle * -1.0;\n      lightDef.spot.outerConeAngle = light.angle;\n    }\n\n    if (!(light instanceof DirectionalLight) && light.decay !== undefined && light.decay !== 2) {\n      console.warn('THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, ' + 'and expects light.decay=2.');\n    }\n\n    if (!(light instanceof PointLight) && light.target && (light.target.parent !== light || light.target.position.x !== 0 || light.target.position.y !== 0 || light.target.position.z !== -1)) {\n      console.warn('THREE.GLTFExporter: Light direction may be lost. For best results, ' + 'make light.target a child of the light with position 0,0,-1.');\n    }\n\n    if (!extensionsUsed[this.name]) {\n      json.extensions = json.extensions || {};\n      json.extensions[this.name] = {\n        lights: []\n      };\n      extensionsUsed[this.name] = true;\n    }\n\n    if (json.extensions !== undefined) {\n      const lights = json.extensions[this.name].lights;\n      lights.push(lightDef);\n      nodeDef.extensions = nodeDef.extensions || {};\n      nodeDef.extensions[this.name] = {\n        light: lights.length - 1\n      };\n    }\n  }\n\n}\n/**\n * Unlit Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n */\n\n\nclass GLTFMaterialsUnlitExtension {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    this.writer = writer;\n    this.name = 'KHR_materials_unlit';\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!(material instanceof MeshBasicMaterial && // @ts-expect-error\n    material.isMeshBasicMaterial)) {\n      return;\n    }\n\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = {};\n    extensionsUsed[this.name] = true;\n    materialDef.pbrMetallicRoughness.metallicFactor = 0.0;\n    materialDef.pbrMetallicRoughness.roughnessFactor = 0.9;\n  }\n\n}\n/**\n * Specular-Glossiness Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness\n */\n\n\nclass GLTFMaterialsPBRSpecularGlossiness {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    this.writer = writer;\n    this.name = 'KHR_materials_pbrSpecularGlossiness';\n  }\n\n  writeMaterial(material, materialDef) {\n    // @ts-expect-error\n    if (!material.isGLTFSpecularGlossinessMaterial) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n\n    if (materialDef.pbrMetallicRoughness.baseColorFactor) {\n      extensionDef.diffuseFactor = materialDef.pbrMetallicRoughness.baseColorFactor;\n    }\n\n    if (material instanceof MeshPhongMaterial) {\n      const specularFactor = [1, 1, 1];\n      material.specular.toArray(specularFactor, 0);\n      extensionDef.specularFactor = specularFactor;\n      extensionDef.glossinessFactor = // @ts-expect-error\n      material.glossiness;\n    }\n\n    if (materialDef.pbrMetallicRoughness.baseColorTexture) {\n      extensionDef.diffuseTexture = materialDef.pbrMetallicRoughness.baseColorTexture;\n    }\n\n    if ((material instanceof MeshBasicMaterial || material instanceof MeshLambertMaterial || material instanceof MeshPhongMaterial) && material.specularMap) {\n      const specularMapDef = {\n        index: writer.processTexture(material.specularMap)\n      };\n      writer.applyTextureTransform(specularMapDef, material.specularMap);\n      extensionDef.specularGlossinessTexture = specularMapDef;\n    }\n\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n\n}\n/**\n * Transmission Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_transmission\n */\n\n\nclass GLTFMaterialsTransmissionExtension {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    this.writer = writer;\n    this.name = 'KHR_materials_transmission';\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!(material instanceof MeshPhysicalMaterial && // @ts-expect-error\n    material.isMeshPhysicalMaterial) || material.transmission === 0) {\n      return;\n    }\n\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.transmissionFactor = material.transmission;\n\n    if (material.transmissionMap) {\n      const transmissionMapDef = {\n        index: writer.processTexture(material.transmissionMap)\n      };\n      writer.applyTextureTransform(transmissionMapDef, material.transmissionMap);\n      extensionDef.transmissionTexture = transmissionMapDef;\n    }\n\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n\n}\n/**\n * Materials Volume Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_volume\n */\n\n\nclass GLTFMaterialsVolumeExtension {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    this.writer = writer;\n    this.name = 'KHR_materials_volume';\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!(material instanceof MeshPhysicalMaterial && // @ts-expect-error\n    material.isMeshPhysicalMaterial) || material.thickness === 0) {\n      return;\n    }\n\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.thickness = material.thickness;\n\n    if (material.thicknessMap) {\n      const thicknessMapDef = {\n        index: writer.processTexture(material.thicknessMap)\n      };\n      writer.applyTextureTransform(thicknessMapDef, material.thicknessMap);\n      extensionDef.thicknessTexture = thicknessMapDef;\n    }\n\n    extensionDef.attenuationDistance = material.attenuationDistance;\n    extensionDef.attenuationColor = //@ts-expect-error\n    material.attenuationTint.toArray();\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n\n}\n\nexport { GLTFExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}