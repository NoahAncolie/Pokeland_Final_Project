{"ast":null,"code":"const t = new Uint8Array([0]),\n      e = [171, 75, 84, 88, 32, 50, 48, 187, 13, 10, 26, 10];\nvar n, i, s, a, r, o, l, f;\n!function (t) {\n  t[t.NONE = 0] = \"NONE\", t[t.BASISLZ = 1] = \"BASISLZ\", t[t.ZSTD = 2] = \"ZSTD\", t[t.ZLIB = 3] = \"ZLIB\";\n}(n || (n = {})), function (t) {\n  t[t.BASICFORMAT = 0] = \"BASICFORMAT\";\n}(i || (i = {})), function (t) {\n  t[t.UNSPECIFIED = 0] = \"UNSPECIFIED\", t[t.ETC1S = 163] = \"ETC1S\", t[t.UASTC = 166] = \"UASTC\";\n}(s || (s = {})), function (t) {\n  t[t.UNSPECIFIED = 0] = \"UNSPECIFIED\", t[t.SRGB = 1] = \"SRGB\";\n}(a || (a = {})), function (t) {\n  t[t.UNSPECIFIED = 0] = \"UNSPECIFIED\", t[t.LINEAR = 1] = \"LINEAR\", t[t.SRGB = 2] = \"SRGB\", t[t.ITU = 3] = \"ITU\", t[t.NTSC = 4] = \"NTSC\", t[t.SLOG = 5] = \"SLOG\", t[t.SLOG2 = 6] = \"SLOG2\";\n}(r || (r = {})), function (t) {\n  t[t.ALPHA_STRAIGHT = 0] = \"ALPHA_STRAIGHT\", t[t.ALPHA_PREMULTIPLIED = 1] = \"ALPHA_PREMULTIPLIED\";\n}(o || (o = {})), function (t) {\n  t[t.RGB = 0] = \"RGB\", t[t.RRR = 3] = \"RRR\", t[t.GGG = 4] = \"GGG\", t[t.AAA = 15] = \"AAA\";\n}(l || (l = {})), function (t) {\n  t[t.RGB = 0] = \"RGB\", t[t.RGBA = 3] = \"RGBA\", t[t.RRR = 4] = \"RRR\", t[t.RRRG = 5] = \"RRRG\";\n}(f || (f = {}));\n\nclass U {\n  constructor() {\n    this.vkFormat = 0, this.typeSize = 1, this.pixelWidth = 0, this.pixelHeight = 0, this.pixelDepth = 0, this.layerCount = 0, this.faceCount = 1, this.supercompressionScheme = n.NONE, this.levels = [], this.dataFormatDescriptor = [{\n      vendorId: 0,\n      descriptorType: i.BASICFORMAT,\n      versionNumber: 2,\n      descriptorBlockSize: 40,\n      colorModel: s.UNSPECIFIED,\n      colorPrimaries: a.SRGB,\n      transferFunction: a.SRGB,\n      flags: o.ALPHA_STRAIGHT,\n      texelBlockDimension: {\n        x: 4,\n        y: 4,\n        z: 1,\n        w: 1\n      },\n      bytesPlane: [],\n      samples: []\n    }], this.keyValue = {}, this.globalData = null;\n  }\n\n}\n\nclass c {\n  constructor(t, e, n, i) {\n    this._dataView = new DataView(t.buffer, t.byteOffset + e, n), this._littleEndian = i, this._offset = 0;\n  }\n\n  _nextUint8() {\n    const t = this._dataView.getUint8(this._offset);\n\n    return this._offset += 1, t;\n  }\n\n  _nextUint16() {\n    const t = this._dataView.getUint16(this._offset, this._littleEndian);\n\n    return this._offset += 2, t;\n  }\n\n  _nextUint32() {\n    const t = this._dataView.getUint32(this._offset, this._littleEndian);\n\n    return this._offset += 4, t;\n  }\n\n  _nextUint64() {\n    const t = this._dataView.getUint32(this._offset, this._littleEndian) + 2 ** 32 * this._dataView.getUint32(this._offset + 4, this._littleEndian);\n\n    return this._offset += 8, t;\n  }\n\n  _skip(t) {\n    return this._offset += t, this;\n  }\n\n  _scan(t) {\n    let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const n = this._offset;\n    let i = 0;\n\n    for (; this._dataView.getUint8(this._offset) !== e && i < t;) i++, this._offset++;\n\n    return i < t && this._offset++, new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + n, i);\n  }\n\n}\n\nfunction h(t) {\n  return \"undefined\" != typeof TextEncoder ? new TextEncoder().encode(t) : Buffer.from(t);\n}\n\nfunction _(t) {\n  return \"undefined\" != typeof TextDecoder ? new TextDecoder().decode(t) : Buffer.from(t).toString(\"utf8\");\n}\n\nfunction g(t) {\n  let e = 0;\n\n  for (const n of t) e += n.byteLength;\n\n  const n = new Uint8Array(e);\n  let i = 0;\n\n  for (const e of t) n.set(new Uint8Array(e), i), i += e.byteLength;\n\n  return n;\n}\n\nfunction p(t) {\n  const n = new Uint8Array(t.buffer, t.byteOffset, e.length);\n  if (n[0] !== e[0] || n[1] !== e[1] || n[2] !== e[2] || n[3] !== e[3] || n[4] !== e[4] || n[5] !== e[5] || n[6] !== e[6] || n[7] !== e[7] || n[8] !== e[8] || n[9] !== e[9] || n[10] !== e[10] || n[11] !== e[11]) throw new Error(\"Missing KTX 2.0 identifier.\");\n  const i = new U(),\n        s = 17 * Uint32Array.BYTES_PER_ELEMENT,\n        a = new c(t, e.length, s, !0);\n  i.vkFormat = a._nextUint32(), i.typeSize = a._nextUint32(), i.pixelWidth = a._nextUint32(), i.pixelHeight = a._nextUint32(), i.pixelDepth = a._nextUint32(), i.layerCount = a._nextUint32(), i.faceCount = a._nextUint32();\n\n  const r = a._nextUint32();\n\n  i.supercompressionScheme = a._nextUint32();\n\n  const o = a._nextUint32(),\n        l = a._nextUint32(),\n        f = a._nextUint32(),\n        h = a._nextUint32(),\n        g = a._nextUint64(),\n        p = a._nextUint64(),\n        x = new c(t, e.length + s, 3 * r * 8, !0);\n\n  for (let e = 0; e < r; e++) i.levels.push({\n    levelData: new Uint8Array(t.buffer, t.byteOffset + x._nextUint64(), x._nextUint64()),\n    uncompressedByteLength: x._nextUint64()\n  });\n\n  const u = new c(t, o, l, !0),\n        y = {\n    vendorId: u._skip(4)._nextUint16(),\n    descriptorType: u._nextUint16(),\n    versionNumber: u._nextUint16(),\n    descriptorBlockSize: u._nextUint16(),\n    colorModel: u._nextUint8(),\n    colorPrimaries: u._nextUint8(),\n    transferFunction: u._nextUint8(),\n    flags: u._nextUint8(),\n    texelBlockDimension: {\n      x: u._nextUint8() + 1,\n      y: u._nextUint8() + 1,\n      z: u._nextUint8() + 1,\n      w: u._nextUint8() + 1\n    },\n    bytesPlane: [u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8()],\n    samples: []\n  },\n        D = (y.descriptorBlockSize / 4 - 6) / 4;\n\n  for (let t = 0; t < D; t++) y.samples[t] = {\n    bitOffset: u._nextUint16(),\n    bitLength: u._nextUint8(),\n    channelID: u._nextUint8(),\n    samplePosition: [u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8()],\n    sampleLower: u._nextUint32(),\n    sampleUpper: u._nextUint32()\n  };\n\n  i.dataFormatDescriptor.length = 0, i.dataFormatDescriptor.push(y);\n  const b = new c(t, f, h, !0);\n\n  for (; b._offset < h;) {\n    const t = b._nextUint32(),\n          e = b._scan(t),\n          n = _(e),\n          s = b._scan(t - e.byteLength);\n\n    i.keyValue[n] = n.match(/^ktx/i) ? _(s) : s, b._offset % 4 && b._skip(4 - b._offset % 4);\n  }\n\n  if (p <= 0) return i;\n\n  const d = new c(t, g, p, !0),\n        B = d._nextUint16(),\n        w = d._nextUint16(),\n        A = d._nextUint32(),\n        S = d._nextUint32(),\n        m = d._nextUint32(),\n        L = d._nextUint32(),\n        I = [];\n\n  for (let t = 0; t < r; t++) I.push({\n    imageFlags: d._nextUint32(),\n    rgbSliceByteOffset: d._nextUint32(),\n    rgbSliceByteLength: d._nextUint32(),\n    alphaSliceByteOffset: d._nextUint32(),\n    alphaSliceByteLength: d._nextUint32()\n  });\n\n  const R = g + d._offset,\n        E = R + A,\n        T = E + S,\n        O = T + m,\n        P = new Uint8Array(t.buffer, t.byteOffset + R, A),\n        C = new Uint8Array(t.buffer, t.byteOffset + E, S),\n        F = new Uint8Array(t.buffer, t.byteOffset + T, m),\n        G = new Uint8Array(t.buffer, t.byteOffset + O, L);\n  return i.globalData = {\n    endpointCount: B,\n    selectorCount: w,\n    imageDescs: I,\n    endpointsData: P,\n    selectorsData: C,\n    tablesData: F,\n    extendedData: G\n  }, i;\n}\n\nfunction x() {\n  return (x = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var n = arguments[e];\n\n      for (var i in n) Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);\n    }\n\n    return t;\n  }).apply(this, arguments);\n}\n\nconst u = {\n  keepWriter: !1\n};\n\nfunction y(n) {\n  let s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  s = x({}, u, s);\n  let a = new ArrayBuffer(0);\n\n  if (n.globalData) {\n    const t = new ArrayBuffer(20 + 5 * n.globalData.imageDescs.length * 4),\n          e = new DataView(t);\n    e.setUint16(0, n.globalData.endpointCount, !0), e.setUint16(2, n.globalData.selectorCount, !0), e.setUint32(4, n.globalData.endpointsData.byteLength, !0), e.setUint32(8, n.globalData.selectorsData.byteLength, !0), e.setUint32(12, n.globalData.tablesData.byteLength, !0), e.setUint32(16, n.globalData.extendedData.byteLength, !0);\n\n    for (let t = 0; t < n.globalData.imageDescs.length; t++) {\n      const i = n.globalData.imageDescs[t];\n      e.setUint32(20 + 5 * t * 4 + 0, i.imageFlags, !0), e.setUint32(20 + 5 * t * 4 + 4, i.rgbSliceByteOffset, !0), e.setUint32(20 + 5 * t * 4 + 8, i.rgbSliceByteLength, !0), e.setUint32(20 + 5 * t * 4 + 12, i.alphaSliceByteOffset, !0), e.setUint32(20 + 5 * t * 4 + 16, i.alphaSliceByteLength, !0);\n    }\n\n    a = g([t, n.globalData.endpointsData, n.globalData.selectorsData, n.globalData.tablesData, n.globalData.extendedData]);\n  }\n\n  const r = [];\n  let o = n.keyValue;\n  s.keepWriter || (o = x({}, n.keyValue, {\n    KTXwriter: \"KTX-Parse v0.2.2\"\n  }));\n\n  for (const e in o) {\n    const n = o[e],\n          i = h(e),\n          s = \"string\" == typeof n ? h(n) : n,\n          a = i.byteLength + 1 + s.byteLength + 1,\n          l = a % 4 ? 4 - a % 4 : 0;\n    r.push(g([new Uint32Array([a]), i, t, s, t, new Uint8Array(l).fill(0)]));\n  }\n\n  const l = g(r);\n  if (1 !== n.dataFormatDescriptor.length || n.dataFormatDescriptor[0].descriptorType !== i.BASICFORMAT) throw new Error(\"Only BASICFORMAT Data Format Descriptor output supported.\");\n  const f = n.dataFormatDescriptor[0],\n        U = new ArrayBuffer(28 + 16 * f.samples.length),\n        c = new DataView(U);\n  c.setUint32(0, U.byteLength, !0), c.setUint16(4, f.vendorId, !0), c.setUint16(6, f.descriptorType, !0), c.setUint16(8, f.versionNumber, !0), c.setUint16(10, f.descriptorBlockSize, !0), c.setUint8(12, f.colorModel), c.setUint8(13, f.colorPrimaries), c.setUint8(14, f.transferFunction), c.setUint8(15, f.flags), c.setUint8(16, f.texelBlockDimension.x - 1), c.setUint8(17, f.texelBlockDimension.y - 1), c.setUint8(18, f.texelBlockDimension.z - 1), c.setUint8(19, f.texelBlockDimension.w - 1);\n\n  for (let t = 0; t < 8; t++) c.setUint8(20 + t, f.bytesPlane[t]);\n\n  for (let t = 0; t < f.samples.length; t++) {\n    const e = f.samples[t],\n          n = 28 + 16 * t;\n    c.setUint16(n + 0, e.bitOffset, !0), c.setUint8(n + 2, e.bitLength), c.setUint8(n + 3, e.channelID), c.setUint8(n + 4, e.samplePosition[0]), c.setUint8(n + 5, e.samplePosition[1]), c.setUint8(n + 6, e.samplePosition[2]), c.setUint8(n + 7, e.samplePosition[3]), c.setUint32(n + 8, e.sampleLower, !0), c.setUint32(n + 12, e.sampleUpper, !0);\n  }\n\n  const _ = e.length + 68 + 3 * n.levels.length * 8,\n        p = _ + U.byteLength;\n\n  let y = p + l.byteLength;\n  y % 8 && (y += 8 - y % 8);\n  const D = [],\n        b = new DataView(new ArrayBuffer(3 * n.levels.length * 8));\n  let d = y + a.byteLength;\n\n  for (let t = 0; t < n.levels.length; t++) {\n    const e = n.levels[t];\n    D.push(e.levelData), b.setBigUint64(24 * t + 0, BigInt(d), !0), b.setBigUint64(24 * t + 8, BigInt(e.levelData.byteLength), !0), b.setBigUint64(24 * t + 16, BigInt(e.uncompressedByteLength), !0), d += e.levelData.byteLength;\n  }\n\n  const B = new ArrayBuffer(68),\n        w = new DataView(B);\n  return w.setUint32(0, n.vkFormat, !0), w.setUint32(4, n.typeSize, !0), w.setUint32(8, n.pixelWidth, !0), w.setUint32(12, n.pixelHeight, !0), w.setUint32(16, n.pixelDepth, !0), w.setUint32(20, n.layerCount, !0), w.setUint32(24, n.faceCount, !0), w.setUint32(28, n.levels.length, !0), w.setUint32(32, n.supercompressionScheme, !0), w.setUint32(36, _, !0), w.setUint32(40, U.byteLength, !0), w.setUint32(44, p, !0), w.setUint32(48, l.byteLength, !0), w.setBigUint64(52, BigInt(y), !0), w.setBigUint64(60, BigInt(a.byteLength), !0), new Uint8Array(g([new Uint8Array(e).buffer, B, b.buffer, U, l, new ArrayBuffer(y - (p + l.byteLength)), a, ...D]));\n}\n\nexport { l as KTX2ChannelETC1S, f as KTX2ChannelUASTC, U as KTX2Container, i as KTX2DescriptorType, o as KTX2Flags, s as KTX2Model, a as KTX2Primaries, n as KTX2SupercompressionScheme, r as KTX2Transfer, p as read, y as write };","map":{"version":3,"mappings":"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","names":["NUL","Uint8Array","KTX2_ID","KTX2SupercompressionScheme","KTX2DescriptorType","KTX2Model","KTX2Primaries","KTX2Transfer","KTX2Flags","KTX2ChannelETC1S","KTX2ChannelUASTC","KTX2Container","constructor","this","NONE","vendorId","descriptorType","BASICFORMAT","versionNumber","descriptorBlockSize","colorModel","UNSPECIFIED","colorPrimaries","SRGB","transferFunction","flags","ALPHA_STRAIGHT","texelBlockDimension","x","y","z","w","bytesPlane","samples","BufferReader","data","byteOffset","byteLength","littleEndian","_dataView","DataView","buffer","_littleEndian","_offset","_nextUint8","value","getUint8","_nextUint16","getUint16","_nextUint32","getUint32","_nextUint64","_skip","bytes","_scan","maxByteLength","term","encodeText","text","TextEncoder","encode","Buffer","from","decodeText","TextDecoder","decode","toString","concat","buffers","totalByteLength","result","set","read","id","length","Error","container","headerByteLength","Uint32Array","BYTES_PER_ELEMENT","headerReader","vkFormat","typeSize","pixelWidth","pixelHeight","pixelDepth","layerCount","faceCount","levelCount","supercompressionScheme","dfdByteOffset","dfdByteLength","kvdByteOffset","kvdByteLength","sgdByteOffset","sgdByteLength","levelReader","i","levels","push","levelData","uncompressedByteLength","dfdReader","dfd","numSamples","bitOffset","bitLength","channelID","samplePosition","sampleLower","sampleUpper","dataFormatDescriptor","kvdReader","keyValueByteLength","keyData","key","valueData","keyValue","match","sgdReader","endpointCount","selectorCount","endpointsByteLength","selectorsByteLength","tablesByteLength","extendedByteLength","imageDescs","imageFlags","rgbSliceByteOffset","rgbSliceByteLength","alphaSliceByteOffset","alphaSliceByteLength","endpointsByteOffset","selectorsByteOffset","tablesByteOffset","extendedByteOffset","endpointsData","selectorsData","tablesData","extendedData","globalData","DEFAULT_OPTIONS","keepWriter","write","options","sgdBuffer","ArrayBuffer","sgdHeaderBuffer","sgdHeaderView","setUint16","setUint32","imageDesc","keyValueData","KTXwriter","kvByteLength","kvPadding","fill","kvdBuffer","dfdBuffer","dfdView","setUint8","sample","sampleByteOffset","levelIndex","levelDataByteOffset","level","setBigUint64","BigInt","headerBuffer","headerView"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/ktx-parse/src/constants.ts","/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/ktx-parse/src/enums.ts","/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/ktx-parse/src/container.ts","/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/ktx-parse/src/buffer-reader.ts","/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/ktx-parse/src/util.ts","/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/ktx-parse/src/read.ts","/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/ktx-parse/src/write.ts"],"sourcesContent":["///////////////////////////////////////////////////\n// Common.\n///////////////////////////////////////////////////\n\n// Injected at compile time, from $npm_package_version.\ndeclare const PACKAGE_VERSION: string;\n\nexport const KTX_WRITER = `KTX-Parse v${PACKAGE_VERSION}`;\n\nexport const NUL = new Uint8Array([0x00]);\n\n\n///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\n\nexport const KTX2_ID = [\n\t// '´', 'K', 'T', 'X', '2', '0', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n\t0xAB, 0x4B, 0x54, 0x58, 0x20, 0x32, 0x30, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n];\n\nexport const HEADER_BYTE_LENGTH = 68; // 13 * 4 + 2 * 8\n\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport const KHR_DF_VENDORID_KHRONOS = 0;\nexport const KHR_DF_VERSION = 2;\nexport const KHR_DF_BLOCKSIZE = 40;\nexport const VK_FORMAT_UNDEFINED = 0;\n","/**\n * Enums.\n */\n\n///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\n\nexport enum KTX2SupercompressionScheme {\n\tNONE = 0,\n\tBASISLZ = 1,\n\tZSTD = 2,\n\tZLIB = 3,\n};\n\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport enum KTX2DescriptorType {\n\tBASICFORMAT = 0x00,\n};\n\nexport enum KTX2Model {\n\tUNSPECIFIED = 0,\n\tETC1S = 163,\n\tUASTC = 166,\n};\n\nexport enum KTX2Primaries {\n\tUNSPECIFIED = 0,\n\tSRGB = 1,\n};\n\nexport enum KTX2Transfer {\n\tUNSPECIFIED = 0,\n\tLINEAR = 1,\n\tSRGB = 2,\n\tITU = 3,\n\tNTSC = 4,\n\tSLOG = 5,\n\tSLOG2 = 6,\n};\n\nexport enum KTX2Flags {\n\tALPHA_STRAIGHT = 0,\n\tALPHA_PREMULTIPLIED = 1,\n};\n\nexport enum KTX2ChannelETC1S {\n\tRGB = 0,\n\tRRR = 3,\n\tGGG = 4,\n\tAAA = 15,\n};\n\nexport enum KTX2ChannelUASTC {\n\tRGB = 0,\n\tRGBA = 3,\n\tRRR = 4,\n\tRRRG = 5,\n};\n","import { KHR_DF_BLOCKSIZE, KHR_DF_VENDORID_KHRONOS, KHR_DF_VERSION, VK_FORMAT_UNDEFINED } from './constants';\nimport { KTX2DescriptorType, KTX2Flags, KTX2Model, KTX2Primaries, KTX2SupercompressionScheme } from './enums';\n\n/**\n * Represents an unpacked KTX 2.0 texture container. Data for individual mip levels are stored in\n * the `.levels` array, typically compressed in Basis Universal formats. Additional properties\n * provide metadata required to process, transcode, and upload these textures.\n */\nexport class KTX2Container {\n\t/**\n\t * Specifies the image format using Vulkan VkFormat enum values. When using Basis Universal\n\t * texture formats, `vkFormat` must be VK_FORMAT_UNDEFINED.\n\t */\n\tpublic vkFormat = VK_FORMAT_UNDEFINED;\n\n\t/**\n\t * Size of the data type in bytes used to upload the data to a graphics API. When `vkFormat` is\n\t * VK_FORMAT_UNDEFINED, `typeSize` must be 1.\n\t */\n\tpublic typeSize: number = 1;\n\n\t/** Width of the texture image for level 0, in pixels. */\n\tpublic pixelWidth: number = 0;\n\n\t/** Height of the texture image for level 0, in pixels. */\n\tpublic pixelHeight: number = 0;\n\n\t/** Depth of the texture image for level 0, in pixels (3D textures only). */\n\tpublic pixelDepth: number = 0;\n\n\t/** Number of array elements (array textures only). */\n\tpublic layerCount: number = 0;\n\n\t/**\n\t * Number of cubemap faces. For cubemaps and cubemap arrays, `faceCount` must be 6. For all\n\t * other textures, `faceCount` must be 1. Cubemap faces are stored in +X, -X, +Y, -Y, +Z, -Z\n\t * order.\n\t */\n\tpublic faceCount: number = 1;\n\n\t/** Indicates which supercompression scheme has been applied to mip level images, if any. */\n\tpublic supercompressionScheme = KTX2SupercompressionScheme.NONE;\n\n\t/** Mip levels, ordered largest (original) to smallest (~1px). */\n\tpublic levels: KTX2Level[] = [];\n\n\t/** Data Format Descriptor. */\n\tpublic dataFormatDescriptor: KTX2DataFormatDescriptorBasicFormat[] = [{\n\t\tvendorId: KHR_DF_VENDORID_KHRONOS,\n\t\tdescriptorType: KTX2DescriptorType.BASICFORMAT,\n\t\tversionNumber: KHR_DF_VERSION,\n\t\tdescriptorBlockSize: KHR_DF_BLOCKSIZE,\n\t\tcolorModel: KTX2Model.UNSPECIFIED,\n\t\tcolorPrimaries: KTX2Primaries.SRGB,\n\t\ttransferFunction: KTX2Primaries.SRGB,\n\t\tflags: KTX2Flags.ALPHA_STRAIGHT,\n\t\ttexelBlockDimension: {x: 4, y: 4, z: 1, w: 1},\n\t\tbytesPlane: [],\n\t\tsamples: [],\n\t}];\n\n\t/** Key/Value Data. */\n\tpublic keyValue: {[key: string]: string | Uint8Array} = {};\n\n\t/** Supercompression Global Data. */\n\tpublic globalData: KTX2GlobalDataBasisLZ | null = null;\n}\n\n\n///////////////////////////////////////////////////\n// Mip Levels.\n///////////////////////////////////////////////////\n\nexport interface KTX2Level {\n\t/** Compressed data of the mip level. */\n\tlevelData: Uint8Array;\n\n\t/**\n\t * Size of the mip level after reflation from supercompression, if applicable. When\n\t * `supercompressionType` is BASISLZ, `uncompressedByteLength` must be 0. When\n\t * `supercompressionType` is `NONE`, `uncompressedByteLength` must match the `levelData` byte\n\t * length.\n\t *\n\t * _**NOTICE:** this implies that for formats such as UASTC, `uncompressedByteLength` may\n\t * indicate size after ZSTD reflation (and of transcoded ASTC data), but does _not_ indicate\n\t * size of decoded RGBA32 pixels._\n\t */\n\tuncompressedByteLength: number;\n};\n\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport interface KTX2DataFormatDescriptorBasicFormat {\n\tvendorId: number;\n\tdescriptorType: number;\n\tversionNumber: number;\n\tdescriptorBlockSize: number;\n\tcolorModel: number;\n\tcolorPrimaries: number;\n\ttransferFunction: number;\n\tflags: number;\n\ttexelBlockDimension: KTX2BasicFormatTexelBlockDimensions;\n\tbytesPlane: number[];\n\tsamples: KTX2BasicFormatSample[],\n};\n\nexport interface KTX2BasicFormatTexelBlockDimensions {\n\tx: number;\n\ty: number;\n\tz: number;\n\tw: number;\n};\n\nexport interface KTX2BasicFormatSample {\n\tbitOffset: number;\n\tbitLength: number;\n\tchannelID: number;\n\tsamplePosition: number[];\n\tsampleLower: number;\n\tsampleUpper: number;\n};\n\n\n///////////////////////////////////////////////////\n// Supercompression Global Data.\n///////////////////////////////////////////////////\n\nexport interface KTX2GlobalDataBasisLZ {\n\tendpointCount: number;\n\tselectorCount: number;\n\timageDescs: KTX2GlobalDataBasisLZImageDesc[];\n\tendpointsData: Uint8Array;\n\tselectorsData: Uint8Array;\n\ttablesData: Uint8Array;\n\textendedData: Uint8Array;\n};\n\ninterface KTX2GlobalDataBasisLZImageDesc {\n\timageFlags: number;\n\trgbSliceByteOffset: number;\n\trgbSliceByteLength: number;\n\talphaSliceByteOffset: number;\n\talphaSliceByteLength: number;\n};\n","export class BufferReader {\n\tprivate _dataView: DataView;\n\tprivate _littleEndian: boolean;\n\tpublic _offset: number;\n\n\tconstructor(data: Uint8Array, byteOffset: number, byteLength: number, littleEndian: boolean) {\n\t\tthis._dataView = new DataView(data.buffer, data.byteOffset + byteOffset, byteLength);\n\t\tthis._littleEndian = littleEndian;\n\t\tthis._offset = 0;\n\t}\n\n\t_nextUint8() {\n\t\tconst value = this._dataView.getUint8(this._offset);\n\t\tthis._offset += 1;\n\t\treturn value;\n\t}\n\n\t_nextUint16() {\n\t\tconst value = this._dataView.getUint16(this._offset, this._littleEndian);\n\t\tthis._offset += 2;\n\t\treturn value;\n\t}\n\n\t_nextUint32() {\n\t\tconst value = this._dataView.getUint32(this._offset, this._littleEndian);\n\t\tthis._offset += 4;\n\t\treturn value;\n\t}\n\n\t_nextUint64() {\n\t\tconst left = this._dataView.getUint32(this._offset, this._littleEndian);\n\t\tconst right = this._dataView.getUint32(this._offset + 4, this._littleEndian);\n\t\t// TODO(cleanup): Just test this...\n\t\t// const value = this._littleEndian ? left + (2 ** 32 * right) : (2 ** 32 * left) + right;\n\t\tconst value = left + (2 ** 32 * right);\n\t\tthis._offset += 8;\n\t\treturn value;\n\t}\n\n\t_skip(bytes: number) {\n\t\tthis._offset += bytes;\n\t\treturn this;\n\t}\n\n\t_scan(maxByteLength: number, term: number = 0x00): Uint8Array {\n\t\tconst byteOffset = this._offset;\n\t\tlet byteLength = 0;\n\t\twhile (this._dataView.getUint8(this._offset) !== term && byteLength < maxByteLength) {\n\t\t\tbyteLength++;\n\t\t\tthis._offset++;\n\t\t}\n\n\t\tif (byteLength < maxByteLength) this._offset++;\n\n\t\treturn new Uint8Array(\n\t\t\tthis._dataView.buffer,\n\t\t\tthis._dataView.byteOffset + byteOffset,\n\t\t\tbyteLength\n\t\t);\n\t}\n}\n","\n/** Encodes text to an ArrayBuffer. */\nexport function encodeText(text: string): Uint8Array {\n\tif (typeof TextEncoder !== 'undefined') {\n\t\treturn new TextEncoder().encode(text);\n\t}\n\treturn Buffer.from(text);\n}\n\n/** Decodes an ArrayBuffer to text. */\nexport function decodeText(buffer: Uint8Array): string {\n\tif (typeof TextDecoder !== 'undefined') {\n\t\treturn new TextDecoder().decode(buffer);\n\t}\n\treturn Buffer.from(buffer).toString('utf8');\n}\n\n/** Concatenates N ArrayBuffers. */\nexport function concat (buffers: (ArrayBuffer | Uint8Array)[]): Uint8Array {\n\tlet totalByteLength = 0;\n\tfor (const buffer of buffers) {\n\t\ttotalByteLength += buffer.byteLength;\n\t}\n\n\tconst result = new Uint8Array(totalByteLength);\n\tlet byteOffset = 0;\n\n\tfor (const buffer of buffers) {\n\t\tresult.set(new Uint8Array(buffer), byteOffset);\n\t\tbyteOffset += buffer.byteLength;\n\t}\n\n\treturn result;\n}","import { BufferReader } from './buffer-reader';\nimport { KTX2_ID } from './constants';\nimport { KTX2Container, KTX2DataFormatDescriptorBasicFormat } from './container';\nimport { decodeText } from './util';\n\n/**\n * Parses a KTX 2.0 file, returning an unpacked {@link KTX2Container} instance with all associated\n * data. The container's mip levels and other binary data are pointers into the original file, not\n * copies, so the original file should not be overwritten after reading.\n *\n * @param data Bytes of KTX 2.0 file, as Uint8Array or Buffer.\n */\nexport function read(data: Uint8Array): KTX2Container {\n\n\t///////////////////////////////////////////////////\n\t// KTX 2.0 Identifier.\n\t///////////////////////////////////////////////////\n\n\tconst id = new Uint8Array(data.buffer, data.byteOffset, KTX2_ID.length);\n\tif (id[0] !== KTX2_ID[0] || // '´'\n\t\tid[1] !== KTX2_ID[1] || // 'K'\n\t\tid[2] !== KTX2_ID[2] || // 'T'\n\t\tid[3] !== KTX2_ID[3] || // 'X'\n\t\tid[4] !== KTX2_ID[4] || // ' '\n\t\tid[5] !== KTX2_ID[5] || // '2'\n\t\tid[6] !== KTX2_ID[6] || // '0'\n\t\tid[7] !== KTX2_ID[7] || // 'ª'\n\t\tid[8] !== KTX2_ID[8] || // '\\r'\n\t\tid[9] !== KTX2_ID[9] || // '\\n'\n\t\tid[10] !== KTX2_ID[10] || // '\\x1A'\n\t\tid[11] !== KTX2_ID[11] // '\\n'\n\t) {\n\t\tthrow new Error('Missing KTX 2.0 identifier.');\n\t}\n\n\tconst container = new KTX2Container();\n\n\t///////////////////////////////////////////////////\n\t// Header.\n\t///////////////////////////////////////////////////\n\n\tconst headerByteLength = 17 * Uint32Array.BYTES_PER_ELEMENT;\n\tconst headerReader = new BufferReader(data, KTX2_ID.length, headerByteLength, true);\n\n\tcontainer.vkFormat = headerReader._nextUint32();\n\tcontainer.typeSize = headerReader._nextUint32();\n\tcontainer.pixelWidth = headerReader._nextUint32();\n\tcontainer.pixelHeight = headerReader._nextUint32();\n\tcontainer.pixelDepth = headerReader._nextUint32();\n\tcontainer.layerCount = headerReader._nextUint32();\n\tcontainer.faceCount = headerReader._nextUint32();\n\n\tconst levelCount = headerReader._nextUint32();\n\n\tcontainer.supercompressionScheme = headerReader._nextUint32();\n\n\tconst dfdByteOffset = headerReader._nextUint32();\n\tconst dfdByteLength = headerReader._nextUint32();\n\tconst kvdByteOffset = headerReader._nextUint32();\n\tconst kvdByteLength = headerReader._nextUint32();\n\tconst sgdByteOffset = headerReader._nextUint64();\n\tconst sgdByteLength = headerReader._nextUint64();\n\n\t///////////////////////////////////////////////////\n\t// Level Index.\n\t///////////////////////////////////////////////////\n\n\tconst levelByteLength = levelCount * 3 * 8;\n\tconst levelReader = new BufferReader(data, KTX2_ID.length + headerByteLength, levelByteLength, true);\n\n\tfor (let i = 0; i < levelCount; i ++) {\n\t\tcontainer.levels.push({\n\t\t\tlevelData: new Uint8Array(data.buffer, data.byteOffset + levelReader._nextUint64(), levelReader._nextUint64()),\n\t\t\tuncompressedByteLength: levelReader._nextUint64(),\n\t\t});\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Data Format Descriptor (DFD).\n\t///////////////////////////////////////////////////\n\n\tconst dfdReader = new BufferReader(data, dfdByteOffset, dfdByteLength, true);\n\n\tconst dfd: KTX2DataFormatDescriptorBasicFormat = {\n\t\tvendorId: dfdReader._skip(4 /* totalSize */)._nextUint16(),\n\t\tdescriptorType: dfdReader._nextUint16(),\n\t\tversionNumber: dfdReader._nextUint16(),\n\t\tdescriptorBlockSize: dfdReader._nextUint16(),\n\t\tcolorModel: dfdReader._nextUint8(),\n\t\tcolorPrimaries: dfdReader._nextUint8(),\n\t\ttransferFunction: dfdReader._nextUint8(),\n\t\tflags: dfdReader._nextUint8(),\n\t\ttexelBlockDimension: {\n\t\t\tx: dfdReader._nextUint8() + 1,\n\t\t\ty: dfdReader._nextUint8() + 1,\n\t\t\tz: dfdReader._nextUint8() + 1,\n\t\t\tw: dfdReader._nextUint8() + 1,\n\t\t},\n\t\tbytesPlane: [\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t],\n\t\tsamples: [],\n\t};\n\n\tconst sampleStart = 6;\n\tconst sampleWords = 4;\n\tconst numSamples = (dfd.descriptorBlockSize / 4 - sampleStart) / sampleWords;\n\n\tfor (let i = 0; i < numSamples; i ++) {\n\t\tdfd.samples[ i ] = {\n\t\t\tbitOffset: dfdReader._nextUint16(),\n\t\t\tbitLength: dfdReader._nextUint8(),\n\t\t\tchannelID: dfdReader._nextUint8(),\n\t\t\tsamplePosition: [\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t],\n\t\t\tsampleLower: dfdReader._nextUint32(),\n\t\t\tsampleUpper: dfdReader._nextUint32(),\n\t\t};\n\t}\n\n\tcontainer.dataFormatDescriptor.length = 0;\n\tcontainer.dataFormatDescriptor.push(dfd);\n\n\n\t///////////////////////////////////////////////////\n\t// Key/Value Data (KVD).\n\t///////////////////////////////////////////////////\n\n\tconst kvdReader = new BufferReader(data, kvdByteOffset, kvdByteLength, true);\n\n\twhile (kvdReader._offset < kvdByteLength) {\n\t\tconst keyValueByteLength = kvdReader._nextUint32();\n\t\tconst keyData = kvdReader._scan(keyValueByteLength);\n\t\tconst key = decodeText(keyData);\n\n\t\tconst valueData = kvdReader._scan(keyValueByteLength - keyData.byteLength);\n\t\tcontainer.keyValue[key] = key.match(/^ktx/i) ? decodeText(valueData) : valueData;\n\n\t\t// 4-byte alignment.\n\t\tif (kvdReader._offset % 4) kvdReader._skip(4 - (kvdReader._offset % 4));\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Supercompression Global Data (SGD).\n\t///////////////////////////////////////////////////\n\n\tif (sgdByteLength <= 0) return container;\n\n\tconst sgdReader = new BufferReader(data, sgdByteOffset, sgdByteLength, true);\n\n\tconst endpointCount = sgdReader._nextUint16();\n\tconst selectorCount = sgdReader._nextUint16();\n\tconst endpointsByteLength = sgdReader._nextUint32();\n\tconst selectorsByteLength = sgdReader._nextUint32();\n\tconst tablesByteLength = sgdReader._nextUint32();\n\tconst extendedByteLength = sgdReader._nextUint32();\n\n\tconst imageDescs = [];\n\tfor (let i = 0; i < levelCount; i ++) {\n\t\timageDescs.push({\n\t\t\timageFlags: sgdReader._nextUint32(),\n\t\t\trgbSliceByteOffset: sgdReader._nextUint32(),\n\t\t\trgbSliceByteLength: sgdReader._nextUint32(),\n\t\t\talphaSliceByteOffset: sgdReader._nextUint32(),\n\t\t\talphaSliceByteLength: sgdReader._nextUint32(),\n\t\t});\n\t}\n\n\tconst endpointsByteOffset = sgdByteOffset + sgdReader._offset;\n\tconst selectorsByteOffset = endpointsByteOffset + endpointsByteLength;\n\tconst tablesByteOffset = selectorsByteOffset + selectorsByteLength;\n\tconst extendedByteOffset = tablesByteOffset + tablesByteLength;\n\n\tconst endpointsData = new Uint8Array(data.buffer, data.byteOffset + endpointsByteOffset, endpointsByteLength);\n\tconst selectorsData = new Uint8Array(data.buffer, data.byteOffset + selectorsByteOffset, selectorsByteLength);\n\tconst tablesData = new Uint8Array(data.buffer, data.byteOffset + tablesByteOffset, tablesByteLength);\n\tconst extendedData = new Uint8Array(data.buffer, data.byteOffset + extendedByteOffset, extendedByteLength);\n\n\tcontainer.globalData = {\n\t\tendpointCount,\n\t\tselectorCount,\n\t\timageDescs,\n\t\tendpointsData,\n\t\tselectorsData,\n\t\ttablesData,\n\t\textendedData,\n\t};\n\n\treturn container;\n}\n","import { HEADER_BYTE_LENGTH, KTX2_ID, KTX_WRITER, NUL } from './constants';\nimport { KTX2Container } from './container';\nimport { KTX2DescriptorType } from './enums';\nimport { concat, encodeText } from './util';\n\ninterface WriteOptions {keepWriter?: boolean};\nconst DEFAULT_OPTIONS: WriteOptions = {keepWriter: false};\n\n/**\n * Serializes a {@link KTX2Container} instance to a KTX 2.0 file. Mip levels and other binary data\n * are copied into the resulting Uint8Array, so the original container can safely be edited or\n * destroyed after it is serialized.\n *\n * Options:\n * - keepWriter: If true, 'KTXWriter' key/value field is written as provided by the container.\n * \t\tOtherwise, a string for the current ktx-parse version is generated. Default: false.\n *\n * @param container\n * @param options\n */\nexport function write(container: KTX2Container, options: WriteOptions = {}): Uint8Array {\n\toptions = {...DEFAULT_OPTIONS, ...options};\n\n\t///////////////////////////////////////////////////\n\t// Supercompression Global Data (SGD).\n\t///////////////////////////////////////////////////\n\n\tlet sgdBuffer = new ArrayBuffer(0);\n\tif (container.globalData) {\n\t\tconst sgdHeaderBuffer = new ArrayBuffer(20 + container.globalData.imageDescs.length * 5 * 4);\n\t\tconst sgdHeaderView = new DataView(sgdHeaderBuffer);\n\t\tsgdHeaderView.setUint16(0, container.globalData.endpointCount, true);\n\t\tsgdHeaderView.setUint16(2, container.globalData.selectorCount, true);\n\t\tsgdHeaderView.setUint32(4, container.globalData.endpointsData.byteLength, true);\n\t\tsgdHeaderView.setUint32(8, container.globalData.selectorsData.byteLength, true);\n\t\tsgdHeaderView.setUint32(12, container.globalData.tablesData.byteLength, true);\n\t\tsgdHeaderView.setUint32(16, container.globalData.extendedData.byteLength, true);\n\n\t\tfor (let i = 0; i < container.globalData.imageDescs.length; i++) {\n\t\t\tconst imageDesc = container.globalData.imageDescs[i];\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 0, imageDesc.imageFlags, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 4, imageDesc.rgbSliceByteOffset, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 8, imageDesc.rgbSliceByteLength, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 12, imageDesc.alphaSliceByteOffset, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 16, imageDesc.alphaSliceByteLength, true);\n\t\t}\n\n\t\tsgdBuffer = concat([\n\t\t\tsgdHeaderBuffer,\n\t\t\tcontainer.globalData.endpointsData,\n\t\t\tcontainer.globalData.selectorsData,\n\t\t\tcontainer.globalData.tablesData,\n\t\t\tcontainer.globalData.extendedData,\n\t\t]);\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Key/Value Data (KVD).\n\t///////////////////////////////////////////////////\n\n\tconst keyValueData: Uint8Array[] = [];\n\tlet keyValue = container.keyValue;\n\n\tif (!options.keepWriter) {\n\t\tkeyValue = {...container.keyValue, 'KTXwriter': KTX_WRITER};\n\t}\n\n\tfor (const key in keyValue) {\n\t\tconst value = keyValue[key];\n\t\tconst keyData = encodeText(key);\n\t\tconst valueData = typeof value === 'string' ? encodeText(value) : value;\n\t\tconst kvByteLength = keyData.byteLength + 1 + valueData.byteLength + 1;\n\t\tconst kvPadding = kvByteLength % 4 ? (4 - (kvByteLength % 4)) : 0; // align(4)\n\t\tkeyValueData.push(concat([\n\t\t\tnew Uint32Array([kvByteLength]),\n\t\t\tkeyData,\n\t\t\tNUL,\n\t\t\tvalueData,\n\t\t\tNUL,\n\t\t\tnew Uint8Array(kvPadding).fill(0x00), // align(4)\n\t\t]));\n\t}\n\n\tconst kvdBuffer = concat(keyValueData);\n\n\n\t///////////////////////////////////////////////////\n\t// Data Format Descriptor (DFD).\n\t///////////////////////////////////////////////////\n\n\tif (container.dataFormatDescriptor.length !== 1\n\t\t\t|| container.dataFormatDescriptor[0].descriptorType !== KTX2DescriptorType.BASICFORMAT) {\n\t\tthrow new Error('Only BASICFORMAT Data Format Descriptor output supported.');\n\t}\n\n\tconst dfd = container.dataFormatDescriptor[0];\n\n\tconst dfdBuffer = new ArrayBuffer(28 + dfd.samples.length * 16);\n\tconst dfdView = new DataView(dfdBuffer);\n\n\tdfdView.setUint32(0, dfdBuffer.byteLength, true);\n\tdfdView.setUint16(4, dfd.vendorId, true);\n\tdfdView.setUint16(6, dfd.descriptorType, true);\n\tdfdView.setUint16(8, dfd.versionNumber, true);\n\tdfdView.setUint16(10, dfd.descriptorBlockSize, true);\n\n\tdfdView.setUint8(12, dfd.colorModel);\n\tdfdView.setUint8(13, dfd.colorPrimaries);\n\tdfdView.setUint8(14, dfd.transferFunction);\n\tdfdView.setUint8(15, dfd.flags);\n\n\tdfdView.setUint8(16, dfd.texelBlockDimension.x - 1);\n\tdfdView.setUint8(17, dfd.texelBlockDimension.y - 1);\n\tdfdView.setUint8(18, dfd.texelBlockDimension.z - 1);\n\tdfdView.setUint8(19, dfd.texelBlockDimension.w - 1);\n\n\tfor (let i = 0; i < 8; i++) dfdView.setUint8(20 + i, dfd.bytesPlane[i]);\n\n\tfor (let i = 0; i < dfd.samples.length; i++) {\n\t\tconst sample = dfd.samples[i];\n\t\tconst sampleByteOffset = 28 + i * 16;\n\n\t\tdfdView.setUint16(sampleByteOffset + 0, sample.bitOffset, true);\n\t\tdfdView.setUint8(sampleByteOffset + 2, sample.bitLength);\n\t\tdfdView.setUint8(sampleByteOffset + 3, sample.channelID);\n\n\t\tdfdView.setUint8(sampleByteOffset + 4, sample.samplePosition[0]);\n\t\tdfdView.setUint8(sampleByteOffset + 5, sample.samplePosition[1]);\n\t\tdfdView.setUint8(sampleByteOffset + 6, sample.samplePosition[2]);\n\t\tdfdView.setUint8(sampleByteOffset + 7, sample.samplePosition[3]);\n\n\t\tdfdView.setUint32(sampleByteOffset + 8, sample.sampleLower, true);\n\t\tdfdView.setUint32(sampleByteOffset + 12, sample.sampleUpper, true);\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Data alignment.\n\t///////////////////////////////////////////////////\n\n\tconst dfdByteOffset = KTX2_ID.length + HEADER_BYTE_LENGTH + container.levels.length * 3 * 8;\n\tconst kvdByteOffset = dfdByteOffset + dfdBuffer.byteLength;\n\tlet sgdByteOffset = kvdByteOffset + kvdBuffer.byteLength;\n\tif (sgdByteOffset % 8) sgdByteOffset += 8 - (sgdByteOffset % 8); // align(8)\n\n\n\t///////////////////////////////////////////////////\n\t// Level Index.\n\t///////////////////////////////////////////////////\n\n\tconst levelData: Uint8Array[] = [];\n\tconst levelIndex = new DataView(new ArrayBuffer(container.levels.length * 3 * 8));\n\n\tlet levelDataByteOffset = sgdByteOffset + sgdBuffer.byteLength;\n\tfor (let i = 0; i < container.levels.length; i++) {\n\t\tconst level = container.levels[i];\n\t\tlevelData.push(level.levelData);\n\t\tlevelIndex.setBigUint64(i * 24 + 0, BigInt(levelDataByteOffset), true);\n\t\tlevelIndex.setBigUint64(i * 24 + 8, BigInt(level.levelData.byteLength), true);\n\t\tlevelIndex.setBigUint64(i * 24 + 16, BigInt(level.uncompressedByteLength), true);\n\t\tlevelDataByteOffset += level.levelData.byteLength;\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Header.\n\t///////////////////////////////////////////////////\n\n\tconst headerBuffer = new ArrayBuffer(HEADER_BYTE_LENGTH);\n\tconst headerView = new DataView(headerBuffer);\n\theaderView.setUint32(0, container.vkFormat, true);\n\theaderView.setUint32(4, container.typeSize, true);\n\theaderView.setUint32(8, container.pixelWidth, true);\n\theaderView.setUint32(12, container.pixelHeight, true);\n\theaderView.setUint32(16, container.pixelDepth, true);\n\theaderView.setUint32(20, container.layerCount, true);\n\theaderView.setUint32(24, container.faceCount, true);\n\theaderView.setUint32(28, container.levels.length, true);\n\theaderView.setUint32(32, container.supercompressionScheme, true);\n\n\theaderView.setUint32(36, dfdByteOffset, true);\n\theaderView.setUint32(40, dfdBuffer.byteLength, true);\n\theaderView.setUint32(44, kvdByteOffset, true);\n\theaderView.setUint32(48, kvdBuffer.byteLength, true);\n\theaderView.setBigUint64(52, BigInt(sgdByteOffset), true);\n\theaderView.setBigUint64(60, BigInt(sgdBuffer.byteLength), true);\n\n\n\t///////////////////////////////////////////////////\n\t// Compose.\n\t///////////////////////////////////////////////////\n\n\treturn new Uint8Array(concat([\n\t\tnew Uint8Array(KTX2_ID).buffer,\n\t\theaderBuffer,\n\t\tlevelIndex.buffer,\n\t\tdfdBuffer,\n\t\tkvdBuffer,\n\t\tnew ArrayBuffer(sgdByteOffset - (kvdByteOffset + kvdBuffer.byteLength)), // align(8)\n\t\tsgdBuffer,\n\t\t...levelData,\n\t]));\n}\n\n"]},"metadata":{},"sourceType":"module"}