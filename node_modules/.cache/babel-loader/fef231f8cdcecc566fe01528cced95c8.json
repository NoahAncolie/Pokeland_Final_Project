{"ast":null,"code":"import { Loader, FileLoader, Vector3, DataTexture, UnsignedByteType, LinearFilter, ClampToEdgeWrapping, DataTexture3D } from 'three'; // https://wwwimages2.adobe.com/content/dam/acom/en/products/speedgrade/cc/pdfs/cube-lut-specification-1.0.pdf\n\nclass LUTCubeLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('text');\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(str) {\n    // Remove empty lines and comments\n    str = str.replace(/^#.*?(\\n|\\r)/gm, '').replace(/^\\s*?(\\n|\\r)/gm, '').trim();\n    let title = null;\n    let size = null;\n    const domainMin = new Vector3(0, 0, 0);\n    const domainMax = new Vector3(1, 1, 1);\n    const lines = str.split(/[\\n\\r]+/g);\n    let data = null;\n    let currIndex = 0;\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i].trim();\n      const split = line.split(/\\s/g);\n\n      switch (split[0]) {\n        case 'TITLE':\n          title = line.substring(7, line.length - 1);\n          break;\n\n        case 'LUT_3D_SIZE':\n          // TODO: A .CUBE LUT file specifies floating point values and could be represented with\n          // more precision than can be captured with Uint8Array.\n          const sizeToken = split[1];\n          size = parseFloat(sizeToken);\n          data = new Uint8Array(size * size * size * 4);\n          break;\n\n        case 'DOMAIN_MIN':\n          domainMin.x = parseFloat(split[1]);\n          domainMin.y = parseFloat(split[2]);\n          domainMin.z = parseFloat(split[3]);\n          break;\n\n        case 'DOMAIN_MAX':\n          domainMax.x = parseFloat(split[1]);\n          domainMax.y = parseFloat(split[2]);\n          domainMax.z = parseFloat(split[3]);\n          break;\n\n        default:\n          const r = parseFloat(split[0]);\n          const g = parseFloat(split[1]);\n          const b = parseFloat(split[2]);\n\n          if (r > 1.0 || r < 0.0 || g > 1.0 || g < 0.0 || b > 1.0 || b < 0.0) {\n            throw new Error('LUTCubeLoader : Non normalized values not supported.');\n          }\n\n          data[currIndex + 0] = r * 255;\n          data[currIndex + 1] = g * 255;\n          data[currIndex + 2] = b * 255;\n          data[currIndex + 3] = 255;\n          currIndex += 4;\n      }\n    }\n\n    const texture = new DataTexture();\n    texture.image.data = data;\n    texture.image.width = size;\n    texture.image.height = size * size;\n    texture.type = UnsignedByteType;\n    texture.magFilter = LinearFilter;\n    texture.minFilter = LinearFilter;\n    texture.wrapS = ClampToEdgeWrapping;\n    texture.wrapT = ClampToEdgeWrapping;\n    texture.generateMipmaps = false;\n    const texture3D = new DataTexture3D();\n    texture3D.image.data = data;\n    texture3D.image.width = size;\n    texture3D.image.height = size;\n    texture3D.image.depth = size;\n    texture3D.type = UnsignedByteType;\n    texture3D.magFilter = LinearFilter;\n    texture3D.minFilter = LinearFilter;\n    texture3D.wrapS = ClampToEdgeWrapping;\n    texture3D.wrapT = ClampToEdgeWrapping;\n    texture3D.wrapR = ClampToEdgeWrapping;\n    texture3D.generateMipmaps = false;\n    return {\n      title,\n      size,\n      domainMin,\n      domainMax,\n      texture,\n      texture3D\n    };\n  }\n\n}\n\nexport { LUTCubeLoader };","map":{"version":3,"names":["Loader","FileLoader","Vector3","DataTexture","UnsignedByteType","LinearFilter","ClampToEdgeWrapping","DataTexture3D","LUTCubeLoader","load","url","onLoad","onProgress","onError","loader","manager","setPath","path","setResponseType","text","parse","e","console","error","itemError","str","replace","trim","title","size","domainMin","domainMax","lines","split","data","currIndex","i","l","length","line","substring","sizeToken","parseFloat","Uint8Array","x","y","z","r","g","b","Error","texture","image","width","height","type","magFilter","minFilter","wrapS","wrapT","generateMipmaps","texture3D","depth","wrapR"],"sources":["/home/odin/Desktop/THPâ˜ /Developpeur/Final_Project/pokeland/node_modules/three-stdlib/loaders/LUTCubeLoader.js"],"sourcesContent":["import { Loader, FileLoader, Vector3, DataTexture, UnsignedByteType, LinearFilter, ClampToEdgeWrapping, DataTexture3D } from 'three';\n\n// https://wwwimages2.adobe.com/content/dam/acom/en/products/speedgrade/cc/pdfs/cube-lut-specification-1.0.pdf\nclass LUTCubeLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('text');\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(str) {\n    // Remove empty lines and comments\n    str = str.replace(/^#.*?(\\n|\\r)/gm, '').replace(/^\\s*?(\\n|\\r)/gm, '').trim();\n    let title = null;\n    let size = null;\n    const domainMin = new Vector3(0, 0, 0);\n    const domainMax = new Vector3(1, 1, 1);\n    const lines = str.split(/[\\n\\r]+/g);\n    let data = null;\n    let currIndex = 0;\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i].trim();\n      const split = line.split(/\\s/g);\n\n      switch (split[0]) {\n        case 'TITLE':\n          title = line.substring(7, line.length - 1);\n          break;\n\n        case 'LUT_3D_SIZE':\n          // TODO: A .CUBE LUT file specifies floating point values and could be represented with\n          // more precision than can be captured with Uint8Array.\n          const sizeToken = split[1];\n          size = parseFloat(sizeToken);\n          data = new Uint8Array(size * size * size * 4);\n          break;\n\n        case 'DOMAIN_MIN':\n          domainMin.x = parseFloat(split[1]);\n          domainMin.y = parseFloat(split[2]);\n          domainMin.z = parseFloat(split[3]);\n          break;\n\n        case 'DOMAIN_MAX':\n          domainMax.x = parseFloat(split[1]);\n          domainMax.y = parseFloat(split[2]);\n          domainMax.z = parseFloat(split[3]);\n          break;\n\n        default:\n          const r = parseFloat(split[0]);\n          const g = parseFloat(split[1]);\n          const b = parseFloat(split[2]);\n\n          if (r > 1.0 || r < 0.0 || g > 1.0 || g < 0.0 || b > 1.0 || b < 0.0) {\n            throw new Error('LUTCubeLoader : Non normalized values not supported.');\n          }\n\n          data[currIndex + 0] = r * 255;\n          data[currIndex + 1] = g * 255;\n          data[currIndex + 2] = b * 255;\n          data[currIndex + 3] = 255;\n          currIndex += 4;\n      }\n    }\n\n    const texture = new DataTexture();\n    texture.image.data = data;\n    texture.image.width = size;\n    texture.image.height = size * size;\n    texture.type = UnsignedByteType;\n    texture.magFilter = LinearFilter;\n    texture.minFilter = LinearFilter;\n    texture.wrapS = ClampToEdgeWrapping;\n    texture.wrapT = ClampToEdgeWrapping;\n    texture.generateMipmaps = false;\n    const texture3D = new DataTexture3D();\n    texture3D.image.data = data;\n    texture3D.image.width = size;\n    texture3D.image.height = size;\n    texture3D.image.depth = size;\n    texture3D.type = UnsignedByteType;\n    texture3D.magFilter = LinearFilter;\n    texture3D.minFilter = LinearFilter;\n    texture3D.wrapS = ClampToEdgeWrapping;\n    texture3D.wrapT = ClampToEdgeWrapping;\n    texture3D.wrapR = ClampToEdgeWrapping;\n    texture3D.generateMipmaps = false;\n    return {\n      title,\n      size,\n      domainMin,\n      domainMax,\n      texture,\n      texture3D\n    };\n  }\n\n}\n\nexport { LUTCubeLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}