{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { MeshSurfaceSampler } from 'three-stdlib';\nimport { Vector3, Color, Object3D } from 'three';\n\nconst Sampler = _ref => {\n  let {\n    children,\n    weight,\n    transform,\n    instances,\n    mesh,\n    ...props\n  } = _ref;\n  const group = React.useRef(null);\n  const instancedRef = React.useRef(null);\n  const meshToSampleRef = React.useRef(null);\n  React.useEffect(() => {\n    var _instances$current, _mesh$current;\n\n    instancedRef.current = (_instances$current = instances == null ? void 0 : instances.current) !== null && _instances$current !== void 0 ? _instances$current : group.current.children.find(c => c.hasOwnProperty('instanceMatrix'));\n    meshToSampleRef.current = (_mesh$current = mesh == null ? void 0 : mesh.current) !== null && _mesh$current !== void 0 ? _mesh$current : group.current.children.find(c => c.type === 'Mesh');\n  }, [children, mesh == null ? void 0 : mesh.current, instances == null ? void 0 : instances.current]);\n  React.useEffect(() => {\n    if (typeof meshToSampleRef.current === 'undefined') return;\n    if (typeof instancedRef.current === 'undefined') return;\n    const sampler = new MeshSurfaceSampler(meshToSampleRef.current);\n\n    if (weight) {\n      sampler.setWeightAttribute(weight);\n    }\n\n    sampler.build();\n    const position = new Vector3();\n    const normal = new Vector3();\n    const color = new Color();\n    const dummy = new Object3D();\n    meshToSampleRef.current.updateMatrixWorld(true);\n\n    for (let i = 0; i < instancedRef.current.count; i++) {\n      sampler.sample(position, normal, color);\n\n      if (typeof transform === 'function') {\n        transform({\n          dummy,\n          sampledMesh: meshToSampleRef.current,\n          position,\n          normal,\n          color\n        }, i);\n      } else {\n        dummy.position.copy(position);\n      }\n\n      dummy.updateMatrix();\n      instancedRef.current.setMatrixAt(i, dummy.matrix);\n    }\n\n    instancedRef.current.instanceMatrix.needsUpdate = true;\n  }, [children, mesh == null ? void 0 : mesh.current, instances == null ? void 0 : instances.current]);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: group\n  }, props), children);\n};\n\nexport { Sampler };","map":{"version":3,"names":["_extends","React","MeshSurfaceSampler","Vector3","Color","Object3D","Sampler","children","weight","transform","instances","mesh","props","group","useRef","instancedRef","meshToSampleRef","useEffect","_instances$current","_mesh$current","current","find","c","hasOwnProperty","type","sampler","setWeightAttribute","build","position","normal","color","dummy","updateMatrixWorld","i","count","sample","sampledMesh","copy","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","createElement","ref"],"sources":["/home/odin/Desktop/THPâ˜ /Developpeur/Final_Project/pokeland/node_modules/@react-three/drei/core/Sampler.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { MeshSurfaceSampler } from 'three-stdlib';\nimport { Vector3, Color, Object3D } from 'three';\n\nconst Sampler = ({\n  children,\n  weight,\n  transform,\n  instances,\n  mesh,\n  ...props\n}) => {\n  const group = React.useRef(null);\n  const instancedRef = React.useRef(null);\n  const meshToSampleRef = React.useRef(null);\n  React.useEffect(() => {\n    var _instances$current, _mesh$current;\n\n    instancedRef.current = (_instances$current = instances == null ? void 0 : instances.current) !== null && _instances$current !== void 0 ? _instances$current : group.current.children.find(c => c.hasOwnProperty('instanceMatrix'));\n    meshToSampleRef.current = (_mesh$current = mesh == null ? void 0 : mesh.current) !== null && _mesh$current !== void 0 ? _mesh$current : group.current.children.find(c => c.type === 'Mesh');\n  }, [children, mesh == null ? void 0 : mesh.current, instances == null ? void 0 : instances.current]);\n  React.useEffect(() => {\n    if (typeof meshToSampleRef.current === 'undefined') return;\n    if (typeof instancedRef.current === 'undefined') return;\n    const sampler = new MeshSurfaceSampler(meshToSampleRef.current);\n\n    if (weight) {\n      sampler.setWeightAttribute(weight);\n    }\n\n    sampler.build();\n    const position = new Vector3();\n    const normal = new Vector3();\n    const color = new Color();\n    const dummy = new Object3D();\n    meshToSampleRef.current.updateMatrixWorld(true);\n\n    for (let i = 0; i < instancedRef.current.count; i++) {\n      sampler.sample(position, normal, color);\n\n      if (typeof transform === 'function') {\n        transform({\n          dummy,\n          sampledMesh: meshToSampleRef.current,\n          position,\n          normal,\n          color\n        }, i);\n      } else {\n        dummy.position.copy(position);\n      }\n\n      dummy.updateMatrix();\n      instancedRef.current.setMatrixAt(i, dummy.matrix);\n    }\n\n    instancedRef.current.instanceMatrix.needsUpdate = true;\n  }, [children, mesh == null ? void 0 : mesh.current, instances == null ? void 0 : instances.current]);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: group\n  }, props), children);\n};\n\nexport { Sampler };\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,kBAAT,QAAmC,cAAnC;AACA,SAASC,OAAT,EAAkBC,KAAlB,EAAyBC,QAAzB,QAAyC,OAAzC;;AAEA,MAAMC,OAAO,GAAG,QAOV;EAAA,IAPW;IACfC,QADe;IAEfC,MAFe;IAGfC,SAHe;IAIfC,SAJe;IAKfC,IALe;IAMf,GAAGC;EANY,CAOX;EACJ,MAAMC,KAAK,GAAGZ,KAAK,CAACa,MAAN,CAAa,IAAb,CAAd;EACA,MAAMC,YAAY,GAAGd,KAAK,CAACa,MAAN,CAAa,IAAb,CAArB;EACA,MAAME,eAAe,GAAGf,KAAK,CAACa,MAAN,CAAa,IAAb,CAAxB;EACAb,KAAK,CAACgB,SAAN,CAAgB,MAAM;IACpB,IAAIC,kBAAJ,EAAwBC,aAAxB;;IAEAJ,YAAY,CAACK,OAAb,GAAuB,CAACF,kBAAkB,GAAGR,SAAS,IAAI,IAAb,GAAoB,KAAK,CAAzB,GAA6BA,SAAS,CAACU,OAA7D,MAA0E,IAA1E,IAAkFF,kBAAkB,KAAK,KAAK,CAA9G,GAAkHA,kBAAlH,GAAuIL,KAAK,CAACO,OAAN,CAAcb,QAAd,CAAuBc,IAAvB,CAA4BC,CAAC,IAAIA,CAAC,CAACC,cAAF,CAAiB,gBAAjB,CAAjC,CAA9J;IACAP,eAAe,CAACI,OAAhB,GAA0B,CAACD,aAAa,GAAGR,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAACS,OAA9C,MAA2D,IAA3D,IAAmED,aAAa,KAAK,KAAK,CAA1F,GAA8FA,aAA9F,GAA8GN,KAAK,CAACO,OAAN,CAAcb,QAAd,CAAuBc,IAAvB,CAA4BC,CAAC,IAAIA,CAAC,CAACE,IAAF,KAAW,MAA5C,CAAxI;EACD,CALD,EAKG,CAACjB,QAAD,EAAWI,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAACS,OAAxC,EAAiDV,SAAS,IAAI,IAAb,GAAoB,KAAK,CAAzB,GAA6BA,SAAS,CAACU,OAAxF,CALH;EAMAnB,KAAK,CAACgB,SAAN,CAAgB,MAAM;IACpB,IAAI,OAAOD,eAAe,CAACI,OAAvB,KAAmC,WAAvC,EAAoD;IACpD,IAAI,OAAOL,YAAY,CAACK,OAApB,KAAgC,WAApC,EAAiD;IACjD,MAAMK,OAAO,GAAG,IAAIvB,kBAAJ,CAAuBc,eAAe,CAACI,OAAvC,CAAhB;;IAEA,IAAIZ,MAAJ,EAAY;MACViB,OAAO,CAACC,kBAAR,CAA2BlB,MAA3B;IACD;;IAEDiB,OAAO,CAACE,KAAR;IACA,MAAMC,QAAQ,GAAG,IAAIzB,OAAJ,EAAjB;IACA,MAAM0B,MAAM,GAAG,IAAI1B,OAAJ,EAAf;IACA,MAAM2B,KAAK,GAAG,IAAI1B,KAAJ,EAAd;IACA,MAAM2B,KAAK,GAAG,IAAI1B,QAAJ,EAAd;IACAW,eAAe,CAACI,OAAhB,CAAwBY,iBAAxB,CAA0C,IAA1C;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,YAAY,CAACK,OAAb,CAAqBc,KAAzC,EAAgDD,CAAC,EAAjD,EAAqD;MACnDR,OAAO,CAACU,MAAR,CAAeP,QAAf,EAAyBC,MAAzB,EAAiCC,KAAjC;;MAEA,IAAI,OAAOrB,SAAP,KAAqB,UAAzB,EAAqC;QACnCA,SAAS,CAAC;UACRsB,KADQ;UAERK,WAAW,EAAEpB,eAAe,CAACI,OAFrB;UAGRQ,QAHQ;UAIRC,MAJQ;UAKRC;QALQ,CAAD,EAMNG,CANM,CAAT;MAOD,CARD,MAQO;QACLF,KAAK,CAACH,QAAN,CAAeS,IAAf,CAAoBT,QAApB;MACD;;MAEDG,KAAK,CAACO,YAAN;MACAvB,YAAY,CAACK,OAAb,CAAqBmB,WAArB,CAAiCN,CAAjC,EAAoCF,KAAK,CAACS,MAA1C;IACD;;IAEDzB,YAAY,CAACK,OAAb,CAAqBqB,cAArB,CAAoCC,WAApC,GAAkD,IAAlD;EACD,CApCD,EAoCG,CAACnC,QAAD,EAAWI,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAACS,OAAxC,EAAiDV,SAAS,IAAI,IAAb,GAAoB,KAAK,CAAzB,GAA6BA,SAAS,CAACU,OAAxF,CApCH;EAqCA,OAAO,aAAanB,KAAK,CAAC0C,aAAN,CAAoB,OAApB,EAA6B3C,QAAQ,CAAC;IACxD4C,GAAG,EAAE/B;EADmD,CAAD,EAEtDD,KAFsD,CAArC,EAETL,QAFS,CAApB;AAGD,CAzDD;;AA2DA,SAASD,OAAT"},"metadata":{},"sourceType":"module"}