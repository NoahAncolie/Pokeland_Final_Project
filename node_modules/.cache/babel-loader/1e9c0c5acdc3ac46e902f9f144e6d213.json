{"ast":null,"code":"import { fromType } from '../Nodes.js';\nimport { Loader } from 'three';\n\nclass NodeLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.textures = {};\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(JSON.parse(text)));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parseNodes(json) {\n    const nodes = {};\n\n    if (json !== undefined) {\n      for (const nodeJSON of json) {\n        const {\n          uuid,\n          type\n        } = nodeJSON;\n        nodes[uuid] = fromType(type);\n        nodes[uuid].uuid = uuid;\n      }\n\n      const meta = {\n        nodes,\n        textures: this.textures\n      };\n\n      for (const nodeJSON of json) {\n        nodeJSON.meta = meta;\n        const node = nodes[nodeJSON.uuid];\n        node.deserialize(nodeJSON);\n        delete nodeJSON.meta;\n      }\n    }\n\n    return nodes;\n  }\n\n  parse(json) {\n    const node = fromType(type);\n    node.uuid = json.uuid;\n    const nodes = this.parseNodes(json.inputNodes);\n    const meta = {\n      nodes,\n      textures: this.textures\n    };\n    json.meta = meta;\n    node.deserialize(json);\n    delete json.meta;\n    return node;\n  }\n\n  setTextures(value) {\n    this.textures = value;\n    return this;\n  }\n\n}\n\nexport default NodeLoader;","map":{"version":3,"names":["fromType","Loader","NodeLoader","constructor","manager","textures","load","url","onLoad","onProgress","onError","loader","FileLoader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","JSON","e","console","error","itemError","parseNodes","json","nodes","undefined","nodeJSON","uuid","type","meta","node","deserialize","inputNodes","setTextures","value"],"sources":["/home/odin/Desktop/THPâ˜ /Developpeur/Final_Project/pokeland/node_modules/three-stdlib/nodes/loaders/NodeLoader.js"],"sourcesContent":["import { fromType } from '../Nodes.js';\nimport { Loader } from 'three';\n\nclass NodeLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.textures = {};\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(JSON.parse(text)));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parseNodes(json) {\n    const nodes = {};\n\n    if (json !== undefined) {\n      for (const nodeJSON of json) {\n        const {\n          uuid,\n          type\n        } = nodeJSON;\n        nodes[uuid] = fromType(type);\n        nodes[uuid].uuid = uuid;\n      }\n\n      const meta = {\n        nodes,\n        textures: this.textures\n      };\n\n      for (const nodeJSON of json) {\n        nodeJSON.meta = meta;\n        const node = nodes[nodeJSON.uuid];\n        node.deserialize(nodeJSON);\n        delete nodeJSON.meta;\n      }\n    }\n\n    return nodes;\n  }\n\n  parse(json) {\n    const node = fromType(type);\n    node.uuid = json.uuid;\n    const nodes = this.parseNodes(json.inputNodes);\n    const meta = {\n      nodes,\n      textures: this.textures\n    };\n    json.meta = meta;\n    node.deserialize(json);\n    delete json.meta;\n    return node;\n  }\n\n  setTextures(value) {\n    this.textures = value;\n    return this;\n  }\n\n}\n\nexport default NodeLoader;\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,MAAT,QAAuB,OAAvB;;AAEA,MAAMC,UAAN,SAAyBD,MAAzB,CAAgC;EAC9BE,WAAW,CAACC,OAAD,EAAU;IACnB,MAAMA,OAAN;IACA,KAAKC,QAAL,GAAgB,EAAhB;EACD;;EAEDC,IAAI,CAACC,GAAD,EAAMC,MAAN,EAAcC,UAAd,EAA0BC,OAA1B,EAAmC;IACrC,MAAMC,MAAM,GAAG,IAAIC,UAAJ,CAAe,KAAKR,OAApB,CAAf;IACAO,MAAM,CAACE,OAAP,CAAe,KAAKC,IAApB;IACAH,MAAM,CAACI,gBAAP,CAAwB,KAAKC,aAA7B;IACAL,MAAM,CAACM,kBAAP,CAA0B,KAAKC,eAA/B;IACAP,MAAM,CAACL,IAAP,CAAYC,GAAZ,EAAiBY,IAAI,IAAI;MACvB,IAAI;QACFX,MAAM,CAAC,KAAKY,KAAL,CAAWC,IAAI,CAACD,KAAL,CAAWD,IAAX,CAAX,CAAD,CAAN;MACD,CAFD,CAEE,OAAOG,CAAP,EAAU;QACV,IAAIZ,OAAJ,EAAa;UACXA,OAAO,CAACY,CAAD,CAAP;QACD,CAFD,MAEO;UACLC,OAAO,CAACC,KAAR,CAAcF,CAAd;QACD;;QAED,KAAKlB,OAAL,CAAaqB,SAAb,CAAuBlB,GAAvB;MACD;IACF,CAZD,EAYGE,UAZH,EAYeC,OAZf;EAaD;;EAEDgB,UAAU,CAACC,IAAD,EAAO;IACf,MAAMC,KAAK,GAAG,EAAd;;IAEA,IAAID,IAAI,KAAKE,SAAb,EAAwB;MACtB,KAAK,MAAMC,QAAX,IAAuBH,IAAvB,EAA6B;QAC3B,MAAM;UACJI,IADI;UAEJC;QAFI,IAGFF,QAHJ;QAIAF,KAAK,CAACG,IAAD,CAAL,GAAc/B,QAAQ,CAACgC,IAAD,CAAtB;QACAJ,KAAK,CAACG,IAAD,CAAL,CAAYA,IAAZ,GAAmBA,IAAnB;MACD;;MAED,MAAME,IAAI,GAAG;QACXL,KADW;QAEXvB,QAAQ,EAAE,KAAKA;MAFJ,CAAb;;MAKA,KAAK,MAAMyB,QAAX,IAAuBH,IAAvB,EAA6B;QAC3BG,QAAQ,CAACG,IAAT,GAAgBA,IAAhB;QACA,MAAMC,IAAI,GAAGN,KAAK,CAACE,QAAQ,CAACC,IAAV,CAAlB;QACAG,IAAI,CAACC,WAAL,CAAiBL,QAAjB;QACA,OAAOA,QAAQ,CAACG,IAAhB;MACD;IACF;;IAED,OAAOL,KAAP;EACD;;EAEDR,KAAK,CAACO,IAAD,EAAO;IACV,MAAMO,IAAI,GAAGlC,QAAQ,CAACgC,IAAD,CAArB;IACAE,IAAI,CAACH,IAAL,GAAYJ,IAAI,CAACI,IAAjB;IACA,MAAMH,KAAK,GAAG,KAAKF,UAAL,CAAgBC,IAAI,CAACS,UAArB,CAAd;IACA,MAAMH,IAAI,GAAG;MACXL,KADW;MAEXvB,QAAQ,EAAE,KAAKA;IAFJ,CAAb;IAIAsB,IAAI,CAACM,IAAL,GAAYA,IAAZ;IACAC,IAAI,CAACC,WAAL,CAAiBR,IAAjB;IACA,OAAOA,IAAI,CAACM,IAAZ;IACA,OAAOC,IAAP;EACD;;EAEDG,WAAW,CAACC,KAAD,EAAQ;IACjB,KAAKjC,QAAL,GAAgBiC,KAAhB;IACA,OAAO,IAAP;EACD;;AAxE6B;;AA4EhC,eAAepC,UAAf"},"metadata":{},"sourceType":"module"}