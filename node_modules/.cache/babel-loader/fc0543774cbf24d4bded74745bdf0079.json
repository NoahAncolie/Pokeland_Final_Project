{"ast":null,"code":"import { Vector3, Ray, Loader, FileLoader, MeshStandardMaterial, LineBasicMaterial, ShaderMaterial, UniformsUtils, UniformsLib, Color, BufferGeometry, BufferAttribute, LineSegments, Mesh, Matrix4, Group } from 'three'; // Note: \"MATERIAL\" tag (e.g. GLITTER, SPECKLE) is not implemented\n\nconst FINISH_TYPE_DEFAULT = 0;\nconst FINISH_TYPE_CHROME = 1;\nconst FINISH_TYPE_PEARLESCENT = 2;\nconst FINISH_TYPE_RUBBER = 3;\nconst FINISH_TYPE_MATTE_METALLIC = 4;\nconst FINISH_TYPE_METAL = 5; // State machine to search a subobject path.\n// The LDraw standard establishes these various possible subfolders.\n\nconst FILE_LOCATION_AS_IS = 0;\nconst FILE_LOCATION_TRY_PARTS = 1;\nconst FILE_LOCATION_TRY_P = 2;\nconst FILE_LOCATION_TRY_MODELS = 3;\nconst FILE_LOCATION_TRY_RELATIVE = 4;\nconst FILE_LOCATION_TRY_ABSOLUTE = 5;\nconst FILE_LOCATION_NOT_FOUND = 6;\nconst MAIN_COLOUR_CODE = '16';\nconst MAIN_EDGE_COLOUR_CODE = '24';\n\nconst _tempVec0 = new Vector3();\n\nconst _tempVec1 = new Vector3();\n\nclass LDrawConditionalLineMaterial extends ShaderMaterial {\n  constructor(parameters) {\n    super({\n      uniforms: UniformsUtils.merge([UniformsLib.fog, {\n        diffuse: {\n          value: new Color()\n        },\n        opacity: {\n          value: 1.0\n        }\n      }]),\n      vertexShader:\n      /* glsl */\n      `\n        attribute vec3 control0;\n        attribute vec3 control1;\n        attribute vec3 direction;\n        varying float discardFlag;\n\n        #include <common>\n        #include <color_pars_vertex>\n        #include <fog_pars_vertex>\n        #include <logdepthbuf_pars_vertex>\n        #include <clipping_planes_pars_vertex>\n\n        void main() {\n          #include <color_vertex>\n\n          vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n          gl_Position = projectionMatrix * mvPosition;\n\n          // Transform the line segment ends and control points into camera clip space\n          vec4 c0 = projectionMatrix * modelViewMatrix * vec4(control0, 1.0);\n          vec4 c1 = projectionMatrix * modelViewMatrix * vec4(control1, 1.0);\n          vec4 p0 = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          vec4 p1 = projectionMatrix * modelViewMatrix * vec4(position + direction, 1.0);\n\n          c0.xy /= c0.w;\n          c1.xy /= c1.w;\n          p0.xy /= p0.w;\n          p1.xy /= p1.w;\n\n          // Get the direction of the segment and an orthogonal vector\n          vec2 dir = p1.xy - p0.xy;\n          vec2 norm = vec2(-dir.y, dir.x);\n\n          // Get control point directions from the line\n          vec2 c0dir = c0.xy - p1.xy;\n          vec2 c1dir = c1.xy - p1.xy;\n\n          // If the vectors to the controls points are pointed in different directions away\n          // from the line segment then the line should not be drawn.\n          float d0 = dot(normalize(norm), normalize(c0dir));\n          float d1 = dot(normalize(norm), normalize(c1dir));\n          discardFlag = float(sign(d0) != sign(d1));\n\n          #include <logdepthbuf_vertex>\n          #include <clipping_planes_vertex>\n          #include <fog_vertex>\n        }\n      `,\n      fragmentShader:\n      /* glsl */\n      `\n        uniform vec3 diffuse;\n        uniform float opacity;\n        varying float discardFlag;\n\n        #include <common>\n        #include <color_pars_fragment>\n        #include <fog_pars_fragment>\n        #include <logdepthbuf_pars_fragment>\n        #include <clipping_planes_pars_fragment>\n\n        void main() {\n          if (discardFlag > 0.5) discard;\n\n          #include <clipping_planes_fragment>\n          vec3 outgoingLight = vec3(0.0);\n          vec4 diffuseColor = vec4(diffuse, opacity);\n          #include <logdepthbuf_fragment>\n          #include <color_fragment>\n          outgoingLight = diffuseColor.rgb; // simple shader\n          gl_FragColor = vec4(outgoingLight, diffuseColor.a);\n          #include <tonemapping_fragment>\n          #include <encodings_fragment>\n          #include <fog_fragment>\n          #include <premultiplied_alpha_fragment>\n        }\n      `\n    });\n    Object.defineProperties(this, {\n      opacity: {\n        get: function () {\n          return this.uniforms.opacity.value;\n        },\n        set: function (value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      color: {\n        get: function () {\n          return this.uniforms.diffuse.value;\n        }\n      }\n    });\n    this.setValues(parameters);\n    this.isLDrawConditionalLineMaterial = true;\n  }\n\n}\n\nclass ConditionalLineSegments extends LineSegments {\n  constructor(geometry, material) {\n    super(geometry, material);\n    this.isConditionalLine = true;\n  }\n\n}\n\nfunction generateFaceNormals(faces) {\n  for (let i = 0, l = faces.length; i < l; i++) {\n    const face = faces[i];\n    const vertices = face.vertices;\n    const v0 = vertices[0];\n    const v1 = vertices[1];\n    const v2 = vertices[2];\n\n    _tempVec0.subVectors(v1, v0);\n\n    _tempVec1.subVectors(v2, v1);\n\n    face.faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n  }\n}\n\nconst _ray = new Ray();\n\nfunction smoothNormals(faces, lineSegments) {\n  let checkSubSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // NOTE: 1e2 is pretty coarse but was chosen to quantize the resulting value because\n  // it allows edges to be smoothed as expected (see minifig arms).\n  // --\n  // And the vector values are initialize multiplied by 1 + 1e-10 to account for floating\n  // point errors on vertices along quantization boundaries. Ie after matrix multiplication\n  // vertices that should be merged might be set to \"1.7\" and \"1.6999...\" meaning they won't\n  // get merged. This added epsilon attempts to push these error values to the same quantized\n  // value for the sake of hashing. See \"AT-ST mini\" dishes. See mrdoob/three#23169.\n  const hashMultiplier = (1 + 1e-10) * 1e2;\n\n  function hashVertex(v) {\n    const x = ~~(v.x * hashMultiplier);\n    const y = ~~(v.y * hashMultiplier);\n    const z = ~~(v.z * hashMultiplier);\n    return `${x},${y},${z}`;\n  }\n\n  function hashEdge(v0, v1) {\n    return `${hashVertex(v0)}_${hashVertex(v1)}`;\n  } // converts the two vertices to a ray with a normalized direction and origin of 0, 0, 0 projected\n  // onto the original line.\n\n\n  function toNormalizedRay(v0, v1, targetRay) {\n    targetRay.direction.subVectors(v1, v0).normalize();\n    const scalar = v0.dot(targetRay.direction);\n    targetRay.origin.copy(v0).addScaledVector(targetRay.direction, -scalar);\n    return targetRay;\n  }\n\n  function hashRay(ray) {\n    return hashEdge(ray.origin, ray.direction);\n  }\n\n  const hardEdges = new Set();\n  const hardEdgeRays = new Map();\n  const halfEdgeList = {};\n  const normals = []; // Save the list of hard edges by hash\n\n  for (let i = 0, l = lineSegments.length; i < l; i++) {\n    const ls = lineSegments[i];\n    const vertices = ls.vertices;\n    const v0 = vertices[0];\n    const v1 = vertices[1];\n    hardEdges.add(hashEdge(v0, v1));\n    hardEdges.add(hashEdge(v1, v0)); // only generate the hard edge ray map if we're checking subsegments because it's more expensive to check\n    // and requires more memory.\n\n    if (checkSubSegments) {\n      // add both ray directions to the map\n      const ray = toNormalizedRay(v0, v1, new Ray());\n      const rh1 = hashRay(ray);\n\n      if (!hardEdgeRays.has(rh1)) {\n        toNormalizedRay(v1, v0, ray);\n        const rh2 = hashRay(ray);\n        const info = {\n          ray,\n          distances: []\n        };\n        hardEdgeRays.set(rh1, info);\n        hardEdgeRays.set(rh2, info);\n      } // store both segments ends in min, max order in the distances array to check if a face edge is a\n      // subsegment later.\n\n\n      const info = hardEdgeRays.get(rh1);\n      let d0 = info.ray.direction.dot(v0);\n      let d1 = info.ray.direction.dot(v1);\n\n      if (d0 > d1) {\n        [d0, d1] = [d1, d0];\n      }\n\n      info.distances.push(d0, d1);\n    }\n  } // track the half edges associated with each triangle\n\n\n  for (let i = 0, l = faces.length; i < l; i++) {\n    const tri = faces[i];\n    const vertices = tri.vertices;\n    const vertCount = vertices.length;\n\n    for (let i2 = 0; i2 < vertCount; i2++) {\n      const index = i2;\n      const next = (i2 + 1) % vertCount;\n      const v0 = vertices[index];\n      const v1 = vertices[next];\n      const hash = hashEdge(v0, v1); // don't add the triangle if the edge is supposed to be hard\n\n      if (hardEdges.has(hash)) {\n        continue;\n      } // if checking subsegments then check to see if this edge lies on a hard edge ray and whether its within any ray bounds\n\n\n      if (checkSubSegments) {\n        toNormalizedRay(v0, v1, _ray);\n        const rayHash = hashRay(_ray);\n\n        if (hardEdgeRays.has(rayHash)) {\n          const info = hardEdgeRays.get(rayHash);\n          const {\n            ray,\n            distances\n          } = info;\n          let d0 = ray.direction.dot(v0);\n          let d1 = ray.direction.dot(v1);\n\n          if (d0 > d1) {\n            [d0, d1] = [d1, d0];\n          } // return early if the face edge is found to be a subsegment of a line edge meaning the edge will have \"hard\" normals\n\n\n          let found = false;\n\n          for (let i = 0, l = distances.length; i < l; i += 2) {\n            if (d0 >= distances[i] && d1 <= distances[i + 1]) {\n              found = true;\n              break;\n            }\n          }\n\n          if (found) {\n            continue;\n          }\n        }\n      }\n\n      const info = {\n        index: index,\n        tri: tri\n      };\n      halfEdgeList[hash] = info;\n    }\n  } // Iterate until we've tried to connect all faces to share normals\n\n\n  while (true) {\n    // Stop if there are no more faces left\n    let halfEdge = null;\n\n    for (const key in halfEdgeList) {\n      halfEdge = halfEdgeList[key];\n      break;\n    }\n\n    if (halfEdge === null) {\n      break;\n    } // Exhaustively find all connected faces\n\n\n    const queue = [halfEdge];\n\n    while (queue.length > 0) {\n      // initialize all vertex normals in this triangle\n      const tri = queue.pop().tri;\n      const vertices = tri.vertices;\n      const vertNormals = tri.normals;\n      const faceNormal = tri.faceNormal; // Check if any edge is connected to another triangle edge\n\n      const vertCount = vertices.length;\n\n      for (let i2 = 0; i2 < vertCount; i2++) {\n        const index = i2;\n        const next = (i2 + 1) % vertCount;\n        const v0 = vertices[index];\n        const v1 = vertices[next]; // delete this triangle from the list so it won't be found again\n\n        const hash = hashEdge(v0, v1);\n        delete halfEdgeList[hash];\n        const reverseHash = hashEdge(v1, v0);\n        const otherInfo = halfEdgeList[reverseHash];\n\n        if (otherInfo) {\n          const otherTri = otherInfo.tri;\n          const otherIndex = otherInfo.index;\n          const otherNormals = otherTri.normals;\n          const otherVertCount = otherNormals.length;\n          const otherFaceNormal = otherTri.faceNormal; // NOTE: If the angle between faces is > 67.5 degrees then assume it's\n          // hard edge. There are some cases where the line segments do not line up exactly\n          // with or span multiple triangle edges (see Lunar Vehicle wheels).\n\n          if (Math.abs(otherTri.faceNormal.dot(tri.faceNormal)) < 0.25) {\n            continue;\n          } // if this triangle has already been traversed then it won't be in\n          // the halfEdgeList. If it has not then add it to the queue and delete\n          // it so it won't be found again.\n\n\n          if (reverseHash in halfEdgeList) {\n            queue.push(otherInfo);\n            delete halfEdgeList[reverseHash];\n          } // share the first normal\n\n\n          const otherNext = (otherIndex + 1) % otherVertCount;\n\n          if (vertNormals[index] && otherNormals[otherNext] && vertNormals[index] !== otherNormals[otherNext]) {\n            otherNormals[otherNext].norm.add(vertNormals[index].norm);\n            vertNormals[index].norm = otherNormals[otherNext].norm;\n          }\n\n          let sharedNormal1 = vertNormals[index] || otherNormals[otherNext];\n\n          if (sharedNormal1 === null) {\n            // it's possible to encounter an edge of a triangle that has already been traversed meaning\n            // both edges already have different normals defined and shared. To work around this we create\n            // a wrapper object so when those edges are merged the normals can be updated everywhere.\n            sharedNormal1 = {\n              norm: new Vector3()\n            };\n            normals.push(sharedNormal1.norm);\n          }\n\n          if (vertNormals[index] === null) {\n            vertNormals[index] = sharedNormal1;\n            sharedNormal1.norm.add(faceNormal);\n          }\n\n          if (otherNormals[otherNext] === null) {\n            otherNormals[otherNext] = sharedNormal1;\n            sharedNormal1.norm.add(otherFaceNormal);\n          } // share the second normal\n\n\n          if (vertNormals[next] && otherNormals[otherIndex] && vertNormals[next] !== otherNormals[otherIndex]) {\n            otherNormals[otherIndex].norm.add(vertNormals[next].norm);\n            vertNormals[next].norm = otherNormals[otherIndex].norm;\n          }\n\n          let sharedNormal2 = vertNormals[next] || otherNormals[otherIndex];\n\n          if (sharedNormal2 === null) {\n            sharedNormal2 = {\n              norm: new Vector3()\n            };\n            normals.push(sharedNormal2.norm);\n          }\n\n          if (vertNormals[next] === null) {\n            vertNormals[next] = sharedNormal2;\n            sharedNormal2.norm.add(faceNormal);\n          }\n\n          if (otherNormals[otherIndex] === null) {\n            otherNormals[otherIndex] = sharedNormal2;\n            sharedNormal2.norm.add(otherFaceNormal);\n          }\n        }\n      }\n    }\n  } // The normals of each face have been added up so now we average them by normalizing the vector.\n\n\n  for (let i = 0, l = normals.length; i < l; i++) {\n    normals[i].normalize();\n  }\n}\n\nfunction isPartType(type) {\n  return type === 'Part' || type === 'Unofficial_Part';\n}\n\nfunction isPrimitiveType(type) {\n  return /primitive/i.test(type) || type === 'Subpart';\n}\n\nclass LineParser {\n  constructor(line, lineNumber) {\n    this.line = line;\n    this.lineLength = line.length;\n    this.currentCharIndex = 0;\n    this.currentChar = ' ';\n    this.lineNumber = lineNumber;\n  }\n\n  seekNonSpace() {\n    while (this.currentCharIndex < this.lineLength) {\n      this.currentChar = this.line.charAt(this.currentCharIndex);\n\n      if (this.currentChar !== ' ' && this.currentChar !== '\\t') {\n        return;\n      }\n\n      this.currentCharIndex++;\n    }\n  }\n\n  getToken() {\n    const pos0 = this.currentCharIndex++; // Seek space\n\n    while (this.currentCharIndex < this.lineLength) {\n      this.currentChar = this.line.charAt(this.currentCharIndex);\n\n      if (this.currentChar === ' ' || this.currentChar === '\\t') {\n        break;\n      }\n\n      this.currentCharIndex++;\n    }\n\n    const pos1 = this.currentCharIndex;\n    this.seekNonSpace();\n    return this.line.substring(pos0, pos1);\n  }\n\n  getVector() {\n    return new Vector3(parseFloat(this.getToken()), parseFloat(this.getToken()), parseFloat(this.getToken()));\n  }\n\n  getRemainingString() {\n    return this.line.substring(this.currentCharIndex, this.lineLength);\n  }\n\n  isAtTheEnd() {\n    return this.currentCharIndex >= this.lineLength;\n  }\n\n  setToEnd() {\n    this.currentCharIndex = this.lineLength;\n  }\n\n  getLineNumberString() {\n    return this.lineNumber >= 0 ? ' at line ' + this.lineNumber : '';\n  }\n\n} // Fetches and parses an intermediate representation of LDraw parts files.\n\n\nclass LDrawParsedCache {\n  constructor(loader) {\n    this.loader = loader;\n    this._cache = {};\n  }\n\n  cloneResult(original) {\n    const result = {}; // vertices are transformed and normals computed before being converted to geometry\n    // so these pieces must be cloned.\n\n    result.faces = original.faces.map(face => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map(v => v.clone()),\n        normals: face.normals.map(() => null),\n        faceNormal: null\n      };\n    });\n    result.conditionalSegments = original.conditionalSegments.map(face => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map(v => v.clone()),\n        controlPoints: face.controlPoints.map(v => v.clone())\n      };\n    });\n    result.lineSegments = original.lineSegments.map(face => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map(v => v.clone())\n      };\n    }); // none if this is subsequently modified\n\n    result.type = original.type;\n    result.category = original.category;\n    result.keywords = original.keywords;\n    result.subobjects = original.subobjects;\n    result.totalFaces = original.totalFaces;\n    result.startingConstructionStep = original.startingConstructionStep;\n    result.materials = original.materials;\n    result.group = null;\n    return result;\n  }\n\n  async fetchData(fileName) {\n    let triedLowerCase = false;\n    let locationState = FILE_LOCATION_AS_IS;\n\n    while (locationState !== FILE_LOCATION_NOT_FOUND) {\n      let subobjectURL = fileName;\n\n      switch (locationState) {\n        case FILE_LOCATION_AS_IS:\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_PARTS:\n          subobjectURL = 'parts/' + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_P:\n          subobjectURL = 'p/' + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_MODELS:\n          subobjectURL = 'models/' + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_RELATIVE:\n          subobjectURL = fileName.substring(0, fileName.lastIndexOf('/') + 1) + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_ABSOLUTE:\n          if (triedLowerCase) {\n            // Try absolute path\n            locationState = FILE_LOCATION_NOT_FOUND;\n          } else {\n            // Next attempt is lower case\n            fileName = fileName.toLowerCase();\n            subobjectURL = fileName;\n            triedLowerCase = true;\n            locationState = FILE_LOCATION_AS_IS;\n          }\n\n          break;\n      }\n\n      const loader = this.loader;\n      const fileLoader = new FileLoader(loader.manager);\n      fileLoader.setPath(loader.partsLibraryPath);\n      fileLoader.setRequestHeader(loader.requestHeader);\n      fileLoader.setWithCredentials(loader.withCredentials);\n\n      try {\n        const text = await fileLoader.loadAsync(subobjectURL);\n        return text;\n      } catch {\n        continue;\n      }\n    }\n\n    throw new Error('LDrawLoader: Subobject \"' + fileName + '\" could not be loaded.');\n  }\n\n  parse(text) {\n    let fileName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const loader = this.loader; // final results\n\n    const faces = [];\n    const lineSegments = [];\n    const conditionalSegments = [];\n    const subobjects = [];\n    const materials = {};\n\n    const getLocalMaterial = colorCode => {\n      return materials[colorCode] || null;\n    };\n\n    let type = 'Model';\n    let category = null;\n    let keywords = null;\n    let totalFaces = 0; // split into lines\n\n    if (text.indexOf('\\r\\n') !== -1) {\n      // This is faster than String.split with regex that splits on both\n      text = text.replace(/\\r\\n/g, '\\n');\n    }\n\n    const lines = text.split('\\n');\n    const numLines = lines.length;\n    let parsingEmbeddedFiles = false;\n    let currentEmbeddedFileName = null;\n    let currentEmbeddedText = null;\n    let bfcCertified = false;\n    let bfcCCW = true;\n    let bfcInverted = false;\n    let bfcCull = true;\n    let startingConstructionStep = false; // Parse all line commands\n\n    for (let lineIndex = 0; lineIndex < numLines; lineIndex++) {\n      const line = lines[lineIndex];\n      if (line.length === 0) continue;\n\n      if (parsingEmbeddedFiles) {\n        if (line.startsWith('0 FILE ')) {\n          // Save previous embedded file in the cache\n          this.setData(currentEmbeddedFileName, currentEmbeddedText); // New embedded text file\n\n          currentEmbeddedFileName = line.substring(7);\n          currentEmbeddedText = '';\n        } else {\n          currentEmbeddedText += line + '\\n';\n        }\n\n        continue;\n      }\n\n      const lp = new LineParser(line, lineIndex + 1);\n      lp.seekNonSpace();\n\n      if (lp.isAtTheEnd()) {\n        // Empty line\n        continue;\n      } // Parse the line type\n\n\n      const lineType = lp.getToken();\n      let material;\n      let colorCode;\n      let segment;\n      let ccw;\n      let doubleSided;\n      let v0, v1, v2, v3, c0, c1;\n\n      switch (lineType) {\n        // Line type 0: Comment or META\n        case '0':\n          // Parse meta directive\n          const meta = lp.getToken();\n\n          if (meta) {\n            switch (meta) {\n              case '!LDRAW_ORG':\n                type = lp.getToken();\n                break;\n\n              case '!COLOUR':\n                material = loader.parseColorMetaDirective(lp);\n\n                if (material) {\n                  materials[material.userData.code] = material;\n                } else {\n                  console.warn('LDrawLoader: Error parsing material' + lp.getLineNumberString());\n                }\n\n                break;\n\n              case '!CATEGORY':\n                category = lp.getToken();\n                break;\n\n              case '!KEYWORDS':\n                const newKeywords = lp.getRemainingString().split(',');\n\n                if (newKeywords.length > 0) {\n                  if (!keywords) {\n                    keywords = [];\n                  }\n\n                  newKeywords.forEach(function (keyword) {\n                    keywords.push(keyword.trim());\n                  });\n                }\n\n                break;\n\n              case 'FILE':\n                if (lineIndex > 0) {\n                  // Start embedded text files parsing\n                  parsingEmbeddedFiles = true;\n                  currentEmbeddedFileName = lp.getRemainingString();\n                  currentEmbeddedText = '';\n                  bfcCertified = false;\n                  bfcCCW = true;\n                }\n\n                break;\n\n              case 'BFC':\n                // Changes to the backface culling state\n                while (!lp.isAtTheEnd()) {\n                  const token = lp.getToken();\n\n                  switch (token) {\n                    case 'CERTIFY':\n                    case 'NOCERTIFY':\n                      bfcCertified = token === 'CERTIFY';\n                      bfcCCW = true;\n                      break;\n\n                    case 'CW':\n                    case 'CCW':\n                      bfcCCW = token === 'CCW';\n                      break;\n\n                    case 'INVERTNEXT':\n                      bfcInverted = true;\n                      break;\n\n                    case 'CLIP':\n                    case 'NOCLIP':\n                      bfcCull = token === 'CLIP';\n                      break;\n\n                    default:\n                      console.warn('THREE.LDrawLoader: BFC directive \"' + token + '\" is unknown.');\n                      break;\n                  }\n                }\n\n                break;\n\n              case 'STEP':\n                startingConstructionStep = true;\n                break;\n            }\n          }\n\n          break;\n        // Line type 1: Sub-object file\n\n        case '1':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          const posX = parseFloat(lp.getToken());\n          const posY = parseFloat(lp.getToken());\n          const posZ = parseFloat(lp.getToken());\n          const m0 = parseFloat(lp.getToken());\n          const m1 = parseFloat(lp.getToken());\n          const m2 = parseFloat(lp.getToken());\n          const m3 = parseFloat(lp.getToken());\n          const m4 = parseFloat(lp.getToken());\n          const m5 = parseFloat(lp.getToken());\n          const m6 = parseFloat(lp.getToken());\n          const m7 = parseFloat(lp.getToken());\n          const m8 = parseFloat(lp.getToken());\n          const matrix = new Matrix4().set(m0, m1, m2, posX, m3, m4, m5, posY, m6, m7, m8, posZ, 0, 0, 0, 1);\n          let fileName = lp.getRemainingString().trim().replace(/\\\\/g, '/');\n\n          if (loader.fileMap[fileName]) {\n            // Found the subobject path in the preloaded file path map\n            fileName = loader.fileMap[fileName];\n          } else {\n            // Standardized subfolders\n            if (fileName.startsWith('s/')) {\n              fileName = 'parts/' + fileName;\n            } else if (fileName.startsWith('48/')) {\n              fileName = 'p/' + fileName;\n            }\n          }\n\n          subobjects.push({\n            material: material,\n            colorCode: colorCode,\n            matrix: matrix,\n            fileName: fileName,\n            inverted: bfcInverted,\n            startingConstructionStep: startingConstructionStep\n          });\n          bfcInverted = false;\n          break;\n        // Line type 2: Line segment\n\n        case '2':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          v0 = lp.getVector();\n          v1 = lp.getVector();\n          segment = {\n            material: material,\n            colorCode: colorCode,\n            vertices: [v0, v1]\n          };\n          lineSegments.push(segment);\n          break;\n        // Line type 5: Conditional Line segment\n\n        case '5':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          v0 = lp.getVector();\n          v1 = lp.getVector();\n          c0 = lp.getVector();\n          c1 = lp.getVector();\n          segment = {\n            material: material,\n            colorCode: colorCode,\n            vertices: [v0, v1],\n            controlPoints: [c0, c1]\n          };\n          conditionalSegments.push(segment);\n          break;\n        // Line type 3: Triangle\n\n        case '3':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          ccw = bfcCCW;\n          doubleSided = !bfcCertified || !bfcCull;\n\n          if (ccw === true) {\n            v0 = lp.getVector();\n            v1 = lp.getVector();\n            v2 = lp.getVector();\n          } else {\n            v2 = lp.getVector();\n            v1 = lp.getVector();\n            v0 = lp.getVector();\n          }\n\n          faces.push({\n            material: material,\n            colorCode: colorCode,\n            faceNormal: null,\n            vertices: [v0, v1, v2],\n            normals: [null, null, null]\n          });\n          totalFaces++;\n\n          if (doubleSided === true) {\n            faces.push({\n              material: material,\n              colorCode: colorCode,\n              faceNormal: null,\n              vertices: [v2, v1, v0],\n              normals: [null, null, null]\n            });\n            totalFaces++;\n          }\n\n          break;\n        // Line type 4: Quadrilateral\n\n        case '4':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          ccw = bfcCCW;\n          doubleSided = !bfcCertified || !bfcCull;\n\n          if (ccw === true) {\n            v0 = lp.getVector();\n            v1 = lp.getVector();\n            v2 = lp.getVector();\n            v3 = lp.getVector();\n          } else {\n            v3 = lp.getVector();\n            v2 = lp.getVector();\n            v1 = lp.getVector();\n            v0 = lp.getVector();\n          } // specifically place the triangle diagonal in the v0 and v1 slots so we can\n          // account for the doubling of vertices later when smoothing normals.\n\n\n          faces.push({\n            material: material,\n            colorCode: colorCode,\n            faceNormal: null,\n            vertices: [v0, v1, v2, v3],\n            normals: [null, null, null, null]\n          });\n          totalFaces += 2;\n\n          if (doubleSided === true) {\n            faces.push({\n              material: material,\n              colorCode: colorCode,\n              faceNormal: null,\n              vertices: [v3, v2, v1, v0],\n              normals: [null, null, null, null]\n            });\n            totalFaces += 2;\n          }\n\n          break;\n\n        default:\n          throw new Error('LDrawLoader: Unknown line type \"' + lineType + '\"' + lp.getLineNumberString() + '.');\n      }\n    }\n\n    if (parsingEmbeddedFiles) {\n      this.setData(currentEmbeddedFileName, currentEmbeddedText);\n    }\n\n    return {\n      faces,\n      conditionalSegments,\n      lineSegments,\n      type,\n      category,\n      keywords,\n      subobjects,\n      totalFaces,\n      startingConstructionStep,\n      materials,\n      fileName,\n      group: null\n    };\n  } // returns an (optionally cloned) instance of the data\n\n\n  getData(fileName) {\n    let clone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const key = fileName.toLowerCase();\n    const result = this._cache[key];\n\n    if (result === null || result instanceof Promise) {\n      return null;\n    }\n\n    if (clone) {\n      return this.cloneResult(result);\n    } else {\n      return result;\n    }\n  } // kicks off a fetch and parse of the requested data if it hasn't already been loaded. Returns when\n  // the data is ready to use and can be retrieved synchronously with \"getData\".\n\n\n  async ensureDataLoaded(fileName) {\n    const key = fileName.toLowerCase();\n\n    if (!(key in this._cache)) {\n      // replace the promise with a copy of the parsed data for immediate processing\n      this._cache[key] = this.fetchData(fileName).then(text => {\n        const info = this.parse(text, fileName);\n        this._cache[key] = info;\n        return info;\n      });\n    }\n\n    await this._cache[key];\n  } // sets the data in the cache from parsed data\n\n\n  setData(fileName, text) {\n    const key = fileName.toLowerCase();\n    this._cache[key] = this.parse(text, fileName);\n  }\n\n} // returns the material for an associated color code. If the color code is 16 for a face or 24 for\n// an edge then the passthroughColorCode is used.\n\n\nfunction getMaterialFromCode(colorCode, parentColorCode, materialHierarchy, forEdge) {\n  const isPassthrough = !forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n\n  if (isPassthrough) {\n    colorCode = parentColorCode;\n  }\n\n  return materialHierarchy[colorCode] || null;\n} // Class used to parse and build LDraw parts as three.js objects and cache them if they're a \"Part\" type.\n\n\nclass LDrawPartsGeometryCache {\n  constructor(loader) {\n    this.loader = loader;\n    this.parseCache = new LDrawParsedCache(loader);\n    this._cache = {};\n  } // Convert the given file information into a mesh by processing subobjects.\n\n\n  async processIntoMesh(info) {\n    var _this = this;\n\n    const loader = this.loader;\n    const parseCache = this.parseCache;\n    const faceMaterials = new Set(); // Processes the part subobject information to load child parts and merge geometry onto part\n    // piece object.\n\n    const processInfoSubobjects = async function (info) {\n      let subobject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      const subobjects = info.subobjects;\n      const promises = []; // Trigger load of all subobjects. If a subobject isn't a primitive then load it as a separate\n      // group which lets instruction steps apply correctly.\n\n      for (let i = 0, l = subobjects.length; i < l; i++) {\n        const subobject = subobjects[i];\n        const promise = parseCache.ensureDataLoaded(subobject.fileName).then(() => {\n          const subobjectInfo = parseCache.getData(subobject.fileName, false);\n\n          if (!isPrimitiveType(subobjectInfo.type)) {\n            return _this.loadModel(subobject.fileName).catch(error => {\n              console.warn(error);\n              return null;\n            });\n          }\n\n          return processInfoSubobjects(parseCache.getData(subobject.fileName), subobject);\n        });\n        promises.push(promise);\n      }\n\n      const group = new Group();\n      group.userData.category = info.category;\n      group.userData.keywords = info.keywords;\n      info.group = group;\n      const subobjectInfos = await Promise.all(promises);\n\n      for (let i = 0, l = subobjectInfos.length; i < l; i++) {\n        const subobject = info.subobjects[i];\n        const subobjectInfo = subobjectInfos[i];\n\n        if (subobjectInfo === null) {\n          // the subobject failed to load\n          continue;\n        } // if the subobject was loaded as a separate group then apply the parent scopes materials\n\n\n        if (subobjectInfo.isGroup) {\n          const subobjectGroup = subobjectInfo;\n          subobject.matrix.decompose(subobjectGroup.position, subobjectGroup.quaternion, subobjectGroup.scale);\n          subobjectGroup.userData.startingConstructionStep = subobject.startingConstructionStep;\n          subobjectGroup.name = subobject.fileName;\n          loader.applyMaterialsToMesh(subobjectGroup, subobject.colorCode, info.materials);\n          group.add(subobjectGroup);\n          continue;\n        } // add the subobject group if it has children in case it has both children and primitives\n\n\n        if (subobjectInfo.group.children.length) {\n          group.add(subobjectInfo.group);\n        } // transform the primitives into the local space of the parent piece and append them to\n        // to the parent primitives list.\n\n\n        const parentLineSegments = info.lineSegments;\n        const parentConditionalSegments = info.conditionalSegments;\n        const parentFaces = info.faces;\n        const lineSegments = subobjectInfo.lineSegments;\n        const conditionalSegments = subobjectInfo.conditionalSegments;\n        const faces = subobjectInfo.faces;\n        const matrix = subobject.matrix;\n        const inverted = subobject.inverted;\n        const matrixScaleInverted = matrix.determinant() < 0;\n        const colorCode = subobject.colorCode;\n        const lineColorCode = colorCode === MAIN_COLOUR_CODE ? MAIN_EDGE_COLOUR_CODE : colorCode;\n\n        for (let i = 0, l = lineSegments.length; i < l; i++) {\n          const ls = lineSegments[i];\n          const vertices = ls.vertices;\n          vertices[0].applyMatrix4(matrix);\n          vertices[1].applyMatrix4(matrix);\n          ls.colorCode = ls.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : ls.colorCode;\n          ls.material = ls.material || getMaterialFromCode(ls.colorCode, ls.colorCode, info.materials, true);\n          parentLineSegments.push(ls);\n        }\n\n        for (let i = 0, l = conditionalSegments.length; i < l; i++) {\n          const os = conditionalSegments[i];\n          const vertices = os.vertices;\n          const controlPoints = os.controlPoints;\n          vertices[0].applyMatrix4(matrix);\n          vertices[1].applyMatrix4(matrix);\n          controlPoints[0].applyMatrix4(matrix);\n          controlPoints[1].applyMatrix4(matrix);\n          os.colorCode = os.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : os.colorCode;\n          os.material = os.material || getMaterialFromCode(os.colorCode, os.colorCode, info.materials, true);\n          parentConditionalSegments.push(os);\n        }\n\n        for (let i = 0, l = faces.length; i < l; i++) {\n          const tri = faces[i];\n          const vertices = tri.vertices;\n\n          for (let i = 0, l = vertices.length; i < l; i++) {\n            vertices[i].applyMatrix4(matrix);\n          }\n\n          tri.colorCode = tri.colorCode === MAIN_COLOUR_CODE ? colorCode : tri.colorCode;\n          tri.material = tri.material || getMaterialFromCode(tri.colorCode, colorCode, info.materials, false);\n          faceMaterials.add(tri.colorCode); // If the scale of the object is negated then the triangle winding order\n          // needs to be flipped.\n\n          if (matrixScaleInverted !== inverted) {\n            vertices.reverse();\n          }\n\n          parentFaces.push(tri);\n        }\n\n        info.totalFaces += subobjectInfo.totalFaces;\n      } // Apply the parent subobjects pass through material code to this object. This is done several times due\n      // to material scoping.\n\n\n      if (subobject) {\n        loader.applyMaterialsToMesh(group, subobject.colorCode, info.materials);\n      }\n\n      return info;\n    }; // Track material use to see if we need to use the normal smooth slow path for hard edges.\n\n\n    for (let i = 0, l = info.faces; i < l; i++) {\n      faceMaterials.add(info.faces[i].colorCode);\n    }\n\n    await processInfoSubobjects(info);\n\n    if (loader.smoothNormals) {\n      const checkSubSegments = faceMaterials.size > 1;\n      generateFaceNormals(info.faces);\n      smoothNormals(info.faces, info.lineSegments, checkSubSegments);\n    } // Add the primitive objects and metadata.\n\n\n    const group = info.group;\n\n    if (info.faces.length > 0) {\n      group.add(createObject(info.faces, 3, false, info.totalFaces));\n    }\n\n    if (info.lineSegments.length > 0) {\n      group.add(createObject(info.lineSegments, 2));\n    }\n\n    if (info.conditionalSegments.length > 0) {\n      group.add(createObject(info.conditionalSegments, 2, true));\n    }\n\n    return group;\n  }\n\n  hasCachedModel(fileName) {\n    return fileName !== null && fileName.toLowerCase() in this._cache;\n  }\n\n  async getCachedModel(fileName) {\n    if (fileName !== null && this.hasCachedModel(fileName)) {\n      const key = fileName.toLowerCase();\n      const group = await this._cache[key];\n      return group.clone();\n    } else {\n      return null;\n    }\n  } // Loads and parses the model with the given file name. Returns a cached copy if available.\n\n\n  async loadModel(fileName) {\n    const parseCache = this.parseCache;\n    const key = fileName.toLowerCase();\n\n    if (this.hasCachedModel(fileName)) {\n      // Return cached model if available.\n      return this.getCachedModel(fileName);\n    } else {\n      // Otherwise parse a new model.\n      // Ensure the file data is loaded and pre parsed.\n      await parseCache.ensureDataLoaded(fileName);\n      const info = parseCache.getData(fileName);\n      const promise = this.processIntoMesh(info); // Now that the file has loaded it's possible that another part parse has been waiting in parallel\n      // so check the cache again to see if it's been added since the last async operation so we don't\n      // do unnecessary work.\n\n      if (this.hasCachedModel(fileName)) {\n        return this.getCachedModel(fileName);\n      } // Cache object if it's a part so it can be reused later.\n\n\n      if (isPartType(info.type)) {\n        this._cache[key] = promise;\n      } // return a copy\n\n\n      const group = await promise;\n      return group.clone();\n    }\n  } // parses the given model text into a renderable object. Returns cached copy if available.\n\n\n  async parseModel(text) {\n    const parseCache = this.parseCache;\n    const info = parseCache.parse(text);\n\n    if (isPartType(info.type) && this.hasCachedModel(info.fileName)) {\n      return this.getCachedModel(info.fileName);\n    }\n\n    return this.processIntoMesh(info);\n  }\n\n}\n\nfunction sortByMaterial(a, b) {\n  if (a.colorCode === b.colorCode) {\n    return 0;\n  }\n\n  if (a.colorCode < b.colorCode) {\n    return -1;\n  }\n\n  return 1;\n}\n\nfunction createObject(elements, elementSize) {\n  let isConditionalSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let totalElements = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  // Creates a LineSegments (elementSize = 2) or a Mesh (elementSize = 3 )\n  // With per face / segment material, implemented with mesh groups and materials array\n  // Sort the faces or line segments by color code to make later the mesh groups\n  elements.sort(sortByMaterial);\n\n  if (totalElements === null) {\n    totalElements = elements.length;\n  }\n\n  const positions = new Float32Array(elementSize * totalElements * 3);\n  const normals = elementSize === 3 ? new Float32Array(elementSize * totalElements * 3) : null;\n  const materials = [];\n  const quadArray = new Array(6);\n  const bufferGeometry = new BufferGeometry();\n  let prevMaterial = null;\n  let index0 = 0;\n  let numGroupVerts = 0;\n  let offset = 0;\n\n  for (let iElem = 0, nElem = elements.length; iElem < nElem; iElem++) {\n    const elem = elements[iElem];\n    let vertices = elem.vertices;\n\n    if (vertices.length === 4) {\n      quadArray[0] = vertices[0];\n      quadArray[1] = vertices[1];\n      quadArray[2] = vertices[2];\n      quadArray[3] = vertices[0];\n      quadArray[4] = vertices[2];\n      quadArray[5] = vertices[3];\n      vertices = quadArray;\n    }\n\n    for (let j = 0, l = vertices.length; j < l; j++) {\n      const v = vertices[j];\n      const index = offset + j * 3;\n      positions[index + 0] = v.x;\n      positions[index + 1] = v.y;\n      positions[index + 2] = v.z;\n    } // create the normals array if this is a set of faces\n\n\n    if (elementSize === 3) {\n      if (!elem.faceNormal) {\n        const v0 = vertices[0];\n        const v1 = vertices[1];\n        const v2 = vertices[2];\n\n        _tempVec0.subVectors(v1, v0);\n\n        _tempVec1.subVectors(v2, v1);\n\n        elem.faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n      }\n\n      let elemNormals = elem.normals;\n\n      if (elemNormals.length === 4) {\n        quadArray[0] = elemNormals[0];\n        quadArray[1] = elemNormals[1];\n        quadArray[2] = elemNormals[2];\n        quadArray[3] = elemNormals[0];\n        quadArray[4] = elemNormals[2];\n        quadArray[5] = elemNormals[3];\n        elemNormals = quadArray;\n      }\n\n      for (let j = 0, l = elemNormals.length; j < l; j++) {\n        // use face normal if a vertex normal is not provided\n        let n = elem.faceNormal;\n\n        if (elemNormals[j]) {\n          n = elemNormals[j].norm;\n        }\n\n        const index = offset + j * 3;\n        normals[index + 0] = n.x;\n        normals[index + 1] = n.y;\n        normals[index + 2] = n.z;\n      }\n    }\n\n    if (prevMaterial !== elem.colorCode) {\n      if (prevMaterial !== null) {\n        bufferGeometry.addGroup(index0, numGroupVerts, materials.length - 1);\n      }\n\n      const material = elem.material;\n\n      if (material !== null) {\n        if (elementSize === 3) {\n          materials.push(material);\n        } else if (elementSize === 2) {\n          if (material !== null) {\n            if (isConditionalSegments) {\n              materials.push(material.userData.edgeMaterial.userData.conditionalEdgeMaterial);\n            } else {\n              materials.push(material.userData.edgeMaterial);\n            }\n          } else {\n            materials.push(null);\n          }\n        }\n      } else {\n        // If a material has not been made available yet then keep the color code string in the material array\n        // to save the spot for the material once a parent scopes materials are being applied to the object.\n        materials.push(elem.colorCode);\n      }\n\n      prevMaterial = elem.colorCode;\n      index0 = offset / 3;\n      numGroupVerts = vertices.length;\n    } else {\n      numGroupVerts += vertices.length;\n    }\n\n    offset += 3 * vertices.length;\n  }\n\n  if (numGroupVerts > 0) {\n    bufferGeometry.addGroup(index0, Infinity, materials.length - 1);\n  }\n\n  bufferGeometry.setAttribute('position', new BufferAttribute(positions, 3));\n\n  if (normals !== null) {\n    bufferGeometry.setAttribute('normal', new BufferAttribute(normals, 3));\n  }\n\n  let object3d = null;\n\n  if (elementSize === 2) {\n    if (isConditionalSegments) {\n      object3d = new ConditionalLineSegments(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n    } else {\n      object3d = new LineSegments(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n    }\n  } else if (elementSize === 3) {\n    object3d = new Mesh(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n  }\n\n  if (isConditionalSegments) {\n    object3d.isConditionalLine = true;\n    const controlArray0 = new Float32Array(elements.length * 3 * 2);\n    const controlArray1 = new Float32Array(elements.length * 3 * 2);\n    const directionArray = new Float32Array(elements.length * 3 * 2);\n\n    for (let i = 0, l = elements.length; i < l; i++) {\n      const os = elements[i];\n      const vertices = os.vertices;\n      const controlPoints = os.controlPoints;\n      const c0 = controlPoints[0];\n      const c1 = controlPoints[1];\n      const v0 = vertices[0];\n      const v1 = vertices[1];\n      const index = i * 3 * 2;\n      controlArray0[index + 0] = c0.x;\n      controlArray0[index + 1] = c0.y;\n      controlArray0[index + 2] = c0.z;\n      controlArray0[index + 3] = c0.x;\n      controlArray0[index + 4] = c0.y;\n      controlArray0[index + 5] = c0.z;\n      controlArray1[index + 0] = c1.x;\n      controlArray1[index + 1] = c1.y;\n      controlArray1[index + 2] = c1.z;\n      controlArray1[index + 3] = c1.x;\n      controlArray1[index + 4] = c1.y;\n      controlArray1[index + 5] = c1.z;\n      directionArray[index + 0] = v1.x - v0.x;\n      directionArray[index + 1] = v1.y - v0.y;\n      directionArray[index + 2] = v1.z - v0.z;\n      directionArray[index + 3] = v1.x - v0.x;\n      directionArray[index + 4] = v1.y - v0.y;\n      directionArray[index + 5] = v1.z - v0.z;\n    }\n\n    bufferGeometry.setAttribute('control0', new BufferAttribute(controlArray0, 3, false));\n    bufferGeometry.setAttribute('control1', new BufferAttribute(controlArray1, 3, false));\n    bufferGeometry.setAttribute('direction', new BufferAttribute(directionArray, 3, false));\n  }\n\n  return object3d;\n} //\n\n\nclass LDrawLoader extends Loader {\n  constructor(manager) {\n    super(manager); // Array of THREE.Material\n\n    this.materials = [];\n    this.materialLibrary = {}; // This also allows to handle the embedded text files (\"0 FILE\" lines)\n\n    this.partsCache = new LDrawPartsGeometryCache(this); // This object is a map from file names to paths. It agilizes the paths search. If it is not set then files will be searched by trial and error.\n\n    this.fileMap = {}; // Initializes the materials library with default materials\n\n    this.setMaterials([]); // If this flag is set to true the vertex normals will be smoothed.\n\n    this.smoothNormals = true; // The path to load parts from the LDraw parts library from.\n\n    this.partsLibraryPath = '';\n  }\n\n  setPartsLibraryPath(path) {\n    this.partsLibraryPath = path;\n    return this;\n  }\n\n  async preloadMaterials(url) {\n    const fileLoader = new FileLoader(this.manager);\n    fileLoader.setPath(this.path);\n    fileLoader.setRequestHeader(this.requestHeader);\n    fileLoader.setWithCredentials(this.withCredentials);\n    const text = await fileLoader.loadAsync(url);\n    const colorLineRegex = /^0 !COLOUR/;\n    const lines = text.split(/[\\n\\r]/g);\n    const materials = [];\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i];\n\n      if (colorLineRegex.test(line)) {\n        const directive = line.replace(colorLineRegex, '');\n        const material = this.parseColorMetaDirective(new LineParser(directive));\n        materials.push(material);\n      }\n    }\n\n    this.setMaterials(materials);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const fileLoader = new FileLoader(this.manager);\n    fileLoader.setPath(this.path);\n    fileLoader.setRequestHeader(this.requestHeader);\n    fileLoader.setWithCredentials(this.withCredentials);\n    fileLoader.load(url, text => {\n      this.partsCache.parseModel(text, this.materialLibrary).then(group => {\n        this.applyMaterialsToMesh(group, MAIN_COLOUR_CODE, this.materialLibrary, true);\n        this.computeConstructionSteps(group);\n        onLoad(group);\n      }).catch(onError);\n    }, onProgress, onError);\n  }\n\n  parse(text, onLoad) {\n    this.partsCache.parseModel(text, this.materialLibrary).then(group => {\n      this.computeConstructionSteps(group);\n      onLoad(group);\n    });\n  }\n\n  setMaterials(materials) {\n    this.materialLibrary = {};\n    this.materials = [];\n\n    for (let i = 0, l = materials.length; i < l; i++) {\n      this.addMaterial(materials[i]);\n    } // Add default main triangle and line edge materials (used in pieces that can be colored with a main color)\n\n\n    this.addMaterial(this.parseColorMetaDirective(new LineParser('Main_Colour CODE 16 VALUE #FF8080 EDGE #333333')));\n    this.addMaterial(this.parseColorMetaDirective(new LineParser('Edge_Colour CODE 24 VALUE #A0A0A0 EDGE #333333')));\n    return this;\n  }\n\n  setFileMap(fileMap) {\n    this.fileMap = fileMap;\n    return this;\n  }\n\n  addMaterial(material) {\n    // Adds a material to the material library which is on top of the parse scopes stack. And also to the materials array\n    const matLib = this.materialLibrary;\n\n    if (!matLib[material.userData.code]) {\n      this.materials.push(material);\n      matLib[material.userData.code] = material;\n    }\n\n    return this;\n  }\n\n  getMaterial(colorCode) {\n    if (colorCode.startsWith('0x2')) {\n      // Special 'direct' material value (RGB color)\n      const color = colorCode.substring(3);\n      return this.parseColorMetaDirective(new LineParser('Direct_Color_' + color + ' CODE -1 VALUE #' + color + ' EDGE #' + color + ''));\n    }\n\n    return this.materialLibrary[colorCode] || null;\n  } // Applies the appropriate materials to a prebuilt hierarchy of geometry. Assumes that color codes are present\n  // in the material array if they need to be filled in.\n\n\n  applyMaterialsToMesh(group, parentColorCode, materialHierarchy) {\n    let finalMaterialPass = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    // find any missing materials as indicated by a color code string and replace it with a material from the current material lib\n    const loader = this;\n    const parentIsPassthrough = parentColorCode === MAIN_COLOUR_CODE;\n    group.traverse(c => {\n      if (c.isMesh || c.isLineSegments) {\n        if (Array.isArray(c.material)) {\n          for (let i = 0, l = c.material.length; i < l; i++) {\n            if (!c.material[i].isMaterial) {\n              c.material[i] = getMaterial(c, c.material[i]);\n            }\n          }\n        } else if (!c.material.isMaterial) {\n          c.material = getMaterial(c, c.material);\n        }\n      }\n    }); // Returns the appropriate material for the object (line or face) given color code. If the code is \"pass through\"\n    // (24 for lines, 16 for edges) then the pass through color code is used. If that is also pass through then it's\n    // simply returned for the subsequent material application.\n\n    function getMaterial(c, colorCode) {\n      // if our parent is a passthrough color code and we don't have the current material color available then\n      // return early.\n      if (parentIsPassthrough && !(colorCode in materialHierarchy) && !finalMaterialPass) {\n        return colorCode;\n      }\n\n      const forEdge = c.isLineSegments || c.isConditionalLine;\n      const isPassthrough = !forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n\n      if (isPassthrough) {\n        colorCode = parentColorCode;\n      }\n\n      let material = null;\n\n      if (colorCode in materialHierarchy) {\n        material = materialHierarchy[colorCode];\n      } else if (finalMaterialPass) {\n        // see if we can get the final material from from the \"getMaterial\" function which will attempt to\n        // parse the \"direct\" colors\n        material = loader.getMaterial(colorCode);\n\n        if (material === null) {\n          // otherwise throw an error if this is final opportunity to set the material\n          throw new Error(`LDrawLoader: Material properties for code ${colorCode} not available.`);\n        }\n      } else {\n        return colorCode;\n      }\n\n      if (c.isLineSegments) {\n        material = material.userData.edgeMaterial;\n\n        if (c.isConditionalLine) {\n          material = material.userData.conditionalEdgeMaterial;\n        }\n      }\n\n      return material;\n    }\n  }\n\n  getMainMaterial() {\n    return this.getMaterial(MAIN_COLOUR_CODE);\n  }\n\n  getMainEdgeMaterial() {\n    return this.getMaterial(MAIN_EDGE_COLOUR_CODE);\n  }\n\n  parseColorMetaDirective(lineParser) {\n    // Parses a color definition and returns a THREE.Material\n    let code = null; // Triangle and line colors\n\n    let color = 0xff00ff;\n    let edgeColor = 0xff00ff; // Transparency\n\n    let alpha = 1;\n    let isTransparent = false; // Self-illumination:\n\n    let luminance = 0;\n    let finishType = FINISH_TYPE_DEFAULT;\n    let edgeMaterial = null;\n    const name = lineParser.getToken();\n\n    if (!name) {\n      throw new Error('LDrawLoader: Material name was expected after \"!COLOUR tag' + lineParser.getLineNumberString() + '.');\n    } // Parse tag tokens and their parameters\n\n\n    let token = null;\n\n    while (true) {\n      token = lineParser.getToken();\n\n      if (!token) {\n        break;\n      }\n\n      switch (token.toUpperCase()) {\n        case 'CODE':\n          code = lineParser.getToken();\n          break;\n\n        case 'VALUE':\n          color = lineParser.getToken();\n\n          if (color.startsWith('0x')) {\n            color = '#' + color.substring(2);\n          } else if (!color.startsWith('#')) {\n            throw new Error('LDrawLoader: Invalid color while parsing material' + lineParser.getLineNumberString() + '.');\n          }\n\n          break;\n\n        case 'EDGE':\n          edgeColor = lineParser.getToken();\n\n          if (edgeColor.startsWith('0x')) {\n            edgeColor = '#' + edgeColor.substring(2);\n          } else if (!edgeColor.startsWith('#')) {\n            // Try to see if edge color is a color code\n            edgeMaterial = this.getMaterial(edgeColor);\n\n            if (!edgeMaterial) {\n              throw new Error('LDrawLoader: Invalid edge color while parsing material' + lineParser.getLineNumberString() + '.');\n            } // Get the edge material for this triangle material\n\n\n            edgeMaterial = edgeMaterial.userData.edgeMaterial;\n          }\n\n          break;\n\n        case 'ALPHA':\n          alpha = parseInt(lineParser.getToken());\n\n          if (isNaN(alpha)) {\n            throw new Error('LDrawLoader: Invalid alpha value in material definition' + lineParser.getLineNumberString() + '.');\n          }\n\n          alpha = Math.max(0, Math.min(1, alpha / 255));\n\n          if (alpha < 1) {\n            isTransparent = true;\n          }\n\n          break;\n\n        case 'LUMINANCE':\n          luminance = parseInt(lineParser.getToken());\n\n          if (isNaN(luminance)) {\n            throw new Error('LDrawLoader: Invalid luminance value in material definition' + LineParser.getLineNumberString() + '.');\n          }\n\n          luminance = Math.max(0, Math.min(1, luminance / 255));\n          break;\n\n        case 'CHROME':\n          finishType = FINISH_TYPE_CHROME;\n          break;\n\n        case 'PEARLESCENT':\n          finishType = FINISH_TYPE_PEARLESCENT;\n          break;\n\n        case 'RUBBER':\n          finishType = FINISH_TYPE_RUBBER;\n          break;\n\n        case 'MATTE_METALLIC':\n          finishType = FINISH_TYPE_MATTE_METALLIC;\n          break;\n\n        case 'METAL':\n          finishType = FINISH_TYPE_METAL;\n          break;\n\n        case 'MATERIAL':\n          // Not implemented\n          lineParser.setToEnd();\n          break;\n\n        default:\n          throw new Error('LDrawLoader: Unknown token \"' + token + '\" while parsing material' + lineParser.getLineNumberString() + '.');\n      }\n    }\n\n    let material = null;\n\n    switch (finishType) {\n      case FINISH_TYPE_DEFAULT:\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.3,\n          metalness: 0\n        });\n        break;\n\n      case FINISH_TYPE_PEARLESCENT:\n        // Try to imitate pearlescency by making the surface glossy\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.3,\n          metalness: 0.25\n        });\n        break;\n\n      case FINISH_TYPE_CHROME:\n        // Mirror finish surface\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0,\n          metalness: 1\n        });\n        break;\n\n      case FINISH_TYPE_RUBBER:\n        // Rubber finish\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.9,\n          metalness: 0\n        });\n        break;\n\n      case FINISH_TYPE_MATTE_METALLIC:\n        // Brushed metal finish\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.8,\n          metalness: 0.4\n        });\n        break;\n\n      case FINISH_TYPE_METAL:\n        // Average metal finish\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.2,\n          metalness: 0.85\n        });\n        break;\n    }\n\n    material.transparent = isTransparent;\n    material.premultipliedAlpha = true;\n    material.opacity = alpha;\n    material.depthWrite = !isTransparent;\n    material.polygonOffset = true;\n    material.polygonOffsetFactor = 1;\n\n    if (luminance !== 0) {\n      material.emissive.set(material.color).multiplyScalar(luminance);\n    }\n\n    if (!edgeMaterial) {\n      // This is the material used for edges\n      edgeMaterial = new LineBasicMaterial({\n        color: edgeColor,\n        transparent: isTransparent,\n        opacity: alpha,\n        depthWrite: !isTransparent\n      });\n      edgeMaterial.userData.code = code;\n      edgeMaterial.name = name + ' - Edge'; // This is the material used for conditional edges\n\n      edgeMaterial.userData.conditionalEdgeMaterial = new LDrawConditionalLineMaterial({\n        fog: true,\n        transparent: isTransparent,\n        depthWrite: !isTransparent,\n        color: edgeColor,\n        opacity: alpha\n      });\n    }\n\n    material.userData.code = code;\n    material.name = name;\n    material.userData.edgeMaterial = edgeMaterial;\n    this.addMaterial(material);\n    return material;\n  }\n\n  computeConstructionSteps(model) {\n    // Sets userdata.constructionStep number in Group objects and userData.numConstructionSteps number in the root Group object.\n    let stepNumber = 0;\n    model.traverse(c => {\n      if (c.isGroup) {\n        if (c.userData.startingConstructionStep) {\n          stepNumber++;\n        }\n\n        c.userData.constructionStep = stepNumber;\n      }\n    });\n    model.userData.numConstructionSteps = stepNumber + 1;\n  }\n\n}\n\nexport { LDrawLoader };","map":{"version":3,"names":["Vector3","Ray","Loader","FileLoader","MeshStandardMaterial","LineBasicMaterial","ShaderMaterial","UniformsUtils","UniformsLib","Color","BufferGeometry","BufferAttribute","LineSegments","Mesh","Matrix4","Group","FINISH_TYPE_DEFAULT","FINISH_TYPE_CHROME","FINISH_TYPE_PEARLESCENT","FINISH_TYPE_RUBBER","FINISH_TYPE_MATTE_METALLIC","FINISH_TYPE_METAL","FILE_LOCATION_AS_IS","FILE_LOCATION_TRY_PARTS","FILE_LOCATION_TRY_P","FILE_LOCATION_TRY_MODELS","FILE_LOCATION_TRY_RELATIVE","FILE_LOCATION_TRY_ABSOLUTE","FILE_LOCATION_NOT_FOUND","MAIN_COLOUR_CODE","MAIN_EDGE_COLOUR_CODE","_tempVec0","_tempVec1","LDrawConditionalLineMaterial","constructor","parameters","uniforms","merge","fog","diffuse","value","opacity","vertexShader","fragmentShader","Object","defineProperties","get","set","color","setValues","isLDrawConditionalLineMaterial","ConditionalLineSegments","geometry","material","isConditionalLine","generateFaceNormals","faces","i","l","length","face","vertices","v0","v1","v2","subVectors","faceNormal","crossVectors","normalize","_ray","smoothNormals","lineSegments","checkSubSegments","hashMultiplier","hashVertex","v","x","y","z","hashEdge","toNormalizedRay","targetRay","direction","scalar","dot","origin","copy","addScaledVector","hashRay","ray","hardEdges","Set","hardEdgeRays","Map","halfEdgeList","normals","ls","add","rh1","has","rh2","info","distances","d0","d1","push","tri","vertCount","i2","index","next","hash","rayHash","found","halfEdge","key","queue","pop","vertNormals","reverseHash","otherInfo","otherTri","otherIndex","otherNormals","otherVertCount","otherFaceNormal","Math","abs","otherNext","norm","sharedNormal1","sharedNormal2","isPartType","type","isPrimitiveType","test","LineParser","line","lineNumber","lineLength","currentCharIndex","currentChar","seekNonSpace","charAt","getToken","pos0","pos1","substring","getVector","parseFloat","getRemainingString","isAtTheEnd","setToEnd","getLineNumberString","LDrawParsedCache","loader","_cache","cloneResult","original","result","map","colorCode","clone","conditionalSegments","controlPoints","category","keywords","subobjects","totalFaces","startingConstructionStep","materials","group","fetchData","fileName","triedLowerCase","locationState","subobjectURL","lastIndexOf","toLowerCase","fileLoader","manager","setPath","partsLibraryPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","loadAsync","Error","parse","getLocalMaterial","indexOf","replace","lines","split","numLines","parsingEmbeddedFiles","currentEmbeddedFileName","currentEmbeddedText","bfcCertified","bfcCCW","bfcInverted","bfcCull","lineIndex","startsWith","setData","lp","lineType","segment","ccw","doubleSided","v3","c0","c1","meta","parseColorMetaDirective","userData","code","console","warn","newKeywords","forEach","keyword","trim","token","posX","posY","posZ","m0","m1","m2","m3","m4","m5","m6","m7","m8","matrix","fileMap","inverted","getData","Promise","ensureDataLoaded","then","getMaterialFromCode","parentColorCode","materialHierarchy","forEdge","isPassthrough","LDrawPartsGeometryCache","parseCache","processIntoMesh","faceMaterials","processInfoSubobjects","subobject","promises","promise","subobjectInfo","loadModel","catch","error","subobjectInfos","all","isGroup","subobjectGroup","decompose","position","quaternion","scale","name","applyMaterialsToMesh","children","parentLineSegments","parentConditionalSegments","parentFaces","matrixScaleInverted","determinant","lineColorCode","applyMatrix4","os","reverse","size","createObject","hasCachedModel","getCachedModel","parseModel","sortByMaterial","a","b","elements","elementSize","isConditionalSegments","totalElements","sort","positions","Float32Array","quadArray","Array","bufferGeometry","prevMaterial","index0","numGroupVerts","offset","iElem","nElem","elem","j","elemNormals","n","addGroup","edgeMaterial","conditionalEdgeMaterial","Infinity","setAttribute","object3d","controlArray0","controlArray1","directionArray","LDrawLoader","materialLibrary","partsCache","setMaterials","setPartsLibraryPath","path","preloadMaterials","url","colorLineRegex","directive","load","onLoad","onProgress","onError","computeConstructionSteps","addMaterial","setFileMap","matLib","getMaterial","finalMaterialPass","parentIsPassthrough","traverse","c","isMesh","isLineSegments","isArray","isMaterial","getMainMaterial","getMainEdgeMaterial","lineParser","edgeColor","alpha","isTransparent","luminance","finishType","toUpperCase","parseInt","isNaN","max","min","roughness","metalness","transparent","premultipliedAlpha","depthWrite","polygonOffset","polygonOffsetFactor","emissive","multiplyScalar","model","stepNumber","constructionStep","numConstructionSteps"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/three-stdlib/loaders/LDrawLoader.js"],"sourcesContent":["import { Vector3, Ray, Loader, FileLoader, MeshStandardMaterial, LineBasicMaterial, ShaderMaterial, UniformsUtils, UniformsLib, Color, BufferGeometry, BufferAttribute, LineSegments, Mesh, Matrix4, Group } from 'three';\n\n// Note: \"MATERIAL\" tag (e.g. GLITTER, SPECKLE) is not implemented\n\nconst FINISH_TYPE_DEFAULT = 0;\nconst FINISH_TYPE_CHROME = 1;\nconst FINISH_TYPE_PEARLESCENT = 2;\nconst FINISH_TYPE_RUBBER = 3;\nconst FINISH_TYPE_MATTE_METALLIC = 4;\nconst FINISH_TYPE_METAL = 5; // State machine to search a subobject path.\n// The LDraw standard establishes these various possible subfolders.\n\nconst FILE_LOCATION_AS_IS = 0;\nconst FILE_LOCATION_TRY_PARTS = 1;\nconst FILE_LOCATION_TRY_P = 2;\nconst FILE_LOCATION_TRY_MODELS = 3;\nconst FILE_LOCATION_TRY_RELATIVE = 4;\nconst FILE_LOCATION_TRY_ABSOLUTE = 5;\nconst FILE_LOCATION_NOT_FOUND = 6;\nconst MAIN_COLOUR_CODE = '16';\nconst MAIN_EDGE_COLOUR_CODE = '24';\n\nconst _tempVec0 = new Vector3();\n\nconst _tempVec1 = new Vector3();\n\nclass LDrawConditionalLineMaterial extends ShaderMaterial {\n  constructor(parameters) {\n    super({\n      uniforms: UniformsUtils.merge([UniformsLib.fog, {\n        diffuse: {\n          value: new Color()\n        },\n        opacity: {\n          value: 1.0\n        }\n      }]),\n      vertexShader:\n      /* glsl */\n      `\n        attribute vec3 control0;\n        attribute vec3 control1;\n        attribute vec3 direction;\n        varying float discardFlag;\n\n        #include <common>\n        #include <color_pars_vertex>\n        #include <fog_pars_vertex>\n        #include <logdepthbuf_pars_vertex>\n        #include <clipping_planes_pars_vertex>\n\n        void main() {\n          #include <color_vertex>\n\n          vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n          gl_Position = projectionMatrix * mvPosition;\n\n          // Transform the line segment ends and control points into camera clip space\n          vec4 c0 = projectionMatrix * modelViewMatrix * vec4(control0, 1.0);\n          vec4 c1 = projectionMatrix * modelViewMatrix * vec4(control1, 1.0);\n          vec4 p0 = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          vec4 p1 = projectionMatrix * modelViewMatrix * vec4(position + direction, 1.0);\n\n          c0.xy /= c0.w;\n          c1.xy /= c1.w;\n          p0.xy /= p0.w;\n          p1.xy /= p1.w;\n\n          // Get the direction of the segment and an orthogonal vector\n          vec2 dir = p1.xy - p0.xy;\n          vec2 norm = vec2(-dir.y, dir.x);\n\n          // Get control point directions from the line\n          vec2 c0dir = c0.xy - p1.xy;\n          vec2 c1dir = c1.xy - p1.xy;\n\n          // If the vectors to the controls points are pointed in different directions away\n          // from the line segment then the line should not be drawn.\n          float d0 = dot(normalize(norm), normalize(c0dir));\n          float d1 = dot(normalize(norm), normalize(c1dir));\n          discardFlag = float(sign(d0) != sign(d1));\n\n          #include <logdepthbuf_vertex>\n          #include <clipping_planes_vertex>\n          #include <fog_vertex>\n        }\n      `,\n      fragmentShader:\n      /* glsl */\n      `\n        uniform vec3 diffuse;\n        uniform float opacity;\n        varying float discardFlag;\n\n        #include <common>\n        #include <color_pars_fragment>\n        #include <fog_pars_fragment>\n        #include <logdepthbuf_pars_fragment>\n        #include <clipping_planes_pars_fragment>\n\n        void main() {\n          if (discardFlag > 0.5) discard;\n\n          #include <clipping_planes_fragment>\n          vec3 outgoingLight = vec3(0.0);\n          vec4 diffuseColor = vec4(diffuse, opacity);\n          #include <logdepthbuf_fragment>\n          #include <color_fragment>\n          outgoingLight = diffuseColor.rgb; // simple shader\n          gl_FragColor = vec4(outgoingLight, diffuseColor.a);\n          #include <tonemapping_fragment>\n          #include <encodings_fragment>\n          #include <fog_fragment>\n          #include <premultiplied_alpha_fragment>\n        }\n      `\n    });\n    Object.defineProperties(this, {\n      opacity: {\n        get: function () {\n          return this.uniforms.opacity.value;\n        },\n        set: function (value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      color: {\n        get: function () {\n          return this.uniforms.diffuse.value;\n        }\n      }\n    });\n    this.setValues(parameters);\n    this.isLDrawConditionalLineMaterial = true;\n  }\n\n}\n\nclass ConditionalLineSegments extends LineSegments {\n  constructor(geometry, material) {\n    super(geometry, material);\n    this.isConditionalLine = true;\n  }\n\n}\n\nfunction generateFaceNormals(faces) {\n  for (let i = 0, l = faces.length; i < l; i++) {\n    const face = faces[i];\n    const vertices = face.vertices;\n    const v0 = vertices[0];\n    const v1 = vertices[1];\n    const v2 = vertices[2];\n\n    _tempVec0.subVectors(v1, v0);\n\n    _tempVec1.subVectors(v2, v1);\n\n    face.faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n  }\n}\n\nconst _ray = new Ray();\n\nfunction smoothNormals(faces, lineSegments, checkSubSegments = false) {\n  // NOTE: 1e2 is pretty coarse but was chosen to quantize the resulting value because\n  // it allows edges to be smoothed as expected (see minifig arms).\n  // --\n  // And the vector values are initialize multiplied by 1 + 1e-10 to account for floating\n  // point errors on vertices along quantization boundaries. Ie after matrix multiplication\n  // vertices that should be merged might be set to \"1.7\" and \"1.6999...\" meaning they won't\n  // get merged. This added epsilon attempts to push these error values to the same quantized\n  // value for the sake of hashing. See \"AT-ST mini\" dishes. See mrdoob/three#23169.\n  const hashMultiplier = (1 + 1e-10) * 1e2;\n\n  function hashVertex(v) {\n    const x = ~~(v.x * hashMultiplier);\n    const y = ~~(v.y * hashMultiplier);\n    const z = ~~(v.z * hashMultiplier);\n    return `${x},${y},${z}`;\n  }\n\n  function hashEdge(v0, v1) {\n    return `${hashVertex(v0)}_${hashVertex(v1)}`;\n  } // converts the two vertices to a ray with a normalized direction and origin of 0, 0, 0 projected\n  // onto the original line.\n\n\n  function toNormalizedRay(v0, v1, targetRay) {\n    targetRay.direction.subVectors(v1, v0).normalize();\n    const scalar = v0.dot(targetRay.direction);\n    targetRay.origin.copy(v0).addScaledVector(targetRay.direction, -scalar);\n    return targetRay;\n  }\n\n  function hashRay(ray) {\n    return hashEdge(ray.origin, ray.direction);\n  }\n\n  const hardEdges = new Set();\n  const hardEdgeRays = new Map();\n  const halfEdgeList = {};\n  const normals = []; // Save the list of hard edges by hash\n\n  for (let i = 0, l = lineSegments.length; i < l; i++) {\n    const ls = lineSegments[i];\n    const vertices = ls.vertices;\n    const v0 = vertices[0];\n    const v1 = vertices[1];\n    hardEdges.add(hashEdge(v0, v1));\n    hardEdges.add(hashEdge(v1, v0)); // only generate the hard edge ray map if we're checking subsegments because it's more expensive to check\n    // and requires more memory.\n\n    if (checkSubSegments) {\n      // add both ray directions to the map\n      const ray = toNormalizedRay(v0, v1, new Ray());\n      const rh1 = hashRay(ray);\n\n      if (!hardEdgeRays.has(rh1)) {\n        toNormalizedRay(v1, v0, ray);\n        const rh2 = hashRay(ray);\n        const info = {\n          ray,\n          distances: []\n        };\n        hardEdgeRays.set(rh1, info);\n        hardEdgeRays.set(rh2, info);\n      } // store both segments ends in min, max order in the distances array to check if a face edge is a\n      // subsegment later.\n\n\n      const info = hardEdgeRays.get(rh1);\n      let d0 = info.ray.direction.dot(v0);\n      let d1 = info.ray.direction.dot(v1);\n\n      if (d0 > d1) {\n        [d0, d1] = [d1, d0];\n      }\n\n      info.distances.push(d0, d1);\n    }\n  } // track the half edges associated with each triangle\n\n\n  for (let i = 0, l = faces.length; i < l; i++) {\n    const tri = faces[i];\n    const vertices = tri.vertices;\n    const vertCount = vertices.length;\n\n    for (let i2 = 0; i2 < vertCount; i2++) {\n      const index = i2;\n      const next = (i2 + 1) % vertCount;\n      const v0 = vertices[index];\n      const v1 = vertices[next];\n      const hash = hashEdge(v0, v1); // don't add the triangle if the edge is supposed to be hard\n\n      if (hardEdges.has(hash)) {\n        continue;\n      } // if checking subsegments then check to see if this edge lies on a hard edge ray and whether its within any ray bounds\n\n\n      if (checkSubSegments) {\n        toNormalizedRay(v0, v1, _ray);\n        const rayHash = hashRay(_ray);\n\n        if (hardEdgeRays.has(rayHash)) {\n          const info = hardEdgeRays.get(rayHash);\n          const {\n            ray,\n            distances\n          } = info;\n          let d0 = ray.direction.dot(v0);\n          let d1 = ray.direction.dot(v1);\n\n          if (d0 > d1) {\n            [d0, d1] = [d1, d0];\n          } // return early if the face edge is found to be a subsegment of a line edge meaning the edge will have \"hard\" normals\n\n\n          let found = false;\n\n          for (let i = 0, l = distances.length; i < l; i += 2) {\n            if (d0 >= distances[i] && d1 <= distances[i + 1]) {\n              found = true;\n              break;\n            }\n          }\n\n          if (found) {\n            continue;\n          }\n        }\n      }\n\n      const info = {\n        index: index,\n        tri: tri\n      };\n      halfEdgeList[hash] = info;\n    }\n  } // Iterate until we've tried to connect all faces to share normals\n\n\n  while (true) {\n    // Stop if there are no more faces left\n    let halfEdge = null;\n\n    for (const key in halfEdgeList) {\n      halfEdge = halfEdgeList[key];\n      break;\n    }\n\n    if (halfEdge === null) {\n      break;\n    } // Exhaustively find all connected faces\n\n\n    const queue = [halfEdge];\n\n    while (queue.length > 0) {\n      // initialize all vertex normals in this triangle\n      const tri = queue.pop().tri;\n      const vertices = tri.vertices;\n      const vertNormals = tri.normals;\n      const faceNormal = tri.faceNormal; // Check if any edge is connected to another triangle edge\n\n      const vertCount = vertices.length;\n\n      for (let i2 = 0; i2 < vertCount; i2++) {\n        const index = i2;\n        const next = (i2 + 1) % vertCount;\n        const v0 = vertices[index];\n        const v1 = vertices[next]; // delete this triangle from the list so it won't be found again\n\n        const hash = hashEdge(v0, v1);\n        delete halfEdgeList[hash];\n        const reverseHash = hashEdge(v1, v0);\n        const otherInfo = halfEdgeList[reverseHash];\n\n        if (otherInfo) {\n          const otherTri = otherInfo.tri;\n          const otherIndex = otherInfo.index;\n          const otherNormals = otherTri.normals;\n          const otherVertCount = otherNormals.length;\n          const otherFaceNormal = otherTri.faceNormal; // NOTE: If the angle between faces is > 67.5 degrees then assume it's\n          // hard edge. There are some cases where the line segments do not line up exactly\n          // with or span multiple triangle edges (see Lunar Vehicle wheels).\n\n          if (Math.abs(otherTri.faceNormal.dot(tri.faceNormal)) < 0.25) {\n            continue;\n          } // if this triangle has already been traversed then it won't be in\n          // the halfEdgeList. If it has not then add it to the queue and delete\n          // it so it won't be found again.\n\n\n          if (reverseHash in halfEdgeList) {\n            queue.push(otherInfo);\n            delete halfEdgeList[reverseHash];\n          } // share the first normal\n\n\n          const otherNext = (otherIndex + 1) % otherVertCount;\n\n          if (vertNormals[index] && otherNormals[otherNext] && vertNormals[index] !== otherNormals[otherNext]) {\n            otherNormals[otherNext].norm.add(vertNormals[index].norm);\n            vertNormals[index].norm = otherNormals[otherNext].norm;\n          }\n\n          let sharedNormal1 = vertNormals[index] || otherNormals[otherNext];\n\n          if (sharedNormal1 === null) {\n            // it's possible to encounter an edge of a triangle that has already been traversed meaning\n            // both edges already have different normals defined and shared. To work around this we create\n            // a wrapper object so when those edges are merged the normals can be updated everywhere.\n            sharedNormal1 = {\n              norm: new Vector3()\n            };\n            normals.push(sharedNormal1.norm);\n          }\n\n          if (vertNormals[index] === null) {\n            vertNormals[index] = sharedNormal1;\n            sharedNormal1.norm.add(faceNormal);\n          }\n\n          if (otherNormals[otherNext] === null) {\n            otherNormals[otherNext] = sharedNormal1;\n            sharedNormal1.norm.add(otherFaceNormal);\n          } // share the second normal\n\n\n          if (vertNormals[next] && otherNormals[otherIndex] && vertNormals[next] !== otherNormals[otherIndex]) {\n            otherNormals[otherIndex].norm.add(vertNormals[next].norm);\n            vertNormals[next].norm = otherNormals[otherIndex].norm;\n          }\n\n          let sharedNormal2 = vertNormals[next] || otherNormals[otherIndex];\n\n          if (sharedNormal2 === null) {\n            sharedNormal2 = {\n              norm: new Vector3()\n            };\n            normals.push(sharedNormal2.norm);\n          }\n\n          if (vertNormals[next] === null) {\n            vertNormals[next] = sharedNormal2;\n            sharedNormal2.norm.add(faceNormal);\n          }\n\n          if (otherNormals[otherIndex] === null) {\n            otherNormals[otherIndex] = sharedNormal2;\n            sharedNormal2.norm.add(otherFaceNormal);\n          }\n        }\n      }\n    }\n  } // The normals of each face have been added up so now we average them by normalizing the vector.\n\n\n  for (let i = 0, l = normals.length; i < l; i++) {\n    normals[i].normalize();\n  }\n}\n\nfunction isPartType(type) {\n  return type === 'Part' || type === 'Unofficial_Part';\n}\n\nfunction isPrimitiveType(type) {\n  return /primitive/i.test(type) || type === 'Subpart';\n}\n\nclass LineParser {\n  constructor(line, lineNumber) {\n    this.line = line;\n    this.lineLength = line.length;\n    this.currentCharIndex = 0;\n    this.currentChar = ' ';\n    this.lineNumber = lineNumber;\n  }\n\n  seekNonSpace() {\n    while (this.currentCharIndex < this.lineLength) {\n      this.currentChar = this.line.charAt(this.currentCharIndex);\n\n      if (this.currentChar !== ' ' && this.currentChar !== '\\t') {\n        return;\n      }\n\n      this.currentCharIndex++;\n    }\n  }\n\n  getToken() {\n    const pos0 = this.currentCharIndex++; // Seek space\n\n    while (this.currentCharIndex < this.lineLength) {\n      this.currentChar = this.line.charAt(this.currentCharIndex);\n\n      if (this.currentChar === ' ' || this.currentChar === '\\t') {\n        break;\n      }\n\n      this.currentCharIndex++;\n    }\n\n    const pos1 = this.currentCharIndex;\n    this.seekNonSpace();\n    return this.line.substring(pos0, pos1);\n  }\n\n  getVector() {\n    return new Vector3(parseFloat(this.getToken()), parseFloat(this.getToken()), parseFloat(this.getToken()));\n  }\n\n  getRemainingString() {\n    return this.line.substring(this.currentCharIndex, this.lineLength);\n  }\n\n  isAtTheEnd() {\n    return this.currentCharIndex >= this.lineLength;\n  }\n\n  setToEnd() {\n    this.currentCharIndex = this.lineLength;\n  }\n\n  getLineNumberString() {\n    return this.lineNumber >= 0 ? ' at line ' + this.lineNumber : '';\n  }\n\n} // Fetches and parses an intermediate representation of LDraw parts files.\n\n\nclass LDrawParsedCache {\n  constructor(loader) {\n    this.loader = loader;\n    this._cache = {};\n  }\n\n  cloneResult(original) {\n    const result = {}; // vertices are transformed and normals computed before being converted to geometry\n    // so these pieces must be cloned.\n\n    result.faces = original.faces.map(face => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map(v => v.clone()),\n        normals: face.normals.map(() => null),\n        faceNormal: null\n      };\n    });\n    result.conditionalSegments = original.conditionalSegments.map(face => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map(v => v.clone()),\n        controlPoints: face.controlPoints.map(v => v.clone())\n      };\n    });\n    result.lineSegments = original.lineSegments.map(face => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map(v => v.clone())\n      };\n    }); // none if this is subsequently modified\n\n    result.type = original.type;\n    result.category = original.category;\n    result.keywords = original.keywords;\n    result.subobjects = original.subobjects;\n    result.totalFaces = original.totalFaces;\n    result.startingConstructionStep = original.startingConstructionStep;\n    result.materials = original.materials;\n    result.group = null;\n    return result;\n  }\n\n  async fetchData(fileName) {\n    let triedLowerCase = false;\n    let locationState = FILE_LOCATION_AS_IS;\n\n    while (locationState !== FILE_LOCATION_NOT_FOUND) {\n      let subobjectURL = fileName;\n\n      switch (locationState) {\n        case FILE_LOCATION_AS_IS:\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_PARTS:\n          subobjectURL = 'parts/' + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_P:\n          subobjectURL = 'p/' + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_MODELS:\n          subobjectURL = 'models/' + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_RELATIVE:\n          subobjectURL = fileName.substring(0, fileName.lastIndexOf('/') + 1) + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_ABSOLUTE:\n          if (triedLowerCase) {\n            // Try absolute path\n            locationState = FILE_LOCATION_NOT_FOUND;\n          } else {\n            // Next attempt is lower case\n            fileName = fileName.toLowerCase();\n            subobjectURL = fileName;\n            triedLowerCase = true;\n            locationState = FILE_LOCATION_AS_IS;\n          }\n\n          break;\n      }\n\n      const loader = this.loader;\n      const fileLoader = new FileLoader(loader.manager);\n      fileLoader.setPath(loader.partsLibraryPath);\n      fileLoader.setRequestHeader(loader.requestHeader);\n      fileLoader.setWithCredentials(loader.withCredentials);\n\n      try {\n        const text = await fileLoader.loadAsync(subobjectURL);\n        return text;\n      } catch {\n        continue;\n      }\n    }\n\n    throw new Error('LDrawLoader: Subobject \"' + fileName + '\" could not be loaded.');\n  }\n\n  parse(text, fileName = null) {\n    const loader = this.loader; // final results\n\n    const faces = [];\n    const lineSegments = [];\n    const conditionalSegments = [];\n    const subobjects = [];\n    const materials = {};\n\n    const getLocalMaterial = colorCode => {\n      return materials[colorCode] || null;\n    };\n\n    let type = 'Model';\n    let category = null;\n    let keywords = null;\n    let totalFaces = 0; // split into lines\n\n    if (text.indexOf('\\r\\n') !== -1) {\n      // This is faster than String.split with regex that splits on both\n      text = text.replace(/\\r\\n/g, '\\n');\n    }\n\n    const lines = text.split('\\n');\n    const numLines = lines.length;\n    let parsingEmbeddedFiles = false;\n    let currentEmbeddedFileName = null;\n    let currentEmbeddedText = null;\n    let bfcCertified = false;\n    let bfcCCW = true;\n    let bfcInverted = false;\n    let bfcCull = true;\n    let startingConstructionStep = false; // Parse all line commands\n\n    for (let lineIndex = 0; lineIndex < numLines; lineIndex++) {\n      const line = lines[lineIndex];\n      if (line.length === 0) continue;\n\n      if (parsingEmbeddedFiles) {\n        if (line.startsWith('0 FILE ')) {\n          // Save previous embedded file in the cache\n          this.setData(currentEmbeddedFileName, currentEmbeddedText); // New embedded text file\n\n          currentEmbeddedFileName = line.substring(7);\n          currentEmbeddedText = '';\n        } else {\n          currentEmbeddedText += line + '\\n';\n        }\n\n        continue;\n      }\n\n      const lp = new LineParser(line, lineIndex + 1);\n      lp.seekNonSpace();\n\n      if (lp.isAtTheEnd()) {\n        // Empty line\n        continue;\n      } // Parse the line type\n\n\n      const lineType = lp.getToken();\n      let material;\n      let colorCode;\n      let segment;\n      let ccw;\n      let doubleSided;\n      let v0, v1, v2, v3, c0, c1;\n\n      switch (lineType) {\n        // Line type 0: Comment or META\n        case '0':\n          // Parse meta directive\n          const meta = lp.getToken();\n\n          if (meta) {\n            switch (meta) {\n              case '!LDRAW_ORG':\n                type = lp.getToken();\n                break;\n\n              case '!COLOUR':\n                material = loader.parseColorMetaDirective(lp);\n\n                if (material) {\n                  materials[material.userData.code] = material;\n                } else {\n                  console.warn('LDrawLoader: Error parsing material' + lp.getLineNumberString());\n                }\n\n                break;\n\n              case '!CATEGORY':\n                category = lp.getToken();\n                break;\n\n              case '!KEYWORDS':\n                const newKeywords = lp.getRemainingString().split(',');\n\n                if (newKeywords.length > 0) {\n                  if (!keywords) {\n                    keywords = [];\n                  }\n\n                  newKeywords.forEach(function (keyword) {\n                    keywords.push(keyword.trim());\n                  });\n                }\n\n                break;\n\n              case 'FILE':\n                if (lineIndex > 0) {\n                  // Start embedded text files parsing\n                  parsingEmbeddedFiles = true;\n                  currentEmbeddedFileName = lp.getRemainingString();\n                  currentEmbeddedText = '';\n                  bfcCertified = false;\n                  bfcCCW = true;\n                }\n\n                break;\n\n              case 'BFC':\n                // Changes to the backface culling state\n                while (!lp.isAtTheEnd()) {\n                  const token = lp.getToken();\n\n                  switch (token) {\n                    case 'CERTIFY':\n                    case 'NOCERTIFY':\n                      bfcCertified = token === 'CERTIFY';\n                      bfcCCW = true;\n                      break;\n\n                    case 'CW':\n                    case 'CCW':\n                      bfcCCW = token === 'CCW';\n                      break;\n\n                    case 'INVERTNEXT':\n                      bfcInverted = true;\n                      break;\n\n                    case 'CLIP':\n                    case 'NOCLIP':\n                      bfcCull = token === 'CLIP';\n                      break;\n\n                    default:\n                      console.warn('THREE.LDrawLoader: BFC directive \"' + token + '\" is unknown.');\n                      break;\n                  }\n                }\n\n                break;\n\n              case 'STEP':\n                startingConstructionStep = true;\n                break;\n            }\n          }\n\n          break;\n        // Line type 1: Sub-object file\n\n        case '1':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          const posX = parseFloat(lp.getToken());\n          const posY = parseFloat(lp.getToken());\n          const posZ = parseFloat(lp.getToken());\n          const m0 = parseFloat(lp.getToken());\n          const m1 = parseFloat(lp.getToken());\n          const m2 = parseFloat(lp.getToken());\n          const m3 = parseFloat(lp.getToken());\n          const m4 = parseFloat(lp.getToken());\n          const m5 = parseFloat(lp.getToken());\n          const m6 = parseFloat(lp.getToken());\n          const m7 = parseFloat(lp.getToken());\n          const m8 = parseFloat(lp.getToken());\n          const matrix = new Matrix4().set(m0, m1, m2, posX, m3, m4, m5, posY, m6, m7, m8, posZ, 0, 0, 0, 1);\n          let fileName = lp.getRemainingString().trim().replace(/\\\\/g, '/');\n\n          if (loader.fileMap[fileName]) {\n            // Found the subobject path in the preloaded file path map\n            fileName = loader.fileMap[fileName];\n          } else {\n            // Standardized subfolders\n            if (fileName.startsWith('s/')) {\n              fileName = 'parts/' + fileName;\n            } else if (fileName.startsWith('48/')) {\n              fileName = 'p/' + fileName;\n            }\n          }\n\n          subobjects.push({\n            material: material,\n            colorCode: colorCode,\n            matrix: matrix,\n            fileName: fileName,\n            inverted: bfcInverted,\n            startingConstructionStep: startingConstructionStep\n          });\n          bfcInverted = false;\n          break;\n        // Line type 2: Line segment\n\n        case '2':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          v0 = lp.getVector();\n          v1 = lp.getVector();\n          segment = {\n            material: material,\n            colorCode: colorCode,\n            vertices: [v0, v1]\n          };\n          lineSegments.push(segment);\n          break;\n        // Line type 5: Conditional Line segment\n\n        case '5':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          v0 = lp.getVector();\n          v1 = lp.getVector();\n          c0 = lp.getVector();\n          c1 = lp.getVector();\n          segment = {\n            material: material,\n            colorCode: colorCode,\n            vertices: [v0, v1],\n            controlPoints: [c0, c1]\n          };\n          conditionalSegments.push(segment);\n          break;\n        // Line type 3: Triangle\n\n        case '3':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          ccw = bfcCCW;\n          doubleSided = !bfcCertified || !bfcCull;\n\n          if (ccw === true) {\n            v0 = lp.getVector();\n            v1 = lp.getVector();\n            v2 = lp.getVector();\n          } else {\n            v2 = lp.getVector();\n            v1 = lp.getVector();\n            v0 = lp.getVector();\n          }\n\n          faces.push({\n            material: material,\n            colorCode: colorCode,\n            faceNormal: null,\n            vertices: [v0, v1, v2],\n            normals: [null, null, null]\n          });\n          totalFaces++;\n\n          if (doubleSided === true) {\n            faces.push({\n              material: material,\n              colorCode: colorCode,\n              faceNormal: null,\n              vertices: [v2, v1, v0],\n              normals: [null, null, null]\n            });\n            totalFaces++;\n          }\n\n          break;\n        // Line type 4: Quadrilateral\n\n        case '4':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          ccw = bfcCCW;\n          doubleSided = !bfcCertified || !bfcCull;\n\n          if (ccw === true) {\n            v0 = lp.getVector();\n            v1 = lp.getVector();\n            v2 = lp.getVector();\n            v3 = lp.getVector();\n          } else {\n            v3 = lp.getVector();\n            v2 = lp.getVector();\n            v1 = lp.getVector();\n            v0 = lp.getVector();\n          } // specifically place the triangle diagonal in the v0 and v1 slots so we can\n          // account for the doubling of vertices later when smoothing normals.\n\n\n          faces.push({\n            material: material,\n            colorCode: colorCode,\n            faceNormal: null,\n            vertices: [v0, v1, v2, v3],\n            normals: [null, null, null, null]\n          });\n          totalFaces += 2;\n\n          if (doubleSided === true) {\n            faces.push({\n              material: material,\n              colorCode: colorCode,\n              faceNormal: null,\n              vertices: [v3, v2, v1, v0],\n              normals: [null, null, null, null]\n            });\n            totalFaces += 2;\n          }\n\n          break;\n\n        default:\n          throw new Error('LDrawLoader: Unknown line type \"' + lineType + '\"' + lp.getLineNumberString() + '.');\n      }\n    }\n\n    if (parsingEmbeddedFiles) {\n      this.setData(currentEmbeddedFileName, currentEmbeddedText);\n    }\n\n    return {\n      faces,\n      conditionalSegments,\n      lineSegments,\n      type,\n      category,\n      keywords,\n      subobjects,\n      totalFaces,\n      startingConstructionStep,\n      materials,\n      fileName,\n      group: null\n    };\n  } // returns an (optionally cloned) instance of the data\n\n\n  getData(fileName, clone = true) {\n    const key = fileName.toLowerCase();\n    const result = this._cache[key];\n\n    if (result === null || result instanceof Promise) {\n      return null;\n    }\n\n    if (clone) {\n      return this.cloneResult(result);\n    } else {\n      return result;\n    }\n  } // kicks off a fetch and parse of the requested data if it hasn't already been loaded. Returns when\n  // the data is ready to use and can be retrieved synchronously with \"getData\".\n\n\n  async ensureDataLoaded(fileName) {\n    const key = fileName.toLowerCase();\n\n    if (!(key in this._cache)) {\n      // replace the promise with a copy of the parsed data for immediate processing\n      this._cache[key] = this.fetchData(fileName).then(text => {\n        const info = this.parse(text, fileName);\n        this._cache[key] = info;\n        return info;\n      });\n    }\n\n    await this._cache[key];\n  } // sets the data in the cache from parsed data\n\n\n  setData(fileName, text) {\n    const key = fileName.toLowerCase();\n    this._cache[key] = this.parse(text, fileName);\n  }\n\n} // returns the material for an associated color code. If the color code is 16 for a face or 24 for\n// an edge then the passthroughColorCode is used.\n\n\nfunction getMaterialFromCode(colorCode, parentColorCode, materialHierarchy, forEdge) {\n  const isPassthrough = !forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n\n  if (isPassthrough) {\n    colorCode = parentColorCode;\n  }\n\n  return materialHierarchy[colorCode] || null;\n} // Class used to parse and build LDraw parts as three.js objects and cache them if they're a \"Part\" type.\n\n\nclass LDrawPartsGeometryCache {\n  constructor(loader) {\n    this.loader = loader;\n    this.parseCache = new LDrawParsedCache(loader);\n    this._cache = {};\n  } // Convert the given file information into a mesh by processing subobjects.\n\n\n  async processIntoMesh(info) {\n    const loader = this.loader;\n    const parseCache = this.parseCache;\n    const faceMaterials = new Set(); // Processes the part subobject information to load child parts and merge geometry onto part\n    // piece object.\n\n    const processInfoSubobjects = async (info, subobject = null) => {\n      const subobjects = info.subobjects;\n      const promises = []; // Trigger load of all subobjects. If a subobject isn't a primitive then load it as a separate\n      // group which lets instruction steps apply correctly.\n\n      for (let i = 0, l = subobjects.length; i < l; i++) {\n        const subobject = subobjects[i];\n        const promise = parseCache.ensureDataLoaded(subobject.fileName).then(() => {\n          const subobjectInfo = parseCache.getData(subobject.fileName, false);\n\n          if (!isPrimitiveType(subobjectInfo.type)) {\n            return this.loadModel(subobject.fileName).catch(error => {\n              console.warn(error);\n              return null;\n            });\n          }\n\n          return processInfoSubobjects(parseCache.getData(subobject.fileName), subobject);\n        });\n        promises.push(promise);\n      }\n\n      const group = new Group();\n      group.userData.category = info.category;\n      group.userData.keywords = info.keywords;\n      info.group = group;\n      const subobjectInfos = await Promise.all(promises);\n\n      for (let i = 0, l = subobjectInfos.length; i < l; i++) {\n        const subobject = info.subobjects[i];\n        const subobjectInfo = subobjectInfos[i];\n\n        if (subobjectInfo === null) {\n          // the subobject failed to load\n          continue;\n        } // if the subobject was loaded as a separate group then apply the parent scopes materials\n\n\n        if (subobjectInfo.isGroup) {\n          const subobjectGroup = subobjectInfo;\n          subobject.matrix.decompose(subobjectGroup.position, subobjectGroup.quaternion, subobjectGroup.scale);\n          subobjectGroup.userData.startingConstructionStep = subobject.startingConstructionStep;\n          subobjectGroup.name = subobject.fileName;\n          loader.applyMaterialsToMesh(subobjectGroup, subobject.colorCode, info.materials);\n          group.add(subobjectGroup);\n          continue;\n        } // add the subobject group if it has children in case it has both children and primitives\n\n\n        if (subobjectInfo.group.children.length) {\n          group.add(subobjectInfo.group);\n        } // transform the primitives into the local space of the parent piece and append them to\n        // to the parent primitives list.\n\n\n        const parentLineSegments = info.lineSegments;\n        const parentConditionalSegments = info.conditionalSegments;\n        const parentFaces = info.faces;\n        const lineSegments = subobjectInfo.lineSegments;\n        const conditionalSegments = subobjectInfo.conditionalSegments;\n        const faces = subobjectInfo.faces;\n        const matrix = subobject.matrix;\n        const inverted = subobject.inverted;\n        const matrixScaleInverted = matrix.determinant() < 0;\n        const colorCode = subobject.colorCode;\n        const lineColorCode = colorCode === MAIN_COLOUR_CODE ? MAIN_EDGE_COLOUR_CODE : colorCode;\n\n        for (let i = 0, l = lineSegments.length; i < l; i++) {\n          const ls = lineSegments[i];\n          const vertices = ls.vertices;\n          vertices[0].applyMatrix4(matrix);\n          vertices[1].applyMatrix4(matrix);\n          ls.colorCode = ls.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : ls.colorCode;\n          ls.material = ls.material || getMaterialFromCode(ls.colorCode, ls.colorCode, info.materials, true);\n          parentLineSegments.push(ls);\n        }\n\n        for (let i = 0, l = conditionalSegments.length; i < l; i++) {\n          const os = conditionalSegments[i];\n          const vertices = os.vertices;\n          const controlPoints = os.controlPoints;\n          vertices[0].applyMatrix4(matrix);\n          vertices[1].applyMatrix4(matrix);\n          controlPoints[0].applyMatrix4(matrix);\n          controlPoints[1].applyMatrix4(matrix);\n          os.colorCode = os.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : os.colorCode;\n          os.material = os.material || getMaterialFromCode(os.colorCode, os.colorCode, info.materials, true);\n          parentConditionalSegments.push(os);\n        }\n\n        for (let i = 0, l = faces.length; i < l; i++) {\n          const tri = faces[i];\n          const vertices = tri.vertices;\n\n          for (let i = 0, l = vertices.length; i < l; i++) {\n            vertices[i].applyMatrix4(matrix);\n          }\n\n          tri.colorCode = tri.colorCode === MAIN_COLOUR_CODE ? colorCode : tri.colorCode;\n          tri.material = tri.material || getMaterialFromCode(tri.colorCode, colorCode, info.materials, false);\n          faceMaterials.add(tri.colorCode); // If the scale of the object is negated then the triangle winding order\n          // needs to be flipped.\n\n          if (matrixScaleInverted !== inverted) {\n            vertices.reverse();\n          }\n\n          parentFaces.push(tri);\n        }\n\n        info.totalFaces += subobjectInfo.totalFaces;\n      } // Apply the parent subobjects pass through material code to this object. This is done several times due\n      // to material scoping.\n\n\n      if (subobject) {\n        loader.applyMaterialsToMesh(group, subobject.colorCode, info.materials);\n      }\n\n      return info;\n    }; // Track material use to see if we need to use the normal smooth slow path for hard edges.\n\n\n    for (let i = 0, l = info.faces; i < l; i++) {\n      faceMaterials.add(info.faces[i].colorCode);\n    }\n\n    await processInfoSubobjects(info);\n\n    if (loader.smoothNormals) {\n      const checkSubSegments = faceMaterials.size > 1;\n      generateFaceNormals(info.faces);\n      smoothNormals(info.faces, info.lineSegments, checkSubSegments);\n    } // Add the primitive objects and metadata.\n\n\n    const group = info.group;\n\n    if (info.faces.length > 0) {\n      group.add(createObject(info.faces, 3, false, info.totalFaces));\n    }\n\n    if (info.lineSegments.length > 0) {\n      group.add(createObject(info.lineSegments, 2));\n    }\n\n    if (info.conditionalSegments.length > 0) {\n      group.add(createObject(info.conditionalSegments, 2, true));\n    }\n\n    return group;\n  }\n\n  hasCachedModel(fileName) {\n    return fileName !== null && fileName.toLowerCase() in this._cache;\n  }\n\n  async getCachedModel(fileName) {\n    if (fileName !== null && this.hasCachedModel(fileName)) {\n      const key = fileName.toLowerCase();\n      const group = await this._cache[key];\n      return group.clone();\n    } else {\n      return null;\n    }\n  } // Loads and parses the model with the given file name. Returns a cached copy if available.\n\n\n  async loadModel(fileName) {\n    const parseCache = this.parseCache;\n    const key = fileName.toLowerCase();\n\n    if (this.hasCachedModel(fileName)) {\n      // Return cached model if available.\n      return this.getCachedModel(fileName);\n    } else {\n      // Otherwise parse a new model.\n      // Ensure the file data is loaded and pre parsed.\n      await parseCache.ensureDataLoaded(fileName);\n      const info = parseCache.getData(fileName);\n      const promise = this.processIntoMesh(info); // Now that the file has loaded it's possible that another part parse has been waiting in parallel\n      // so check the cache again to see if it's been added since the last async operation so we don't\n      // do unnecessary work.\n\n      if (this.hasCachedModel(fileName)) {\n        return this.getCachedModel(fileName);\n      } // Cache object if it's a part so it can be reused later.\n\n\n      if (isPartType(info.type)) {\n        this._cache[key] = promise;\n      } // return a copy\n\n\n      const group = await promise;\n      return group.clone();\n    }\n  } // parses the given model text into a renderable object. Returns cached copy if available.\n\n\n  async parseModel(text) {\n    const parseCache = this.parseCache;\n    const info = parseCache.parse(text);\n\n    if (isPartType(info.type) && this.hasCachedModel(info.fileName)) {\n      return this.getCachedModel(info.fileName);\n    }\n\n    return this.processIntoMesh(info);\n  }\n\n}\n\nfunction sortByMaterial(a, b) {\n  if (a.colorCode === b.colorCode) {\n    return 0;\n  }\n\n  if (a.colorCode < b.colorCode) {\n    return -1;\n  }\n\n  return 1;\n}\n\nfunction createObject(elements, elementSize, isConditionalSegments = false, totalElements = null) {\n  // Creates a LineSegments (elementSize = 2) or a Mesh (elementSize = 3 )\n  // With per face / segment material, implemented with mesh groups and materials array\n  // Sort the faces or line segments by color code to make later the mesh groups\n  elements.sort(sortByMaterial);\n\n  if (totalElements === null) {\n    totalElements = elements.length;\n  }\n\n  const positions = new Float32Array(elementSize * totalElements * 3);\n  const normals = elementSize === 3 ? new Float32Array(elementSize * totalElements * 3) : null;\n  const materials = [];\n  const quadArray = new Array(6);\n  const bufferGeometry = new BufferGeometry();\n  let prevMaterial = null;\n  let index0 = 0;\n  let numGroupVerts = 0;\n  let offset = 0;\n\n  for (let iElem = 0, nElem = elements.length; iElem < nElem; iElem++) {\n    const elem = elements[iElem];\n    let vertices = elem.vertices;\n\n    if (vertices.length === 4) {\n      quadArray[0] = vertices[0];\n      quadArray[1] = vertices[1];\n      quadArray[2] = vertices[2];\n      quadArray[3] = vertices[0];\n      quadArray[4] = vertices[2];\n      quadArray[5] = vertices[3];\n      vertices = quadArray;\n    }\n\n    for (let j = 0, l = vertices.length; j < l; j++) {\n      const v = vertices[j];\n      const index = offset + j * 3;\n      positions[index + 0] = v.x;\n      positions[index + 1] = v.y;\n      positions[index + 2] = v.z;\n    } // create the normals array if this is a set of faces\n\n\n    if (elementSize === 3) {\n      if (!elem.faceNormal) {\n        const v0 = vertices[0];\n        const v1 = vertices[1];\n        const v2 = vertices[2];\n\n        _tempVec0.subVectors(v1, v0);\n\n        _tempVec1.subVectors(v2, v1);\n\n        elem.faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n      }\n\n      let elemNormals = elem.normals;\n\n      if (elemNormals.length === 4) {\n        quadArray[0] = elemNormals[0];\n        quadArray[1] = elemNormals[1];\n        quadArray[2] = elemNormals[2];\n        quadArray[3] = elemNormals[0];\n        quadArray[4] = elemNormals[2];\n        quadArray[5] = elemNormals[3];\n        elemNormals = quadArray;\n      }\n\n      for (let j = 0, l = elemNormals.length; j < l; j++) {\n        // use face normal if a vertex normal is not provided\n        let n = elem.faceNormal;\n\n        if (elemNormals[j]) {\n          n = elemNormals[j].norm;\n        }\n\n        const index = offset + j * 3;\n        normals[index + 0] = n.x;\n        normals[index + 1] = n.y;\n        normals[index + 2] = n.z;\n      }\n    }\n\n    if (prevMaterial !== elem.colorCode) {\n      if (prevMaterial !== null) {\n        bufferGeometry.addGroup(index0, numGroupVerts, materials.length - 1);\n      }\n\n      const material = elem.material;\n\n      if (material !== null) {\n        if (elementSize === 3) {\n          materials.push(material);\n        } else if (elementSize === 2) {\n          if (material !== null) {\n            if (isConditionalSegments) {\n              materials.push(material.userData.edgeMaterial.userData.conditionalEdgeMaterial);\n            } else {\n              materials.push(material.userData.edgeMaterial);\n            }\n          } else {\n            materials.push(null);\n          }\n        }\n      } else {\n        // If a material has not been made available yet then keep the color code string in the material array\n        // to save the spot for the material once a parent scopes materials are being applied to the object.\n        materials.push(elem.colorCode);\n      }\n\n      prevMaterial = elem.colorCode;\n      index0 = offset / 3;\n      numGroupVerts = vertices.length;\n    } else {\n      numGroupVerts += vertices.length;\n    }\n\n    offset += 3 * vertices.length;\n  }\n\n  if (numGroupVerts > 0) {\n    bufferGeometry.addGroup(index0, Infinity, materials.length - 1);\n  }\n\n  bufferGeometry.setAttribute('position', new BufferAttribute(positions, 3));\n\n  if (normals !== null) {\n    bufferGeometry.setAttribute('normal', new BufferAttribute(normals, 3));\n  }\n\n  let object3d = null;\n\n  if (elementSize === 2) {\n    if (isConditionalSegments) {\n      object3d = new ConditionalLineSegments(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n    } else {\n      object3d = new LineSegments(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n    }\n  } else if (elementSize === 3) {\n    object3d = new Mesh(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n  }\n\n  if (isConditionalSegments) {\n    object3d.isConditionalLine = true;\n    const controlArray0 = new Float32Array(elements.length * 3 * 2);\n    const controlArray1 = new Float32Array(elements.length * 3 * 2);\n    const directionArray = new Float32Array(elements.length * 3 * 2);\n\n    for (let i = 0, l = elements.length; i < l; i++) {\n      const os = elements[i];\n      const vertices = os.vertices;\n      const controlPoints = os.controlPoints;\n      const c0 = controlPoints[0];\n      const c1 = controlPoints[1];\n      const v0 = vertices[0];\n      const v1 = vertices[1];\n      const index = i * 3 * 2;\n      controlArray0[index + 0] = c0.x;\n      controlArray0[index + 1] = c0.y;\n      controlArray0[index + 2] = c0.z;\n      controlArray0[index + 3] = c0.x;\n      controlArray0[index + 4] = c0.y;\n      controlArray0[index + 5] = c0.z;\n      controlArray1[index + 0] = c1.x;\n      controlArray1[index + 1] = c1.y;\n      controlArray1[index + 2] = c1.z;\n      controlArray1[index + 3] = c1.x;\n      controlArray1[index + 4] = c1.y;\n      controlArray1[index + 5] = c1.z;\n      directionArray[index + 0] = v1.x - v0.x;\n      directionArray[index + 1] = v1.y - v0.y;\n      directionArray[index + 2] = v1.z - v0.z;\n      directionArray[index + 3] = v1.x - v0.x;\n      directionArray[index + 4] = v1.y - v0.y;\n      directionArray[index + 5] = v1.z - v0.z;\n    }\n\n    bufferGeometry.setAttribute('control0', new BufferAttribute(controlArray0, 3, false));\n    bufferGeometry.setAttribute('control1', new BufferAttribute(controlArray1, 3, false));\n    bufferGeometry.setAttribute('direction', new BufferAttribute(directionArray, 3, false));\n  }\n\n  return object3d;\n} //\n\n\nclass LDrawLoader extends Loader {\n  constructor(manager) {\n    super(manager); // Array of THREE.Material\n\n    this.materials = [];\n    this.materialLibrary = {}; // This also allows to handle the embedded text files (\"0 FILE\" lines)\n\n    this.partsCache = new LDrawPartsGeometryCache(this); // This object is a map from file names to paths. It agilizes the paths search. If it is not set then files will be searched by trial and error.\n\n    this.fileMap = {}; // Initializes the materials library with default materials\n\n    this.setMaterials([]); // If this flag is set to true the vertex normals will be smoothed.\n\n    this.smoothNormals = true; // The path to load parts from the LDraw parts library from.\n\n    this.partsLibraryPath = '';\n  }\n\n  setPartsLibraryPath(path) {\n    this.partsLibraryPath = path;\n    return this;\n  }\n\n  async preloadMaterials(url) {\n    const fileLoader = new FileLoader(this.manager);\n    fileLoader.setPath(this.path);\n    fileLoader.setRequestHeader(this.requestHeader);\n    fileLoader.setWithCredentials(this.withCredentials);\n    const text = await fileLoader.loadAsync(url);\n    const colorLineRegex = /^0 !COLOUR/;\n    const lines = text.split(/[\\n\\r]/g);\n    const materials = [];\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i];\n\n      if (colorLineRegex.test(line)) {\n        const directive = line.replace(colorLineRegex, '');\n        const material = this.parseColorMetaDirective(new LineParser(directive));\n        materials.push(material);\n      }\n    }\n\n    this.setMaterials(materials);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const fileLoader = new FileLoader(this.manager);\n    fileLoader.setPath(this.path);\n    fileLoader.setRequestHeader(this.requestHeader);\n    fileLoader.setWithCredentials(this.withCredentials);\n    fileLoader.load(url, text => {\n      this.partsCache.parseModel(text, this.materialLibrary).then(group => {\n        this.applyMaterialsToMesh(group, MAIN_COLOUR_CODE, this.materialLibrary, true);\n        this.computeConstructionSteps(group);\n        onLoad(group);\n      }).catch(onError);\n    }, onProgress, onError);\n  }\n\n  parse(text, onLoad) {\n    this.partsCache.parseModel(text, this.materialLibrary).then(group => {\n      this.computeConstructionSteps(group);\n      onLoad(group);\n    });\n  }\n\n  setMaterials(materials) {\n    this.materialLibrary = {};\n    this.materials = [];\n\n    for (let i = 0, l = materials.length; i < l; i++) {\n      this.addMaterial(materials[i]);\n    } // Add default main triangle and line edge materials (used in pieces that can be colored with a main color)\n\n\n    this.addMaterial(this.parseColorMetaDirective(new LineParser('Main_Colour CODE 16 VALUE #FF8080 EDGE #333333')));\n    this.addMaterial(this.parseColorMetaDirective(new LineParser('Edge_Colour CODE 24 VALUE #A0A0A0 EDGE #333333')));\n    return this;\n  }\n\n  setFileMap(fileMap) {\n    this.fileMap = fileMap;\n    return this;\n  }\n\n  addMaterial(material) {\n    // Adds a material to the material library which is on top of the parse scopes stack. And also to the materials array\n    const matLib = this.materialLibrary;\n\n    if (!matLib[material.userData.code]) {\n      this.materials.push(material);\n      matLib[material.userData.code] = material;\n    }\n\n    return this;\n  }\n\n  getMaterial(colorCode) {\n    if (colorCode.startsWith('0x2')) {\n      // Special 'direct' material value (RGB color)\n      const color = colorCode.substring(3);\n      return this.parseColorMetaDirective(new LineParser('Direct_Color_' + color + ' CODE -1 VALUE #' + color + ' EDGE #' + color + ''));\n    }\n\n    return this.materialLibrary[colorCode] || null;\n  } // Applies the appropriate materials to a prebuilt hierarchy of geometry. Assumes that color codes are present\n  // in the material array if they need to be filled in.\n\n\n  applyMaterialsToMesh(group, parentColorCode, materialHierarchy, finalMaterialPass = false) {\n    // find any missing materials as indicated by a color code string and replace it with a material from the current material lib\n    const loader = this;\n    const parentIsPassthrough = parentColorCode === MAIN_COLOUR_CODE;\n    group.traverse(c => {\n      if (c.isMesh || c.isLineSegments) {\n        if (Array.isArray(c.material)) {\n          for (let i = 0, l = c.material.length; i < l; i++) {\n            if (!c.material[i].isMaterial) {\n              c.material[i] = getMaterial(c, c.material[i]);\n            }\n          }\n        } else if (!c.material.isMaterial) {\n          c.material = getMaterial(c, c.material);\n        }\n      }\n    }); // Returns the appropriate material for the object (line or face) given color code. If the code is \"pass through\"\n    // (24 for lines, 16 for edges) then the pass through color code is used. If that is also pass through then it's\n    // simply returned for the subsequent material application.\n\n    function getMaterial(c, colorCode) {\n      // if our parent is a passthrough color code and we don't have the current material color available then\n      // return early.\n      if (parentIsPassthrough && !(colorCode in materialHierarchy) && !finalMaterialPass) {\n        return colorCode;\n      }\n\n      const forEdge = c.isLineSegments || c.isConditionalLine;\n      const isPassthrough = !forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n\n      if (isPassthrough) {\n        colorCode = parentColorCode;\n      }\n\n      let material = null;\n\n      if (colorCode in materialHierarchy) {\n        material = materialHierarchy[colorCode];\n      } else if (finalMaterialPass) {\n        // see if we can get the final material from from the \"getMaterial\" function which will attempt to\n        // parse the \"direct\" colors\n        material = loader.getMaterial(colorCode);\n\n        if (material === null) {\n          // otherwise throw an error if this is final opportunity to set the material\n          throw new Error(`LDrawLoader: Material properties for code ${colorCode} not available.`);\n        }\n      } else {\n        return colorCode;\n      }\n\n      if (c.isLineSegments) {\n        material = material.userData.edgeMaterial;\n\n        if (c.isConditionalLine) {\n          material = material.userData.conditionalEdgeMaterial;\n        }\n      }\n\n      return material;\n    }\n  }\n\n  getMainMaterial() {\n    return this.getMaterial(MAIN_COLOUR_CODE);\n  }\n\n  getMainEdgeMaterial() {\n    return this.getMaterial(MAIN_EDGE_COLOUR_CODE);\n  }\n\n  parseColorMetaDirective(lineParser) {\n    // Parses a color definition and returns a THREE.Material\n    let code = null; // Triangle and line colors\n\n    let color = 0xff00ff;\n    let edgeColor = 0xff00ff; // Transparency\n\n    let alpha = 1;\n    let isTransparent = false; // Self-illumination:\n\n    let luminance = 0;\n    let finishType = FINISH_TYPE_DEFAULT;\n    let edgeMaterial = null;\n    const name = lineParser.getToken();\n\n    if (!name) {\n      throw new Error('LDrawLoader: Material name was expected after \"!COLOUR tag' + lineParser.getLineNumberString() + '.');\n    } // Parse tag tokens and their parameters\n\n\n    let token = null;\n\n    while (true) {\n      token = lineParser.getToken();\n\n      if (!token) {\n        break;\n      }\n\n      switch (token.toUpperCase()) {\n        case 'CODE':\n          code = lineParser.getToken();\n          break;\n\n        case 'VALUE':\n          color = lineParser.getToken();\n\n          if (color.startsWith('0x')) {\n            color = '#' + color.substring(2);\n          } else if (!color.startsWith('#')) {\n            throw new Error('LDrawLoader: Invalid color while parsing material' + lineParser.getLineNumberString() + '.');\n          }\n\n          break;\n\n        case 'EDGE':\n          edgeColor = lineParser.getToken();\n\n          if (edgeColor.startsWith('0x')) {\n            edgeColor = '#' + edgeColor.substring(2);\n          } else if (!edgeColor.startsWith('#')) {\n            // Try to see if edge color is a color code\n            edgeMaterial = this.getMaterial(edgeColor);\n\n            if (!edgeMaterial) {\n              throw new Error('LDrawLoader: Invalid edge color while parsing material' + lineParser.getLineNumberString() + '.');\n            } // Get the edge material for this triangle material\n\n\n            edgeMaterial = edgeMaterial.userData.edgeMaterial;\n          }\n\n          break;\n\n        case 'ALPHA':\n          alpha = parseInt(lineParser.getToken());\n\n          if (isNaN(alpha)) {\n            throw new Error('LDrawLoader: Invalid alpha value in material definition' + lineParser.getLineNumberString() + '.');\n          }\n\n          alpha = Math.max(0, Math.min(1, alpha / 255));\n\n          if (alpha < 1) {\n            isTransparent = true;\n          }\n\n          break;\n\n        case 'LUMINANCE':\n          luminance = parseInt(lineParser.getToken());\n\n          if (isNaN(luminance)) {\n            throw new Error('LDrawLoader: Invalid luminance value in material definition' + LineParser.getLineNumberString() + '.');\n          }\n\n          luminance = Math.max(0, Math.min(1, luminance / 255));\n          break;\n\n        case 'CHROME':\n          finishType = FINISH_TYPE_CHROME;\n          break;\n\n        case 'PEARLESCENT':\n          finishType = FINISH_TYPE_PEARLESCENT;\n          break;\n\n        case 'RUBBER':\n          finishType = FINISH_TYPE_RUBBER;\n          break;\n\n        case 'MATTE_METALLIC':\n          finishType = FINISH_TYPE_MATTE_METALLIC;\n          break;\n\n        case 'METAL':\n          finishType = FINISH_TYPE_METAL;\n          break;\n\n        case 'MATERIAL':\n          // Not implemented\n          lineParser.setToEnd();\n          break;\n\n        default:\n          throw new Error('LDrawLoader: Unknown token \"' + token + '\" while parsing material' + lineParser.getLineNumberString() + '.');\n      }\n    }\n\n    let material = null;\n\n    switch (finishType) {\n      case FINISH_TYPE_DEFAULT:\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.3,\n          metalness: 0\n        });\n        break;\n\n      case FINISH_TYPE_PEARLESCENT:\n        // Try to imitate pearlescency by making the surface glossy\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.3,\n          metalness: 0.25\n        });\n        break;\n\n      case FINISH_TYPE_CHROME:\n        // Mirror finish surface\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0,\n          metalness: 1\n        });\n        break;\n\n      case FINISH_TYPE_RUBBER:\n        // Rubber finish\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.9,\n          metalness: 0\n        });\n        break;\n\n      case FINISH_TYPE_MATTE_METALLIC:\n        // Brushed metal finish\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.8,\n          metalness: 0.4\n        });\n        break;\n\n      case FINISH_TYPE_METAL:\n        // Average metal finish\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.2,\n          metalness: 0.85\n        });\n        break;\n    }\n\n    material.transparent = isTransparent;\n    material.premultipliedAlpha = true;\n    material.opacity = alpha;\n    material.depthWrite = !isTransparent;\n    material.polygonOffset = true;\n    material.polygonOffsetFactor = 1;\n\n    if (luminance !== 0) {\n      material.emissive.set(material.color).multiplyScalar(luminance);\n    }\n\n    if (!edgeMaterial) {\n      // This is the material used for edges\n      edgeMaterial = new LineBasicMaterial({\n        color: edgeColor,\n        transparent: isTransparent,\n        opacity: alpha,\n        depthWrite: !isTransparent\n      });\n      edgeMaterial.userData.code = code;\n      edgeMaterial.name = name + ' - Edge'; // This is the material used for conditional edges\n\n      edgeMaterial.userData.conditionalEdgeMaterial = new LDrawConditionalLineMaterial({\n        fog: true,\n        transparent: isTransparent,\n        depthWrite: !isTransparent,\n        color: edgeColor,\n        opacity: alpha\n      });\n    }\n\n    material.userData.code = code;\n    material.name = name;\n    material.userData.edgeMaterial = edgeMaterial;\n    this.addMaterial(material);\n    return material;\n  }\n\n  computeConstructionSteps(model) {\n    // Sets userdata.constructionStep number in Group objects and userData.numConstructionSteps number in the root Group object.\n    let stepNumber = 0;\n    model.traverse(c => {\n      if (c.isGroup) {\n        if (c.userData.startingConstructionStep) {\n          stepNumber++;\n        }\n\n        c.userData.constructionStep = stepNumber;\n      }\n    });\n    model.userData.numConstructionSteps = stepNumber + 1;\n  }\n\n}\n\nexport { LDrawLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}