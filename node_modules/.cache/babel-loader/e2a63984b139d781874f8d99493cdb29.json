{"ast":null,"code":"import { Loader, FileLoader, AnimationClip, Skeleton, Vector3, Quaternion, Bone, VectorKeyframeTrack, QuaternionKeyframeTrack } from 'three';\n/**\n * Description: reads BVH files and outputs a single Skeleton and an AnimationClip\n *\n * Currently only supports bvh files containing a single root.\n *\n */\n\nclass BVHLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.animateBonePositions = true;\n    this.animateBoneRotations = true;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(text) {\n    /*\n    reads a string array (lines) from a BVH file\n    and outputs a skeleton structure including motion data\n    returns thee root node:\n    { name: '', channels: [], children: [] }\n    */\n    function readBvh(lines) {\n      // read model structure\n      if (nextLine(lines) !== 'HIERARCHY') {\n        console.error('THREE.BVHLoader: HIERARCHY expected.');\n      }\n\n      const list = []; // collects flat array of all bones\n\n      const root = readNode(lines, nextLine(lines), list); // read motion data\n\n      if (nextLine(lines) !== 'MOTION') {\n        console.error('THREE.BVHLoader: MOTION expected.');\n      } // number of frames\n\n\n      let tokens = nextLine(lines).split(/[\\s]+/);\n      const numFrames = parseInt(tokens[1]);\n\n      if (isNaN(numFrames)) {\n        console.error('THREE.BVHLoader: Failed to read number of frames.');\n      } // frame time\n\n\n      tokens = nextLine(lines).split(/[\\s]+/);\n      const frameTime = parseFloat(tokens[2]);\n\n      if (isNaN(frameTime)) {\n        console.error('THREE.BVHLoader: Failed to read frame time.');\n      } // read frame data line by line\n\n\n      for (let i = 0; i < numFrames; i++) {\n        tokens = nextLine(lines).split(/[\\s]+/);\n        readFrameData(tokens, i * frameTime, root);\n      }\n\n      return list;\n    }\n    /*\n    Recursively reads data from a single frame into the bone hierarchy.\n    The passed bone hierarchy has to be structured in the same order as the BVH file.\n    keyframe data is stored in bone.frames.\n    - data: splitted string array (frame values), values are shift()ed so\n    this should be empty after parsing the whole hierarchy.\n    - frameTime: playback time for this keyframe.\n    - bone: the bone to read frame data from.\n    */\n\n\n    function readFrameData(data, frameTime, bone) {\n      // end sites have no motion data\n      if (bone.type === 'ENDSITE') return; // add keyframe\n\n      const keyframe = {\n        time: frameTime,\n        position: new Vector3(),\n        rotation: new Quaternion()\n      };\n      bone.frames.push(keyframe);\n      const quat = new Quaternion();\n      const vx = new Vector3(1, 0, 0);\n      const vy = new Vector3(0, 1, 0);\n      const vz = new Vector3(0, 0, 1); // parse values for each channel in node\n\n      for (let i = 0; i < bone.channels.length; i++) {\n        switch (bone.channels[i]) {\n          case 'Xposition':\n            keyframe.position.x = parseFloat(data.shift().trim());\n            break;\n\n          case 'Yposition':\n            keyframe.position.y = parseFloat(data.shift().trim());\n            break;\n\n          case 'Zposition':\n            keyframe.position.z = parseFloat(data.shift().trim());\n            break;\n\n          case 'Xrotation':\n            quat.setFromAxisAngle(vx, parseFloat(data.shift().trim()) * Math.PI / 180);\n            keyframe.rotation.multiply(quat);\n            break;\n\n          case 'Yrotation':\n            quat.setFromAxisAngle(vy, parseFloat(data.shift().trim()) * Math.PI / 180);\n            keyframe.rotation.multiply(quat);\n            break;\n\n          case 'Zrotation':\n            quat.setFromAxisAngle(vz, parseFloat(data.shift().trim()) * Math.PI / 180);\n            keyframe.rotation.multiply(quat);\n            break;\n\n          default:\n            console.warn('THREE.BVHLoader: Invalid channel type.');\n        }\n      } // parse child nodes\n\n\n      for (let i = 0; i < bone.children.length; i++) {\n        readFrameData(data, frameTime, bone.children[i]);\n      }\n    }\n    /*\n    Recursively parses the HIERACHY section of the BVH file\n    - lines: all lines of the file. lines are consumed as we go along.\n    - firstline: line containing the node type and name e.g. 'JOINT hip'\n    - list: collects a flat list of nodes\n    returns: a BVH node including children\n    */\n\n\n    function readNode(lines, firstline, list) {\n      const node = {\n        name: '',\n        type: '',\n        frames: []\n      };\n      list.push(node); // parse node type and name\n\n      let tokens = firstline.split(/[\\s]+/);\n\n      if (tokens[0].toUpperCase() === 'END' && tokens[1].toUpperCase() === 'SITE') {\n        node.type = 'ENDSITE';\n        node.name = 'ENDSITE'; // bvh end sites have no name\n      } else {\n        node.name = tokens[1];\n        node.type = tokens[0].toUpperCase();\n      }\n\n      if (nextLine(lines) !== '{') {\n        console.error('THREE.BVHLoader: Expected opening { after type & name');\n      } // parse OFFSET\n\n\n      tokens = nextLine(lines).split(/[\\s]+/);\n\n      if (tokens[0] !== 'OFFSET') {\n        console.error('THREE.BVHLoader: Expected OFFSET but got: ' + tokens[0]);\n      }\n\n      if (tokens.length !== 4) {\n        console.error('THREE.BVHLoader: Invalid number of values for OFFSET.');\n      }\n\n      const offset = new Vector3(parseFloat(tokens[1]), parseFloat(tokens[2]), parseFloat(tokens[3]));\n\n      if (isNaN(offset.x) || isNaN(offset.y) || isNaN(offset.z)) {\n        console.error('THREE.BVHLoader: Invalid values of OFFSET.');\n      }\n\n      node.offset = offset; // parse CHANNELS definitions\n\n      if (node.type !== 'ENDSITE') {\n        tokens = nextLine(lines).split(/[\\s]+/);\n\n        if (tokens[0] !== 'CHANNELS') {\n          console.error('THREE.BVHLoader: Expected CHANNELS definition.');\n        }\n\n        const numChannels = parseInt(tokens[1]);\n        node.channels = tokens.splice(2, numChannels);\n        node.children = [];\n      } // read children\n\n\n      while (true) {\n        const line = nextLine(lines);\n\n        if (line === '}') {\n          return node;\n        } else {\n          node.children.push(readNode(lines, line, list));\n        }\n      }\n    }\n    /*\n    recursively converts the internal bvh node structure to a Bone hierarchy\n    source: the bvh root node\n    list: pass an empty array, collects a flat list of all converted THREE.Bones\n    returns the root Bone\n    */\n\n\n    function toTHREEBone(source, list) {\n      const bone = new Bone();\n      list.push(bone);\n      bone.position.add(source.offset);\n      bone.name = source.name;\n\n      if (source.type !== 'ENDSITE') {\n        for (let i = 0; i < source.children.length; i++) {\n          bone.add(toTHREEBone(source.children[i], list));\n        }\n      }\n\n      return bone;\n    }\n    /*\n    builds a AnimationClip from the keyframe data saved in each bone.\n    bone: bvh root node\n    returns: a AnimationClip containing position and quaternion tracks\n    */\n\n\n    function toTHREEAnimation(bones) {\n      const tracks = []; // create a position and quaternion animation track for each node\n\n      for (let i = 0; i < bones.length; i++) {\n        const bone = bones[i];\n        if (bone.type === 'ENDSITE') continue; // track data\n\n        const times = [];\n        const positions = [];\n        const rotations = [];\n\n        for (let j = 0; j < bone.frames.length; j++) {\n          const frame = bone.frames[j];\n          times.push(frame.time); // the animation system animates the position property,\n          // so we have to add the joint offset to all values\n\n          positions.push(frame.position.x + bone.offset.x);\n          positions.push(frame.position.y + bone.offset.y);\n          positions.push(frame.position.z + bone.offset.z);\n          rotations.push(frame.rotation.x);\n          rotations.push(frame.rotation.y);\n          rotations.push(frame.rotation.z);\n          rotations.push(frame.rotation.w);\n        }\n\n        if (scope.animateBonePositions) {\n          tracks.push(new VectorKeyframeTrack('.bones[' + bone.name + '].position', times, positions));\n        }\n\n        if (scope.animateBoneRotations) {\n          tracks.push(new QuaternionKeyframeTrack('.bones[' + bone.name + '].quaternion', times, rotations));\n        }\n      }\n\n      return new AnimationClip('animation', -1, tracks);\n    }\n    /*\n    returns the next non-empty line in lines\n    */\n\n\n    function nextLine(lines) {\n      let line; // skip empty lines\n\n      while ((line = lines.shift().trim()).length === 0) {}\n\n      return line;\n    }\n\n    const scope = this;\n    const lines = text.split(/[\\r\\n]+/g);\n    const bones = readBvh(lines);\n    const threeBones = [];\n    toTHREEBone(bones[0], threeBones);\n    const threeClip = toTHREEAnimation(bones);\n    return {\n      skeleton: new Skeleton(threeBones),\n      clip: threeClip\n    };\n  }\n\n}\n\nexport { BVHLoader };","map":{"version":3,"names":["Loader","FileLoader","AnimationClip","Skeleton","Vector3","Quaternion","Bone","VectorKeyframeTrack","QuaternionKeyframeTrack","BVHLoader","constructor","manager","animateBonePositions","animateBoneRotations","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","readBvh","lines","nextLine","list","root","readNode","tokens","split","numFrames","parseInt","isNaN","frameTime","parseFloat","i","readFrameData","data","bone","type","keyframe","time","position","rotation","frames","push","quat","vx","vy","vz","channels","length","x","shift","trim","y","z","setFromAxisAngle","Math","PI","multiply","warn","children","firstline","node","name","toUpperCase","offset","numChannels","splice","line","toTHREEBone","source","add","toTHREEAnimation","bones","tracks","times","positions","rotations","j","frame","w","threeBones","threeClip","skeleton","clip"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/three-stdlib/loaders/BVHLoader.js"],"sourcesContent":["import { Loader, FileLoader, AnimationClip, Skeleton, Vector3, Quaternion, Bone, VectorKeyframeTrack, QuaternionKeyframeTrack } from 'three';\n\n/**\n * Description: reads BVH files and outputs a single Skeleton and an AnimationClip\n *\n * Currently only supports bvh files containing a single root.\n *\n */\n\nclass BVHLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.animateBonePositions = true;\n    this.animateBoneRotations = true;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(text) {\n    /*\n    reads a string array (lines) from a BVH file\n    and outputs a skeleton structure including motion data\n    returns thee root node:\n    { name: '', channels: [], children: [] }\n    */\n    function readBvh(lines) {\n      // read model structure\n      if (nextLine(lines) !== 'HIERARCHY') {\n        console.error('THREE.BVHLoader: HIERARCHY expected.');\n      }\n\n      const list = []; // collects flat array of all bones\n\n      const root = readNode(lines, nextLine(lines), list); // read motion data\n\n      if (nextLine(lines) !== 'MOTION') {\n        console.error('THREE.BVHLoader: MOTION expected.');\n      } // number of frames\n\n\n      let tokens = nextLine(lines).split(/[\\s]+/);\n      const numFrames = parseInt(tokens[1]);\n\n      if (isNaN(numFrames)) {\n        console.error('THREE.BVHLoader: Failed to read number of frames.');\n      } // frame time\n\n\n      tokens = nextLine(lines).split(/[\\s]+/);\n      const frameTime = parseFloat(tokens[2]);\n\n      if (isNaN(frameTime)) {\n        console.error('THREE.BVHLoader: Failed to read frame time.');\n      } // read frame data line by line\n\n\n      for (let i = 0; i < numFrames; i++) {\n        tokens = nextLine(lines).split(/[\\s]+/);\n        readFrameData(tokens, i * frameTime, root);\n      }\n\n      return list;\n    }\n    /*\n    Recursively reads data from a single frame into the bone hierarchy.\n    The passed bone hierarchy has to be structured in the same order as the BVH file.\n    keyframe data is stored in bone.frames.\n    - data: splitted string array (frame values), values are shift()ed so\n    this should be empty after parsing the whole hierarchy.\n    - frameTime: playback time for this keyframe.\n    - bone: the bone to read frame data from.\n    */\n\n\n    function readFrameData(data, frameTime, bone) {\n      // end sites have no motion data\n      if (bone.type === 'ENDSITE') return; // add keyframe\n\n      const keyframe = {\n        time: frameTime,\n        position: new Vector3(),\n        rotation: new Quaternion()\n      };\n      bone.frames.push(keyframe);\n      const quat = new Quaternion();\n      const vx = new Vector3(1, 0, 0);\n      const vy = new Vector3(0, 1, 0);\n      const vz = new Vector3(0, 0, 1); // parse values for each channel in node\n\n      for (let i = 0; i < bone.channels.length; i++) {\n        switch (bone.channels[i]) {\n          case 'Xposition':\n            keyframe.position.x = parseFloat(data.shift().trim());\n            break;\n\n          case 'Yposition':\n            keyframe.position.y = parseFloat(data.shift().trim());\n            break;\n\n          case 'Zposition':\n            keyframe.position.z = parseFloat(data.shift().trim());\n            break;\n\n          case 'Xrotation':\n            quat.setFromAxisAngle(vx, parseFloat(data.shift().trim()) * Math.PI / 180);\n            keyframe.rotation.multiply(quat);\n            break;\n\n          case 'Yrotation':\n            quat.setFromAxisAngle(vy, parseFloat(data.shift().trim()) * Math.PI / 180);\n            keyframe.rotation.multiply(quat);\n            break;\n\n          case 'Zrotation':\n            quat.setFromAxisAngle(vz, parseFloat(data.shift().trim()) * Math.PI / 180);\n            keyframe.rotation.multiply(quat);\n            break;\n\n          default:\n            console.warn('THREE.BVHLoader: Invalid channel type.');\n        }\n      } // parse child nodes\n\n\n      for (let i = 0; i < bone.children.length; i++) {\n        readFrameData(data, frameTime, bone.children[i]);\n      }\n    }\n    /*\n    Recursively parses the HIERACHY section of the BVH file\n    - lines: all lines of the file. lines are consumed as we go along.\n    - firstline: line containing the node type and name e.g. 'JOINT hip'\n    - list: collects a flat list of nodes\n    returns: a BVH node including children\n    */\n\n\n    function readNode(lines, firstline, list) {\n      const node = {\n        name: '',\n        type: '',\n        frames: []\n      };\n      list.push(node); // parse node type and name\n\n      let tokens = firstline.split(/[\\s]+/);\n\n      if (tokens[0].toUpperCase() === 'END' && tokens[1].toUpperCase() === 'SITE') {\n        node.type = 'ENDSITE';\n        node.name = 'ENDSITE'; // bvh end sites have no name\n      } else {\n        node.name = tokens[1];\n        node.type = tokens[0].toUpperCase();\n      }\n\n      if (nextLine(lines) !== '{') {\n        console.error('THREE.BVHLoader: Expected opening { after type & name');\n      } // parse OFFSET\n\n\n      tokens = nextLine(lines).split(/[\\s]+/);\n\n      if (tokens[0] !== 'OFFSET') {\n        console.error('THREE.BVHLoader: Expected OFFSET but got: ' + tokens[0]);\n      }\n\n      if (tokens.length !== 4) {\n        console.error('THREE.BVHLoader: Invalid number of values for OFFSET.');\n      }\n\n      const offset = new Vector3(parseFloat(tokens[1]), parseFloat(tokens[2]), parseFloat(tokens[3]));\n\n      if (isNaN(offset.x) || isNaN(offset.y) || isNaN(offset.z)) {\n        console.error('THREE.BVHLoader: Invalid values of OFFSET.');\n      }\n\n      node.offset = offset; // parse CHANNELS definitions\n\n      if (node.type !== 'ENDSITE') {\n        tokens = nextLine(lines).split(/[\\s]+/);\n\n        if (tokens[0] !== 'CHANNELS') {\n          console.error('THREE.BVHLoader: Expected CHANNELS definition.');\n        }\n\n        const numChannels = parseInt(tokens[1]);\n        node.channels = tokens.splice(2, numChannels);\n        node.children = [];\n      } // read children\n\n\n      while (true) {\n        const line = nextLine(lines);\n\n        if (line === '}') {\n          return node;\n        } else {\n          node.children.push(readNode(lines, line, list));\n        }\n      }\n    }\n    /*\n    recursively converts the internal bvh node structure to a Bone hierarchy\n    source: the bvh root node\n    list: pass an empty array, collects a flat list of all converted THREE.Bones\n    returns the root Bone\n    */\n\n\n    function toTHREEBone(source, list) {\n      const bone = new Bone();\n      list.push(bone);\n      bone.position.add(source.offset);\n      bone.name = source.name;\n\n      if (source.type !== 'ENDSITE') {\n        for (let i = 0; i < source.children.length; i++) {\n          bone.add(toTHREEBone(source.children[i], list));\n        }\n      }\n\n      return bone;\n    }\n    /*\n    builds a AnimationClip from the keyframe data saved in each bone.\n    bone: bvh root node\n    returns: a AnimationClip containing position and quaternion tracks\n    */\n\n\n    function toTHREEAnimation(bones) {\n      const tracks = []; // create a position and quaternion animation track for each node\n\n      for (let i = 0; i < bones.length; i++) {\n        const bone = bones[i];\n        if (bone.type === 'ENDSITE') continue; // track data\n\n        const times = [];\n        const positions = [];\n        const rotations = [];\n\n        for (let j = 0; j < bone.frames.length; j++) {\n          const frame = bone.frames[j];\n          times.push(frame.time); // the animation system animates the position property,\n          // so we have to add the joint offset to all values\n\n          positions.push(frame.position.x + bone.offset.x);\n          positions.push(frame.position.y + bone.offset.y);\n          positions.push(frame.position.z + bone.offset.z);\n          rotations.push(frame.rotation.x);\n          rotations.push(frame.rotation.y);\n          rotations.push(frame.rotation.z);\n          rotations.push(frame.rotation.w);\n        }\n\n        if (scope.animateBonePositions) {\n          tracks.push(new VectorKeyframeTrack('.bones[' + bone.name + '].position', times, positions));\n        }\n\n        if (scope.animateBoneRotations) {\n          tracks.push(new QuaternionKeyframeTrack('.bones[' + bone.name + '].quaternion', times, rotations));\n        }\n      }\n\n      return new AnimationClip('animation', -1, tracks);\n    }\n    /*\n    returns the next non-empty line in lines\n    */\n\n\n    function nextLine(lines) {\n      let line; // skip empty lines\n\n      while ((line = lines.shift().trim()).length === 0) {}\n\n      return line;\n    }\n\n    const scope = this;\n    const lines = text.split(/[\\r\\n]+/g);\n    const bones = readBvh(lines);\n    const threeBones = [];\n    toTHREEBone(bones[0], threeBones);\n    const threeClip = toTHREEAnimation(bones);\n    return {\n      skeleton: new Skeleton(threeBones),\n      clip: threeClip\n    };\n  }\n\n}\n\nexport { BVHLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}