{"ast":null,"code":"import { ShaderMaterial, Vector2, Uniform, NoBlending } from 'three';\n\nclass ConvolutionMaterial extends ShaderMaterial {\n  constructor() {\n    let texelSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2();\n    super({\n      uniforms: {\n        inputBuffer: new Uniform(null),\n        depthBuffer: new Uniform(null),\n        resolution: new Uniform(new Vector2()),\n        texelSize: new Uniform(new Vector2()),\n        halfTexelSize: new Uniform(new Vector2()),\n        kernel: new Uniform(0.0),\n        scale: new Uniform(1.0),\n        cameraNear: new Uniform(0.0),\n        cameraFar: new Uniform(1.0),\n        minDepthThreshold: new Uniform(0.0),\n        maxDepthThreshold: new Uniform(1.0),\n        depthScale: new Uniform(0.0),\n        depthToBlurRatioBias: new Uniform(0.25)\n      },\n      fragmentShader: `#include <common>\n        #include <dithering_pars_fragment>      \n        uniform sampler2D inputBuffer;\n        uniform sampler2D depthBuffer;\n        uniform float cameraNear;\n        uniform float cameraFar;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec2 vUv;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n\n        void main() {\n          float depthFactor = 0.0;\n          \n          #ifdef USE_DEPTH\n            vec4 depth = texture2D(depthBuffer, vUv);\n            depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n            depthFactor *= depthScale;\n            depthFactor = max(0.0, min(1.0, depthFactor + 0.25));\n          #endif\n          \n          vec4 sum = texture2D(inputBuffer, mix(vUv0, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv1, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv2, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv3, vUv, depthFactor));\n          gl_FragColor = sum * 0.25 ;\n\n          #include <dithering_fragment>\n          #include <tonemapping_fragment>\n          #include <encodings_fragment>\n        }`,\n      vertexShader: `uniform vec2 texelSize;\n        uniform vec2 halfTexelSize;\n        uniform float kernel;\n        uniform float scale;\n        varying vec2 vUv;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n\n        void main() {\n          vec2 uv = position.xy * 0.5 + 0.5;\n          vUv = uv;\n\n          vec2 dUv = (texelSize * vec2(kernel) + halfTexelSize) * scale;\n          vUv0 = vec2(uv.x - dUv.x, uv.y + dUv.y);\n          vUv1 = vec2(uv.x + dUv.x, uv.y + dUv.y);\n          vUv2 = vec2(uv.x + dUv.x, uv.y - dUv.y);\n          vUv3 = vec2(uv.x - dUv.x, uv.y - dUv.y);\n\n          gl_Position = vec4(position.xy, 1.0, 1.0);\n        }`,\n      blending: NoBlending,\n      depthWrite: false,\n      depthTest: false\n    });\n    this.toneMapped = false;\n    this.setTexelSize(texelSize.x, texelSize.y);\n    this.kernel = new Float32Array([0.0, 1.0, 2.0, 2.0, 3.0]);\n  }\n\n  setTexelSize(x, y) {\n    this.uniforms.texelSize.value.set(x, y);\n    this.uniforms.halfTexelSize.value.set(x, y).multiplyScalar(0.5);\n  }\n\n  setResolution(resolution) {\n    this.uniforms.resolution.value.copy(resolution);\n  }\n\n}\n\nexport { ConvolutionMaterial };","map":{"version":3,"names":["ShaderMaterial","Vector2","Uniform","NoBlending","ConvolutionMaterial","constructor","texelSize","uniforms","inputBuffer","depthBuffer","resolution","halfTexelSize","kernel","scale","cameraNear","cameraFar","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","fragmentShader","vertexShader","blending","depthWrite","depthTest","toneMapped","setTexelSize","x","y","Float32Array","value","set","multiplyScalar","setResolution","copy"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/@react-three/drei/materials/ConvolutionMaterial.js"],"sourcesContent":["import { ShaderMaterial, Vector2, Uniform, NoBlending } from 'three';\n\nclass ConvolutionMaterial extends ShaderMaterial {\n  constructor(texelSize = new Vector2()) {\n    super({\n      uniforms: {\n        inputBuffer: new Uniform(null),\n        depthBuffer: new Uniform(null),\n        resolution: new Uniform(new Vector2()),\n        texelSize: new Uniform(new Vector2()),\n        halfTexelSize: new Uniform(new Vector2()),\n        kernel: new Uniform(0.0),\n        scale: new Uniform(1.0),\n        cameraNear: new Uniform(0.0),\n        cameraFar: new Uniform(1.0),\n        minDepthThreshold: new Uniform(0.0),\n        maxDepthThreshold: new Uniform(1.0),\n        depthScale: new Uniform(0.0),\n        depthToBlurRatioBias: new Uniform(0.25)\n      },\n      fragmentShader: `#include <common>\n        #include <dithering_pars_fragment>      \n        uniform sampler2D inputBuffer;\n        uniform sampler2D depthBuffer;\n        uniform float cameraNear;\n        uniform float cameraFar;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec2 vUv;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n\n        void main() {\n          float depthFactor = 0.0;\n          \n          #ifdef USE_DEPTH\n            vec4 depth = texture2D(depthBuffer, vUv);\n            depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n            depthFactor *= depthScale;\n            depthFactor = max(0.0, min(1.0, depthFactor + 0.25));\n          #endif\n          \n          vec4 sum = texture2D(inputBuffer, mix(vUv0, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv1, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv2, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv3, vUv, depthFactor));\n          gl_FragColor = sum * 0.25 ;\n\n          #include <dithering_fragment>\n          #include <tonemapping_fragment>\n          #include <encodings_fragment>\n        }`,\n      vertexShader: `uniform vec2 texelSize;\n        uniform vec2 halfTexelSize;\n        uniform float kernel;\n        uniform float scale;\n        varying vec2 vUv;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n\n        void main() {\n          vec2 uv = position.xy * 0.5 + 0.5;\n          vUv = uv;\n\n          vec2 dUv = (texelSize * vec2(kernel) + halfTexelSize) * scale;\n          vUv0 = vec2(uv.x - dUv.x, uv.y + dUv.y);\n          vUv1 = vec2(uv.x + dUv.x, uv.y + dUv.y);\n          vUv2 = vec2(uv.x + dUv.x, uv.y - dUv.y);\n          vUv3 = vec2(uv.x - dUv.x, uv.y - dUv.y);\n\n          gl_Position = vec4(position.xy, 1.0, 1.0);\n        }`,\n      blending: NoBlending,\n      depthWrite: false,\n      depthTest: false\n    });\n    this.toneMapped = false;\n    this.setTexelSize(texelSize.x, texelSize.y);\n    this.kernel = new Float32Array([0.0, 1.0, 2.0, 2.0, 3.0]);\n  }\n\n  setTexelSize(x, y) {\n    this.uniforms.texelSize.value.set(x, y);\n    this.uniforms.halfTexelSize.value.set(x, y).multiplyScalar(0.5);\n  }\n\n  setResolution(resolution) {\n    this.uniforms.resolution.value.copy(resolution);\n  }\n\n}\n\nexport { ConvolutionMaterial };\n"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,OAAzB,EAAkCC,OAAlC,EAA2CC,UAA3C,QAA6D,OAA7D;;AAEA,MAAMC,mBAAN,SAAkCJ,cAAlC,CAAiD;EAC/CK,WAAW,GAA4B;IAAA,IAA3BC,SAA2B,uEAAf,IAAIL,OAAJ,EAAe;IACrC,MAAM;MACJM,QAAQ,EAAE;QACRC,WAAW,EAAE,IAAIN,OAAJ,CAAY,IAAZ,CADL;QAERO,WAAW,EAAE,IAAIP,OAAJ,CAAY,IAAZ,CAFL;QAGRQ,UAAU,EAAE,IAAIR,OAAJ,CAAY,IAAID,OAAJ,EAAZ,CAHJ;QAIRK,SAAS,EAAE,IAAIJ,OAAJ,CAAY,IAAID,OAAJ,EAAZ,CAJH;QAKRU,aAAa,EAAE,IAAIT,OAAJ,CAAY,IAAID,OAAJ,EAAZ,CALP;QAMRW,MAAM,EAAE,IAAIV,OAAJ,CAAY,GAAZ,CANA;QAORW,KAAK,EAAE,IAAIX,OAAJ,CAAY,GAAZ,CAPC;QAQRY,UAAU,EAAE,IAAIZ,OAAJ,CAAY,GAAZ,CARJ;QASRa,SAAS,EAAE,IAAIb,OAAJ,CAAY,GAAZ,CATH;QAURc,iBAAiB,EAAE,IAAId,OAAJ,CAAY,GAAZ,CAVX;QAWRe,iBAAiB,EAAE,IAAIf,OAAJ,CAAY,GAAZ,CAXX;QAYRgB,UAAU,EAAE,IAAIhB,OAAJ,CAAY,GAAZ,CAZJ;QAaRiB,oBAAoB,EAAE,IAAIjB,OAAJ,CAAY,IAAZ;MAbd,CADN;MAgBJkB,cAAc,EAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAnDU;MAoDJC,YAAY,EAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAzEU;MA0EJC,QAAQ,EAAEnB,UA1EN;MA2EJoB,UAAU,EAAE,KA3ER;MA4EJC,SAAS,EAAE;IA5EP,CAAN;IA8EA,KAAKC,UAAL,GAAkB,KAAlB;IACA,KAAKC,YAAL,CAAkBpB,SAAS,CAACqB,CAA5B,EAA+BrB,SAAS,CAACsB,CAAzC;IACA,KAAKhB,MAAL,GAAc,IAAIiB,YAAJ,CAAiB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,CAAjB,CAAd;EACD;;EAEDH,YAAY,CAACC,CAAD,EAAIC,CAAJ,EAAO;IACjB,KAAKrB,QAAL,CAAcD,SAAd,CAAwBwB,KAAxB,CAA8BC,GAA9B,CAAkCJ,CAAlC,EAAqCC,CAArC;IACA,KAAKrB,QAAL,CAAcI,aAAd,CAA4BmB,KAA5B,CAAkCC,GAAlC,CAAsCJ,CAAtC,EAAyCC,CAAzC,EAA4CI,cAA5C,CAA2D,GAA3D;EACD;;EAEDC,aAAa,CAACvB,UAAD,EAAa;IACxB,KAAKH,QAAL,CAAcG,UAAd,CAAyBoB,KAAzB,CAA+BI,IAA/B,CAAoCxB,UAApC;EACD;;AA5F8C;;AAgGjD,SAASN,mBAAT"},"metadata":{},"sourceType":"module"}