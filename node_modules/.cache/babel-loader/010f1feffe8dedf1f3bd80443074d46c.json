{"ast":null,"code":"import { Line, BufferGeometry, BufferAttribute, LineBasicMaterial, MathUtils } from 'three';\n\nclass PositionalAudioHelper extends Line {\n  constructor(audio, range, divisionsInnerAngle, divisionsOuterAngle) {\n    this.audio = audio;\n    this.range = range || 1;\n    this.divisionsInnerAngle = divisionsInnerAngle || 16;\n    this.divisionsOuterAngle = divisionsOuterAngle || 2;\n    const geometry = new BufferGeometry();\n    const divisions = this.divisionsInnerAngle + this.divisionsOuterAngle * 2;\n    const positions = new Float32Array((divisions * 3 + 3) * 3);\n    geometry.setAttribute('position', new BufferAttribute(positions, 3));\n    const materialInnerAngle = new LineBasicMaterial({\n      color: 0x00ff00\n    });\n    const materialOuterAngle = new LineBasicMaterial({\n      color: 0xffff00\n    });\n    super(geometry, [materialOuterAngle, materialInnerAngle]);\n    this.type = 'PositionalAudioHelper';\n    this.update();\n  }\n\n  update() {\n    const audio = this.audio;\n    const range = this.range;\n    const divisionsInnerAngle = this.divisionsInnerAngle;\n    const divisionsOuterAngle = this.divisionsOuterAngle;\n    const coneInnerAngle = MathUtils.degToRad(audio.panner.coneInnerAngle);\n    const coneOuterAngle = MathUtils.degToRad(audio.panner.coneOuterAngle);\n    const halfConeInnerAngle = coneInnerAngle / 2;\n    const halfConeOuterAngle = coneOuterAngle / 2;\n    let start = 0;\n    let count = 0;\n    let i, stride;\n    const geometry = this.geometry;\n    const positionAttribute = geometry.attributes.position;\n    geometry.clearGroups(); //\n\n    function generateSegment(from, to, divisions, materialIndex) {\n      const step = (to - from) / divisions;\n      positionAttribute.setXYZ(start, 0, 0, 0);\n      count++;\n\n      for (i = from; i < to; i += step) {\n        stride = start + count;\n        positionAttribute.setXYZ(stride, Math.sin(i) * range, 0, Math.cos(i) * range);\n        positionAttribute.setXYZ(stride + 1, Math.sin(Math.min(i + step, to)) * range, 0, Math.cos(Math.min(i + step, to)) * range);\n        positionAttribute.setXYZ(stride + 2, 0, 0, 0);\n        count += 3;\n      }\n\n      geometry.addGroup(start, count, materialIndex);\n      start += count;\n      count = 0;\n    } //\n\n\n    generateSegment(-halfConeOuterAngle, -halfConeInnerAngle, divisionsOuterAngle, 0);\n    generateSegment(-halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1);\n    generateSegment(halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0); //\n\n    positionAttribute.needsUpdate = true;\n    if (coneInnerAngle === coneOuterAngle) this.material[0].visible = false;\n  }\n\n  dispose() {\n    this.geometry.dispose();\n    this.material[0].dispose();\n    this.material[1].dispose();\n  }\n\n}\n\nexport { PositionalAudioHelper };","map":{"version":3,"names":["Line","BufferGeometry","BufferAttribute","LineBasicMaterial","MathUtils","PositionalAudioHelper","constructor","audio","range","divisionsInnerAngle","divisionsOuterAngle","geometry","divisions","positions","Float32Array","setAttribute","materialInnerAngle","color","materialOuterAngle","type","update","coneInnerAngle","degToRad","panner","coneOuterAngle","halfConeInnerAngle","halfConeOuterAngle","start","count","i","stride","positionAttribute","attributes","position","clearGroups","generateSegment","from","to","materialIndex","step","setXYZ","Math","sin","cos","min","addGroup","needsUpdate","material","visible","dispose"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/three-stdlib/helpers/PositionalAudioHelper.js"],"sourcesContent":["import { Line, BufferGeometry, BufferAttribute, LineBasicMaterial, MathUtils } from 'three';\n\nclass PositionalAudioHelper extends Line {\n  constructor(audio, range, divisionsInnerAngle, divisionsOuterAngle) {\n    this.audio = audio;\n    this.range = range || 1;\n    this.divisionsInnerAngle = divisionsInnerAngle || 16;\n    this.divisionsOuterAngle = divisionsOuterAngle || 2;\n    const geometry = new BufferGeometry();\n    const divisions = this.divisionsInnerAngle + this.divisionsOuterAngle * 2;\n    const positions = new Float32Array((divisions * 3 + 3) * 3);\n    geometry.setAttribute('position', new BufferAttribute(positions, 3));\n    const materialInnerAngle = new LineBasicMaterial({\n      color: 0x00ff00\n    });\n    const materialOuterAngle = new LineBasicMaterial({\n      color: 0xffff00\n    });\n    super(geometry, [materialOuterAngle, materialInnerAngle]);\n    this.type = 'PositionalAudioHelper';\n    this.update();\n  }\n\n  update() {\n    const audio = this.audio;\n    const range = this.range;\n    const divisionsInnerAngle = this.divisionsInnerAngle;\n    const divisionsOuterAngle = this.divisionsOuterAngle;\n    const coneInnerAngle = MathUtils.degToRad(audio.panner.coneInnerAngle);\n    const coneOuterAngle = MathUtils.degToRad(audio.panner.coneOuterAngle);\n    const halfConeInnerAngle = coneInnerAngle / 2;\n    const halfConeOuterAngle = coneOuterAngle / 2;\n    let start = 0;\n    let count = 0;\n    let i, stride;\n    const geometry = this.geometry;\n    const positionAttribute = geometry.attributes.position;\n    geometry.clearGroups(); //\n\n    function generateSegment(from, to, divisions, materialIndex) {\n      const step = (to - from) / divisions;\n      positionAttribute.setXYZ(start, 0, 0, 0);\n      count++;\n\n      for (i = from; i < to; i += step) {\n        stride = start + count;\n        positionAttribute.setXYZ(stride, Math.sin(i) * range, 0, Math.cos(i) * range);\n        positionAttribute.setXYZ(stride + 1, Math.sin(Math.min(i + step, to)) * range, 0, Math.cos(Math.min(i + step, to)) * range);\n        positionAttribute.setXYZ(stride + 2, 0, 0, 0);\n        count += 3;\n      }\n\n      geometry.addGroup(start, count, materialIndex);\n      start += count;\n      count = 0;\n    } //\n\n\n    generateSegment(-halfConeOuterAngle, -halfConeInnerAngle, divisionsOuterAngle, 0);\n    generateSegment(-halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1);\n    generateSegment(halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0); //\n\n    positionAttribute.needsUpdate = true;\n    if (coneInnerAngle === coneOuterAngle) this.material[0].visible = false;\n  }\n\n  dispose() {\n    this.geometry.dispose();\n    this.material[0].dispose();\n    this.material[1].dispose();\n  }\n\n}\n\nexport { PositionalAudioHelper };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}