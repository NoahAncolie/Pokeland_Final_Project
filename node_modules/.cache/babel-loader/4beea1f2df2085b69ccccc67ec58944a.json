{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, Vector3, Vector2, TextureLoader, Scene, Object3D, Group, SphereGeometry, MeshBasicMaterial, BackSide, Mesh, PointsMaterial, Points, LineBasicMaterial, LineSegments, FrontSide, DoubleSide, MeshPhongMaterial, Color, DataTexture, BufferGeometry, Float32BufferAttribute, BoxGeometry, ConeGeometry, CylinderGeometry, Quaternion, ShapeUtils, BufferAttribute, RepeatWrapping, ClampToEdgeWrapping } from 'three';\nimport { createToken, Lexer, CstParser } from 'chevrotain';\n\nclass VRMLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data, path) {\n    const nodeMap = {};\n\n    function generateVRMLTree(data) {\n      // create lexer, parser and visitor\n      const tokenData = createTokens();\n      const lexer = new VRMLLexer(tokenData.tokens);\n      const parser = new VRMLParser(tokenData.tokenVocabulary);\n      const visitor = createVisitor(parser.getBaseCstVisitorConstructor()); // lexing\n\n      const lexingResult = lexer.lex(data);\n      parser.input = lexingResult.tokens; // parsing\n\n      const cstOutput = parser.vrml();\n\n      if (parser.errors.length > 0) {\n        console.error(parser.errors);\n        throw Error('THREE.VRMLLoader: Parsing errors detected.');\n      } // actions\n\n\n      const ast = visitor.visit(cstOutput);\n      return ast;\n    }\n\n    function createTokens() {\n      // from http://gun.teipir.gr/VRML-amgem/spec/part1/concepts.html#SyntaxBasics\n      const RouteIdentifier = createToken({\n        name: 'RouteIdentifier',\n        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*[\\.][^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/\n      });\n      const Identifier = createToken({\n        name: 'Identifier',\n        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/,\n        longer_alt: RouteIdentifier\n      }); // from http://gun.teipir.gr/VRML-amgem/spec/part1/nodesRef.html\n\n      const nodeTypes = ['Anchor', 'Billboard', 'Collision', 'Group', 'Transform', // grouping nodes\n      'Inline', 'LOD', 'Switch', // special groups\n      'AudioClip', 'DirectionalLight', 'PointLight', 'Script', 'Shape', 'Sound', 'SpotLight', 'WorldInfo', // common nodes\n      'CylinderSensor', 'PlaneSensor', 'ProximitySensor', 'SphereSensor', 'TimeSensor', 'TouchSensor', 'VisibilitySensor', // sensors\n      'Box', 'Cone', 'Cylinder', 'ElevationGrid', 'Extrusion', 'IndexedFaceSet', 'IndexedLineSet', 'PointSet', 'Sphere', // geometries\n      'Color', 'Coordinate', 'Normal', 'TextureCoordinate', // geometric properties\n      'Appearance', 'FontStyle', 'ImageTexture', 'Material', 'MovieTexture', 'PixelTexture', 'TextureTransform', // appearance\n      'ColorInterpolator', 'CoordinateInterpolator', 'NormalInterpolator', 'OrientationInterpolator', 'PositionInterpolator', 'ScalarInterpolator', // interpolators\n      'Background', 'Fog', 'NavigationInfo', 'Viewpoint', // bindable nodes\n      'Text' // Text must be placed at the end of the regex so there are no matches for TextureTransform and TextureCoordinate\n      ]; //\n\n      const Version = createToken({\n        name: 'Version',\n        pattern: /#VRML.*/,\n        longer_alt: Identifier\n      });\n      const NodeName = createToken({\n        name: 'NodeName',\n        pattern: new RegExp(nodeTypes.join('|')),\n        longer_alt: Identifier\n      });\n      const DEF = createToken({\n        name: 'DEF',\n        pattern: /DEF/,\n        longer_alt: Identifier\n      });\n      const USE = createToken({\n        name: 'USE',\n        pattern: /USE/,\n        longer_alt: Identifier\n      });\n      const ROUTE = createToken({\n        name: 'ROUTE',\n        pattern: /ROUTE/,\n        longer_alt: Identifier\n      });\n      const TO = createToken({\n        name: 'TO',\n        pattern: /TO/,\n        longer_alt: Identifier\n      }); //\n\n      const StringLiteral = createToken({\n        name: 'StringLiteral',\n        pattern: /\"(?:[^\\\\\"\\n\\r]|\\\\[bfnrtv\"\\\\/]|\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])*\"/\n      });\n      const HexLiteral = createToken({\n        name: 'HexLiteral',\n        pattern: /0[xX][0-9a-fA-F]+/\n      });\n      const NumberLiteral = createToken({\n        name: 'NumberLiteral',\n        pattern: /[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?/\n      });\n      const TrueLiteral = createToken({\n        name: 'TrueLiteral',\n        pattern: /TRUE/\n      });\n      const FalseLiteral = createToken({\n        name: 'FalseLiteral',\n        pattern: /FALSE/\n      });\n      const NullLiteral = createToken({\n        name: 'NullLiteral',\n        pattern: /NULL/\n      });\n      const LSquare = createToken({\n        name: 'LSquare',\n        pattern: /\\[/\n      });\n      const RSquare = createToken({\n        name: 'RSquare',\n        pattern: /]/\n      });\n      const LCurly = createToken({\n        name: 'LCurly',\n        pattern: /{/\n      });\n      const RCurly = createToken({\n        name: 'RCurly',\n        pattern: /}/\n      });\n      const Comment = createToken({\n        name: 'Comment',\n        pattern: /#.*/,\n        group: Lexer.SKIPPED // eslint-disable-line no-undef\n\n      }); // commas, blanks, tabs, newlines and carriage returns are whitespace characters wherever they appear outside of string fields\n\n      const WhiteSpace = createToken({\n        name: 'WhiteSpace',\n        pattern: /[ ,\\s]/,\n        group: Lexer.SKIPPED // eslint-disable-line no-undef\n\n      });\n      const tokens = [WhiteSpace, // keywords appear before the Identifier\n      NodeName, DEF, USE, ROUTE, TO, TrueLiteral, FalseLiteral, NullLiteral, // the Identifier must appear after the keywords because all keywords are valid identifiers\n      Version, Identifier, RouteIdentifier, StringLiteral, HexLiteral, NumberLiteral, LSquare, RSquare, LCurly, RCurly, Comment];\n      const tokenVocabulary = {};\n\n      for (let i = 0, l = tokens.length; i < l; i++) {\n        const token = tokens[i];\n        tokenVocabulary[token.name] = token;\n      }\n\n      return {\n        tokens: tokens,\n        tokenVocabulary: tokenVocabulary\n      };\n    }\n\n    function createVisitor(BaseVRMLVisitor) {\n      // the visitor is created dynmaically based on the given base class\n      function VRMLToASTVisitor() {\n        BaseVRMLVisitor.call(this);\n        this.validateVisitor();\n      }\n\n      VRMLToASTVisitor.prototype = Object.assign(Object.create(BaseVRMLVisitor.prototype), {\n        constructor: VRMLToASTVisitor,\n        vrml: function (ctx) {\n          const data = {\n            version: this.visit(ctx.version),\n            nodes: [],\n            routes: []\n          };\n\n          for (let i = 0, l = ctx.node.length; i < l; i++) {\n            const node = ctx.node[i];\n            data.nodes.push(this.visit(node));\n          }\n\n          if (ctx.route) {\n            for (let i = 0, l = ctx.route.length; i < l; i++) {\n              const route = ctx.route[i];\n              data.routes.push(this.visit(route));\n            }\n          }\n\n          return data;\n        },\n        version: function (ctx) {\n          return ctx.Version[0].image;\n        },\n        node: function (ctx) {\n          const data = {\n            name: ctx.NodeName[0].image,\n            fields: []\n          };\n\n          if (ctx.field) {\n            for (let i = 0, l = ctx.field.length; i < l; i++) {\n              const field = ctx.field[i];\n              data.fields.push(this.visit(field));\n            }\n          } // DEF\n\n\n          if (ctx.def) {\n            data.DEF = this.visit(ctx.def[0]);\n          }\n\n          return data;\n        },\n        field: function (ctx) {\n          const data = {\n            name: ctx.Identifier[0].image,\n            type: null,\n            values: null\n          };\n          let result; // SFValue\n\n          if (ctx.singleFieldValue) {\n            result = this.visit(ctx.singleFieldValue[0]);\n          } // MFValue\n\n\n          if (ctx.multiFieldValue) {\n            result = this.visit(ctx.multiFieldValue[0]);\n          }\n\n          data.type = result.type;\n          data.values = result.values;\n          return data;\n        },\n        def: function (ctx) {\n          return (ctx.Identifier || ctx.NodeName)[0].image;\n        },\n        use: function (ctx) {\n          return {\n            USE: (ctx.Identifier || ctx.NodeName)[0].image\n          };\n        },\n        singleFieldValue: function (ctx) {\n          return processField(this, ctx);\n        },\n        multiFieldValue: function (ctx) {\n          return processField(this, ctx);\n        },\n        route: function (ctx) {\n          const data = {\n            FROM: ctx.RouteIdentifier[0].image,\n            TO: ctx.RouteIdentifier[1].image\n          };\n          return data;\n        }\n      });\n\n      function processField(scope, ctx) {\n        const field = {\n          type: null,\n          values: []\n        };\n\n        if (ctx.node) {\n          field.type = 'node';\n\n          for (let i = 0, l = ctx.node.length; i < l; i++) {\n            const node = ctx.node[i];\n            field.values.push(scope.visit(node));\n          }\n        }\n\n        if (ctx.use) {\n          field.type = 'use';\n\n          for (let i = 0, l = ctx.use.length; i < l; i++) {\n            const use = ctx.use[i];\n            field.values.push(scope.visit(use));\n          }\n        }\n\n        if (ctx.StringLiteral) {\n          field.type = 'string';\n\n          for (let i = 0, l = ctx.StringLiteral.length; i < l; i++) {\n            const stringLiteral = ctx.StringLiteral[i];\n            field.values.push(stringLiteral.image.replace(/'|\"/g, ''));\n          }\n        }\n\n        if (ctx.NumberLiteral) {\n          field.type = 'number';\n\n          for (let i = 0, l = ctx.NumberLiteral.length; i < l; i++) {\n            const numberLiteral = ctx.NumberLiteral[i];\n            field.values.push(parseFloat(numberLiteral.image));\n          }\n        }\n\n        if (ctx.HexLiteral) {\n          field.type = 'hex';\n\n          for (let i = 0, l = ctx.HexLiteral.length; i < l; i++) {\n            const hexLiteral = ctx.HexLiteral[i];\n            field.values.push(hexLiteral.image);\n          }\n        }\n\n        if (ctx.TrueLiteral) {\n          field.type = 'boolean';\n\n          for (let i = 0, l = ctx.TrueLiteral.length; i < l; i++) {\n            const trueLiteral = ctx.TrueLiteral[i];\n            if (trueLiteral.image === 'TRUE') field.values.push(true);\n          }\n        }\n\n        if (ctx.FalseLiteral) {\n          field.type = 'boolean';\n\n          for (let i = 0, l = ctx.FalseLiteral.length; i < l; i++) {\n            const falseLiteral = ctx.FalseLiteral[i];\n            if (falseLiteral.image === 'FALSE') field.values.push(false);\n          }\n        }\n\n        if (ctx.NullLiteral) {\n          field.type = 'null';\n          ctx.NullLiteral.forEach(function () {\n            field.values.push(null);\n          });\n        }\n\n        return field;\n      }\n\n      return new VRMLToASTVisitor();\n    }\n\n    function parseTree(tree) {\n      // console.log( JSON.stringify( tree, null, 2 ) );\n      const nodes = tree.nodes;\n      const scene = new Scene(); // first iteration: build nodemap based on DEF statements\n\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        const node = nodes[i];\n        buildNodeMap(node);\n      } // second iteration: build nodes\n\n\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        const node = nodes[i];\n        const object = getNode(node);\n        if (object instanceof Object3D) scene.add(object);\n        if (node.name === 'WorldInfo') scene.userData.worldInfo = object;\n      }\n\n      return scene;\n    }\n\n    function buildNodeMap(node) {\n      if (node.DEF) {\n        nodeMap[node.DEF] = node;\n      }\n\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n\n        if (field.type === 'node') {\n          const fieldValues = field.values;\n\n          for (let j = 0, jl = fieldValues.length; j < jl; j++) {\n            buildNodeMap(fieldValues[j]);\n          }\n        }\n      }\n    }\n\n    function getNode(node) {\n      // handle case where a node refers to a different one\n      if (node.USE) {\n        return resolveUSE(node.USE);\n      }\n\n      if (node.build !== undefined) return node.build;\n      node.build = buildNode(node);\n      return node.build;\n    } // node builder\n\n\n    function buildNode(node) {\n      const nodeName = node.name;\n      let build;\n\n      switch (nodeName) {\n        case 'Group':\n        case 'Transform':\n        case 'Collision':\n          build = buildGroupingNode(node);\n          break;\n\n        case 'Background':\n          build = buildBackgroundNode(node);\n          break;\n\n        case 'Shape':\n          build = buildShapeNode(node);\n          break;\n\n        case 'Appearance':\n          build = buildAppearanceNode(node);\n          break;\n\n        case 'Material':\n          build = buildMaterialNode(node);\n          break;\n\n        case 'ImageTexture':\n          build = buildImageTextureNode(node);\n          break;\n\n        case 'PixelTexture':\n          build = buildPixelTextureNode(node);\n          break;\n\n        case 'TextureTransform':\n          build = buildTextureTransformNode(node);\n          break;\n\n        case 'IndexedFaceSet':\n          build = buildIndexedFaceSetNode(node);\n          break;\n\n        case 'IndexedLineSet':\n          build = buildIndexedLineSetNode(node);\n          break;\n\n        case 'PointSet':\n          build = buildPointSetNode(node);\n          break;\n\n        case 'Box':\n          build = buildBoxNode(node);\n          break;\n\n        case 'Cone':\n          build = buildConeNode(node);\n          break;\n\n        case 'Cylinder':\n          build = buildCylinderNode(node);\n          break;\n\n        case 'Sphere':\n          build = buildSphereNode(node);\n          break;\n\n        case 'ElevationGrid':\n          build = buildElevationGridNode(node);\n          break;\n\n        case 'Extrusion':\n          build = buildExtrusionNode(node);\n          break;\n\n        case 'Color':\n        case 'Coordinate':\n        case 'Normal':\n        case 'TextureCoordinate':\n          build = buildGeometricNode(node);\n          break;\n\n        case 'WorldInfo':\n          build = buildWorldInfoNode(node);\n          break;\n\n        case 'Anchor':\n        case 'Billboard':\n        case 'Inline':\n        case 'LOD':\n        case 'Switch':\n        case 'AudioClip':\n        case 'DirectionalLight':\n        case 'PointLight':\n        case 'Script':\n        case 'Sound':\n        case 'SpotLight':\n        case 'CylinderSensor':\n        case 'PlaneSensor':\n        case 'ProximitySensor':\n        case 'SphereSensor':\n        case 'TimeSensor':\n        case 'TouchSensor':\n        case 'VisibilitySensor':\n        case 'Text':\n        case 'FontStyle':\n        case 'MovieTexture':\n        case 'ColorInterpolator':\n        case 'CoordinateInterpolator':\n        case 'NormalInterpolator':\n        case 'OrientationInterpolator':\n        case 'PositionInterpolator':\n        case 'ScalarInterpolator':\n        case 'Fog':\n        case 'NavigationInfo':\n        case 'Viewpoint':\n          // node not supported yet\n          break;\n\n        default:\n          console.warn('THREE.VRMLLoader: Unknown node:', nodeName);\n          break;\n      }\n\n      if (build !== undefined && node.DEF !== undefined && build.hasOwnProperty('name') === true) {\n        build.name = node.DEF;\n      }\n\n      return build;\n    }\n\n    function buildGroupingNode(node) {\n      const object = new Group(); //\n\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'bboxCenter':\n            // field not supported\n            break;\n\n          case 'bboxSize':\n            // field not supported\n            break;\n\n          case 'center':\n            // field not supported\n            break;\n\n          case 'children':\n            parseFieldChildren(fieldValues, object);\n            break;\n\n          case 'collide':\n            // field not supported\n            break;\n\n          case 'rotation':\n            const axis = new Vector3(fieldValues[0], fieldValues[1], fieldValues[2]);\n            const angle = fieldValues[3];\n            object.quaternion.setFromAxisAngle(axis, angle);\n            break;\n\n          case 'scale':\n            object.scale.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'scaleOrientation':\n            // field not supported\n            break;\n\n          case 'translation':\n            object.position.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'proxy':\n            // field not supported\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return object;\n    }\n\n    function buildBackgroundNode(node) {\n      const group = new Group();\n      let groundAngle, groundColor;\n      let skyAngle, skyColor;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'groundAngle':\n            groundAngle = fieldValues;\n            break;\n\n          case 'groundColor':\n            groundColor = fieldValues;\n            break;\n\n          case 'backUrl':\n            // field not supported\n            break;\n\n          case 'bottomUrl':\n            // field not supported\n            break;\n\n          case 'frontUrl':\n            // field not supported\n            break;\n\n          case 'leftUrl':\n            // field not supported\n            break;\n\n          case 'rightUrl':\n            // field not supported\n            break;\n\n          case 'topUrl':\n            // field not supported\n            break;\n\n          case 'skyAngle':\n            skyAngle = fieldValues;\n            break;\n\n          case 'skyColor':\n            skyColor = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const radius = 10000; // sky\n\n      if (skyColor) {\n        const skyGeometry = new SphereGeometry(radius, 32, 16);\n        const skyMaterial = new MeshBasicMaterial({\n          fog: false,\n          side: BackSide,\n          depthWrite: false,\n          depthTest: false\n        });\n\n        if (skyColor.length > 3) {\n          paintFaces(skyGeometry, radius, skyAngle, toColorArray(skyColor), true);\n          skyMaterial.vertexColors = true;\n        } else {\n          skyMaterial.color.setRGB(skyColor[0], skyColor[1], skyColor[2]);\n        }\n\n        const sky = new Mesh(skyGeometry, skyMaterial);\n        group.add(sky);\n      } // ground\n\n\n      if (groundColor) {\n        if (groundColor.length > 0) {\n          const groundGeometry = new SphereGeometry(radius, 32, 16, 0, 2 * Math.PI, 0.5 * Math.PI, 1.5 * Math.PI);\n          const groundMaterial = new MeshBasicMaterial({\n            fog: false,\n            side: BackSide,\n            vertexColors: true,\n            depthWrite: false,\n            depthTest: false\n          });\n          paintFaces(groundGeometry, radius, groundAngle, toColorArray(groundColor), false);\n          const ground = new Mesh(groundGeometry, groundMaterial);\n          group.add(ground);\n        }\n      } // render background group first\n\n\n      group.renderOrder = -Infinity;\n      return group;\n    }\n\n    function buildShapeNode(node) {\n      const fields = node.fields; // if the appearance field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n\n      let material = new MeshBasicMaterial({\n        color: 0x000000\n      });\n      let geometry;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'appearance':\n            if (fieldValues[0] !== null) {\n              material = getNode(fieldValues[0]);\n            }\n\n            break;\n\n          case 'geometry':\n            if (fieldValues[0] !== null) {\n              geometry = getNode(fieldValues[0]);\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // build 3D object\n\n\n      let object;\n\n      if (geometry && geometry.attributes.position) {\n        const type = geometry._type;\n\n        if (type === 'points') {\n          // points\n          const pointsMaterial = new PointsMaterial({\n            color: 0xffffff\n          });\n\n          if (geometry.attributes.color !== undefined) {\n            pointsMaterial.vertexColors = true;\n          } else {\n            // if the color field is NULL and there is a material defined for the appearance affecting this PointSet, then use the emissiveColor of the material to draw the points\n            if (material.isMeshPhongMaterial) {\n              pointsMaterial.color.copy(material.emissive);\n            }\n          }\n\n          object = new Points(geometry, pointsMaterial);\n        } else if (type === 'line') {\n          // lines\n          const lineMaterial = new LineBasicMaterial({\n            color: 0xffffff\n          });\n\n          if (geometry.attributes.color !== undefined) {\n            lineMaterial.vertexColors = true;\n          } else {\n            // if the color field is NULL and there is a material defined for the appearance affecting this IndexedLineSet, then use the emissiveColor of the material to draw the lines\n            if (material.isMeshPhongMaterial) {\n              lineMaterial.color.copy(material.emissive);\n            }\n          }\n\n          object = new LineSegments(geometry, lineMaterial);\n        } else {\n          // consider meshes\n          // check \"solid\" hint (it's placed in the geometry but affects the material)\n          if (geometry._solid !== undefined) {\n            material.side = geometry._solid ? FrontSide : DoubleSide;\n          } // check for vertex colors\n\n\n          if (geometry.attributes.color !== undefined) {\n            material.vertexColors = true;\n          }\n\n          object = new Mesh(geometry, material);\n        }\n      } else {\n        object = new Object3D(); // if the geometry field is NULL or no vertices are defined the object is not drawn\n\n        object.visible = false;\n      }\n\n      return object;\n    }\n\n    function buildAppearanceNode(node) {\n      let material = new MeshPhongMaterial();\n      let transformData;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'material':\n            if (fieldValues[0] !== null) {\n              const materialData = getNode(fieldValues[0]);\n              if (materialData.diffuseColor) material.color.copy(materialData.diffuseColor);\n              if (materialData.emissiveColor) material.emissive.copy(materialData.emissiveColor);\n              if (materialData.shininess) material.shininess = materialData.shininess;\n              if (materialData.specularColor) material.specular.copy(materialData.specularColor);\n              if (materialData.transparency) material.opacity = 1 - materialData.transparency;\n              if (materialData.transparency > 0) material.transparent = true;\n            } else {\n              // if the material field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n              material = new MeshBasicMaterial({\n                color: 0x000000\n              });\n            }\n\n            break;\n\n          case 'texture':\n            const textureNode = fieldValues[0];\n\n            if (textureNode !== null) {\n              if (textureNode.name === 'ImageTexture' || textureNode.name === 'PixelTexture') {\n                material.map = getNode(textureNode);\n              }\n            }\n\n            break;\n\n          case 'textureTransform':\n            if (fieldValues[0] !== null) {\n              transformData = getNode(fieldValues[0]);\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // only apply texture transform data if a texture was defined\n\n\n      if (material.map) {\n        // respect VRML lighting model\n        if (material.map.__type) {\n          switch (material.map.__type) {\n            case TEXTURE_TYPE.INTENSITY_ALPHA:\n              material.opacity = 1; // ignore transparency\n\n              break;\n\n            case TEXTURE_TYPE.RGB:\n              material.color.set(0xffffff); // ignore material color\n\n              break;\n\n            case TEXTURE_TYPE.RGBA:\n              material.color.set(0xffffff); // ignore material color\n\n              material.opacity = 1; // ignore transparency\n\n              break;\n          }\n\n          delete material.map.__type;\n        } // apply texture transform\n\n\n        if (transformData) {\n          material.map.center.copy(transformData.center);\n          material.map.rotation = transformData.rotation;\n          material.map.repeat.copy(transformData.scale);\n          material.map.offset.copy(transformData.translation);\n        }\n      }\n\n      return material;\n    }\n\n    function buildMaterialNode(node) {\n      const materialData = {};\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'ambientIntensity':\n            // field not supported\n            break;\n\n          case 'diffuseColor':\n            materialData.diffuseColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'emissiveColor':\n            materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'shininess':\n            materialData.shininess = fieldValues[0];\n            break;\n\n          case 'specularColor':\n            materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'transparency':\n            materialData.transparency = fieldValues[0];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return materialData;\n    }\n\n    function parseHexColor(hex, textureType, color) {\n      let value;\n\n      switch (textureType) {\n        case TEXTURE_TYPE.INTENSITY:\n          // Intensity texture: A one-component image specifies one-byte hexadecimal or integer values representing the intensity of the image\n          value = parseInt(hex);\n          color.r = value;\n          color.g = value;\n          color.b = value;\n          color.a = 1;\n          break;\n\n        case TEXTURE_TYPE.INTENSITY_ALPHA:\n          // Intensity+Alpha texture: A two-component image specifies the intensity in the first (high) byte and the alpha opacity in the second (low) byte.\n          value = parseInt('0x' + hex.substring(2, 4));\n          color.r = value;\n          color.g = value;\n          color.b = value;\n          color.a = parseInt('0x' + hex.substring(4, 6));\n          break;\n\n        case TEXTURE_TYPE.RGB:\n          // RGB texture: Pixels in a three-component image specify the red component in the first (high) byte, followed by the green and blue components\n          color.r = parseInt('0x' + hex.substring(2, 4));\n          color.g = parseInt('0x' + hex.substring(4, 6));\n          color.b = parseInt('0x' + hex.substring(6, 8));\n          color.a = 1;\n          break;\n\n        case TEXTURE_TYPE.RGBA:\n          // RGBA texture: Four-component images specify the alpha opacity byte after red/green/blue\n          color.r = parseInt('0x' + hex.substring(2, 4));\n          color.g = parseInt('0x' + hex.substring(4, 6));\n          color.b = parseInt('0x' + hex.substring(6, 8));\n          color.a = parseInt('0x' + hex.substring(8, 10));\n          break;\n      }\n    }\n\n    function getTextureType(num_components) {\n      let type;\n\n      switch (num_components) {\n        case 1:\n          type = TEXTURE_TYPE.INTENSITY;\n          break;\n\n        case 2:\n          type = TEXTURE_TYPE.INTENSITY_ALPHA;\n          break;\n\n        case 3:\n          type = TEXTURE_TYPE.RGB;\n          break;\n\n        case 4:\n          type = TEXTURE_TYPE.RGBA;\n          break;\n      }\n\n      return type;\n    }\n\n    function buildPixelTextureNode(node) {\n      let texture;\n      let wrapS = RepeatWrapping;\n      let wrapT = RepeatWrapping;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'image':\n            const width = fieldValues[0];\n            const height = fieldValues[1];\n            const num_components = fieldValues[2];\n            const textureType = getTextureType(num_components);\n            const data = new Uint8Array(4 * width * height);\n            const color = {\n              r: 0,\n              g: 0,\n              b: 0,\n              a: 0\n            };\n\n            for (let j = 3, k = 0, jl = fieldValues.length; j < jl; j++, k++) {\n              parseHexColor(fieldValues[j], textureType, color);\n              const stride = k * 4;\n              data[stride + 0] = color.r;\n              data[stride + 1] = color.g;\n              data[stride + 2] = color.b;\n              data[stride + 3] = color.a;\n            }\n\n            texture = new DataTexture(data, width, height);\n            texture.needsUpdate = true;\n            texture.__type = textureType; // needed for material modifications\n\n            break;\n\n          case 'repeatS':\n            if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n            break;\n\n          case 'repeatT':\n            if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      if (texture) {\n        texture.wrapS = wrapS;\n        texture.wrapT = wrapT;\n      }\n\n      return texture;\n    }\n\n    function buildImageTextureNode(node) {\n      let texture;\n      let wrapS = RepeatWrapping;\n      let wrapT = RepeatWrapping;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'url':\n            const url = fieldValues[0];\n            if (url) texture = textureLoader.load(url);\n            break;\n\n          case 'repeatS':\n            if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n            break;\n\n          case 'repeatT':\n            if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      if (texture) {\n        texture.wrapS = wrapS;\n        texture.wrapT = wrapT;\n      }\n\n      return texture;\n    }\n\n    function buildTextureTransformNode(node) {\n      const transformData = {\n        center: new Vector2(),\n        rotation: new Vector2(),\n        scale: new Vector2(),\n        translation: new Vector2()\n      };\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'center':\n            transformData.center.set(fieldValues[0], fieldValues[1]);\n            break;\n\n          case 'rotation':\n            transformData.rotation = fieldValues[0];\n            break;\n\n          case 'scale':\n            transformData.scale.set(fieldValues[0], fieldValues[1]);\n            break;\n\n          case 'translation':\n            transformData.translation.set(fieldValues[0], fieldValues[1]);\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return transformData;\n    }\n\n    function buildGeometricNode(node) {\n      return node.fields[0].values;\n    }\n\n    function buildWorldInfoNode(node) {\n      const worldInfo = {};\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'title':\n            worldInfo.title = fieldValues[0];\n            break;\n\n          case 'info':\n            worldInfo.info = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return worldInfo;\n    }\n\n    function buildIndexedFaceSetNode(node) {\n      let color, coord, normal, texCoord;\n      let ccw = true,\n          solid = true,\n          creaseAngle = 0;\n      let colorIndex, coordIndex, normalIndex, texCoordIndex;\n      let colorPerVertex = true,\n          normalPerVertex = true;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'coord':\n            const coordNode = fieldValues[0];\n\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n\n            break;\n\n          case 'normal':\n            const normalNode = fieldValues[0];\n\n            if (normalNode !== null) {\n              normal = getNode(normalNode);\n            }\n\n            break;\n\n          case 'texCoord':\n            const texCoordNode = fieldValues[0];\n\n            if (texCoordNode !== null) {\n              texCoord = getNode(texCoordNode);\n            }\n\n            break;\n\n          case 'ccw':\n            ccw = fieldValues[0];\n            break;\n\n          case 'colorIndex':\n            colorIndex = fieldValues;\n            break;\n\n          case 'colorPerVertex':\n            colorPerVertex = fieldValues[0];\n            break;\n\n          case 'convex':\n            // field not supported\n            break;\n\n          case 'coordIndex':\n            coordIndex = fieldValues;\n            break;\n\n          case 'creaseAngle':\n            creaseAngle = fieldValues[0];\n            break;\n\n          case 'normalIndex':\n            normalIndex = fieldValues;\n            break;\n\n          case 'normalPerVertex':\n            normalPerVertex = fieldValues[0];\n            break;\n\n          case 'solid':\n            solid = fieldValues[0];\n            break;\n\n          case 'texCoordIndex':\n            texCoordIndex = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      if (coordIndex === undefined) {\n        console.warn('THREE.VRMLLoader: Missing coordIndex.');\n        return new BufferGeometry(); // handle VRML files with incomplete geometry definition\n      }\n\n      const triangulatedCoordIndex = triangulateFaceIndex(coordIndex, ccw);\n      let colorAttribute;\n      let normalAttribute;\n      let uvAttribute;\n\n      if (color) {\n        if (colorPerVertex === true) {\n          if (colorIndex && colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then it is used to choose colors for each vertex of the IndexedFaceSet.\n            const triangulatedColorIndex = triangulateFaceIndex(colorIndex, ccw);\n            colorAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedColorIndex, color, 3);\n          } else {\n            // if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n            colorAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(color, 3));\n          }\n        } else {\n          if (colorIndex && colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then they are used to choose one color for each face of the IndexedFaceSet\n            const flattenFaceColors = flattenData(color, colorIndex);\n            const triangulatedFaceColors = triangulateFaceData(flattenFaceColors, coordIndex);\n            colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n          } else {\n            // if the colorIndex field is empty, then the color are applied to each face of the IndexedFaceSet in order\n            const triangulatedFaceColors = triangulateFaceData(color, coordIndex);\n            colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n          }\n        }\n      }\n\n      if (normal) {\n        if (normalPerVertex === true) {\n          // consider vertex normals\n          if (normalIndex && normalIndex.length > 0) {\n            // if the normalIndex field is not empty, then it is used to choose normals for each vertex of the IndexedFaceSet.\n            const triangulatedNormalIndex = triangulateFaceIndex(normalIndex, ccw);\n            normalAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedNormalIndex, normal, 3);\n          } else {\n            // if the normalIndex field is empty, then the coordIndex field is used to choose normals from the Normal node\n            normalAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(normal, 3));\n          }\n        } else {\n          // consider face normals\n          if (normalIndex && normalIndex.length > 0) {\n            // if the normalIndex field is not empty, then they are used to choose one normal for each face of the IndexedFaceSet\n            const flattenFaceNormals = flattenData(normal, normalIndex);\n            const triangulatedFaceNormals = triangulateFaceData(flattenFaceNormals, coordIndex);\n            normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n          } else {\n            // if the normalIndex field is empty, then the normals are applied to each face of the IndexedFaceSet in order\n            const triangulatedFaceNormals = triangulateFaceData(normal, coordIndex);\n            normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n          }\n        }\n      } else {\n        // if the normal field is NULL, then the loader should automatically generate normals, using creaseAngle to determine if and how normals are smoothed across shared vertices\n        normalAttribute = computeNormalAttribute(triangulatedCoordIndex, coord, creaseAngle);\n      }\n\n      if (texCoord) {\n        // texture coordinates are always defined on vertex level\n        if (texCoordIndex && texCoordIndex.length > 0) {\n          // if the texCoordIndex field is not empty, then it is used to choose texture coordinates for each vertex of the IndexedFaceSet.\n          const triangulatedTexCoordIndex = triangulateFaceIndex(texCoordIndex, ccw);\n          uvAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedTexCoordIndex, texCoord, 2);\n        } else {\n          // if the texCoordIndex field is empty, then the coordIndex array is used to choose texture coordinates from the TextureCoordinate node\n          uvAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(texCoord, 2));\n        }\n      }\n\n      const geometry = new BufferGeometry();\n      const positionAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(coord, 3));\n      geometry.setAttribute('position', positionAttribute);\n      geometry.setAttribute('normal', normalAttribute); // optional attributes\n\n      if (colorAttribute) geometry.setAttribute('color', colorAttribute);\n      if (uvAttribute) geometry.setAttribute('uv', uvAttribute); // \"solid\" influences the material so let's store it for later use\n\n      geometry._solid = solid;\n      geometry._type = 'mesh';\n      return geometry;\n    }\n\n    function buildIndexedLineSetNode(node) {\n      let color, coord;\n      let colorIndex, coordIndex;\n      let colorPerVertex = true;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'coord':\n            const coordNode = fieldValues[0];\n\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n\n            break;\n\n          case 'colorIndex':\n            colorIndex = fieldValues;\n            break;\n\n          case 'colorPerVertex':\n            colorPerVertex = fieldValues[0];\n            break;\n\n          case 'coordIndex':\n            coordIndex = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // build lines\n\n\n      let colorAttribute;\n      const expandedLineIndex = expandLineIndex(coordIndex); // create an index for three.js's linesegment primitive\n\n      if (color) {\n        if (colorPerVertex === true) {\n          if (colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then one color is used for each polyline of the IndexedLineSet.\n            const expandedColorIndex = expandLineIndex(colorIndex); // compute colors for each line segment (rendering primitve)\n\n            colorAttribute = computeAttributeFromIndexedData(expandedLineIndex, expandedColorIndex, color, 3); // compute data on vertex level\n          } else {\n            // if the colorIndex field is empty, then the colors are applied to each polyline of the IndexedLineSet in order.\n            colorAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(color, 3));\n          }\n        } else {\n          if (colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then colors are applied to each vertex of the IndexedLineSet\n            const flattenLineColors = flattenData(color, colorIndex); // compute colors for each VRML primitve\n\n            const expandedLineColors = expandLineData(flattenLineColors, coordIndex); // compute colors for each line segment (rendering primitve)\n\n            colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors); // compute data on vertex level\n          } else {\n            // if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n            const expandedLineColors = expandLineData(color, coordIndex); // compute colors for each line segment (rendering primitve)\n\n            colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors); // compute data on vertex level\n          }\n        }\n      } //\n\n\n      const geometry = new BufferGeometry();\n      const positionAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(coord, 3));\n      geometry.setAttribute('position', positionAttribute);\n      if (colorAttribute) geometry.setAttribute('color', colorAttribute);\n      geometry._type = 'line';\n      return geometry;\n    }\n\n    function buildPointSetNode(node) {\n      let color, coord;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'coord':\n            const coordNode = fieldValues[0];\n\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(coord, 3));\n      if (color) geometry.setAttribute('color', new Float32BufferAttribute(color, 3));\n      geometry._type = 'points';\n      return geometry;\n    }\n\n    function buildBoxNode(node) {\n      const size = new Vector3(2, 2, 2);\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'size':\n            size.x = fieldValues[0];\n            size.y = fieldValues[1];\n            size.z = fieldValues[2];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new BoxGeometry(size.x, size.y, size.z);\n      return geometry;\n    }\n\n    function buildConeNode(node) {\n      let radius = 1,\n          height = 2,\n          openEnded = false;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'bottom':\n            openEnded = !fieldValues[0];\n            break;\n\n          case 'bottomRadius':\n            radius = fieldValues[0];\n            break;\n\n          case 'height':\n            height = fieldValues[0];\n            break;\n\n          case 'side':\n            // field not supported\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new ConeGeometry(radius, height, 16, 1, openEnded);\n      return geometry;\n    }\n\n    function buildCylinderNode(node) {\n      let radius = 1,\n          height = 2;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'bottom':\n            // field not supported\n            break;\n\n          case 'radius':\n            radius = fieldValues[0];\n            break;\n\n          case 'height':\n            height = fieldValues[0];\n            break;\n\n          case 'side':\n            // field not supported\n            break;\n\n          case 'top':\n            // field not supported\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new CylinderGeometry(radius, radius, height, 16, 1);\n      return geometry;\n    }\n\n    function buildSphereNode(node) {\n      let radius = 1;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'radius':\n            radius = fieldValues[0];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new SphereGeometry(radius, 16, 16);\n      return geometry;\n    }\n\n    function buildElevationGridNode(node) {\n      let color;\n      let normal;\n      let texCoord;\n      let height;\n      let colorPerVertex = true;\n      let normalPerVertex = true;\n      let solid = true;\n      let ccw = true;\n      let creaseAngle = 0;\n      let xDimension = 2;\n      let zDimension = 2;\n      let xSpacing = 1;\n      let zSpacing = 1;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'normal':\n            const normalNode = fieldValues[0];\n\n            if (normalNode !== null) {\n              normal = getNode(normalNode);\n            }\n\n            break;\n\n          case 'texCoord':\n            const texCoordNode = fieldValues[0];\n\n            if (texCoordNode !== null) {\n              texCoord = getNode(texCoordNode);\n            }\n\n            break;\n\n          case 'height':\n            height = fieldValues;\n            break;\n\n          case 'ccw':\n            ccw = fieldValues[0];\n            break;\n\n          case 'colorPerVertex':\n            colorPerVertex = fieldValues[0];\n            break;\n\n          case 'creaseAngle':\n            creaseAngle = fieldValues[0];\n            break;\n\n          case 'normalPerVertex':\n            normalPerVertex = fieldValues[0];\n            break;\n\n          case 'solid':\n            solid = fieldValues[0];\n            break;\n\n          case 'xDimension':\n            xDimension = fieldValues[0];\n            break;\n\n          case 'xSpacing':\n            xSpacing = fieldValues[0];\n            break;\n\n          case 'zDimension':\n            zDimension = fieldValues[0];\n            break;\n\n          case 'zSpacing':\n            zSpacing = fieldValues[0];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // vertex data\n\n\n      const vertices = [];\n      const normals = [];\n      const colors = [];\n      const uvs = [];\n\n      for (let i = 0; i < zDimension; i++) {\n        for (let j = 0; j < xDimension; j++) {\n          // compute a row major index\n          const index = i * xDimension + j; // vertices\n\n          const x = xSpacing * i;\n          const y = height[index];\n          const z = zSpacing * j;\n          vertices.push(x, y, z); // colors\n\n          if (color && colorPerVertex === true) {\n            const r = color[index * 3 + 0];\n            const g = color[index * 3 + 1];\n            const b = color[index * 3 + 2];\n            colors.push(r, g, b);\n          } // normals\n\n\n          if (normal && normalPerVertex === true) {\n            const xn = normal[index * 3 + 0];\n            const yn = normal[index * 3 + 1];\n            const zn = normal[index * 3 + 2];\n            normals.push(xn, yn, zn);\n          } // uvs\n\n\n          if (texCoord) {\n            const s = texCoord[index * 2 + 0];\n            const t = texCoord[index * 2 + 1];\n            uvs.push(s, t);\n          } else {\n            uvs.push(i / (xDimension - 1), j / (zDimension - 1));\n          }\n        }\n      } // indices\n\n\n      const indices = [];\n\n      for (let i = 0; i < xDimension - 1; i++) {\n        for (let j = 0; j < zDimension - 1; j++) {\n          // from https://tecfa.unige.ch/guides/vrml/vrml97/spec/part1/nodesRef.html#ElevationGrid\n          const a = i + j * xDimension;\n          const b = i + (j + 1) * xDimension;\n          const c = i + 1 + (j + 1) * xDimension;\n          const d = i + 1 + j * xDimension; // faces\n\n          if (ccw === true) {\n            indices.push(a, c, b);\n            indices.push(c, a, d);\n          } else {\n            indices.push(a, b, c);\n            indices.push(c, d, a);\n          }\n        }\n      } //\n\n\n      const positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n      const uvAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(uvs, 2));\n      let colorAttribute;\n      let normalAttribute; // color attribute\n\n      if (color) {\n        if (colorPerVertex === false) {\n          for (let i = 0; i < xDimension - 1; i++) {\n            for (let j = 0; j < zDimension - 1; j++) {\n              const index = i + j * (xDimension - 1);\n              const r = color[index * 3 + 0];\n              const g = color[index * 3 + 1];\n              const b = color[index * 3 + 2]; // one color per quad\n\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n            }\n          }\n\n          colorAttribute = new Float32BufferAttribute(colors, 3);\n        } else {\n          colorAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(colors, 3));\n        }\n      } // normal attribute\n\n\n      if (normal) {\n        if (normalPerVertex === false) {\n          for (let i = 0; i < xDimension - 1; i++) {\n            for (let j = 0; j < zDimension - 1; j++) {\n              const index = i + j * (xDimension - 1);\n              const xn = normal[index * 3 + 0];\n              const yn = normal[index * 3 + 1];\n              const zn = normal[index * 3 + 2]; // one normal per quad\n\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n            }\n          }\n\n          normalAttribute = new Float32BufferAttribute(normals, 3);\n        } else {\n          normalAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(normals, 3));\n        }\n      } else {\n        normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n      } // build geometry\n\n\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', positionAttribute);\n      geometry.setAttribute('normal', normalAttribute);\n      geometry.setAttribute('uv', uvAttribute);\n      if (colorAttribute) geometry.setAttribute('color', colorAttribute); // \"solid\" influences the material so let's store it for later use\n\n      geometry._solid = solid;\n      geometry._type = 'mesh';\n      return geometry;\n    }\n\n    function buildExtrusionNode(node) {\n      let crossSection = [1, 1, 1, -1, -1, -1, -1, 1, 1, 1];\n      let spine = [0, 0, 0, 0, 1, 0];\n      let scale;\n      let orientation;\n      let beginCap = true;\n      let ccw = true;\n      let creaseAngle = 0;\n      let endCap = true;\n      let solid = true;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'beginCap':\n            beginCap = fieldValues[0];\n            break;\n\n          case 'ccw':\n            ccw = fieldValues[0];\n            break;\n\n          case 'convex':\n            // field not supported\n            break;\n\n          case 'creaseAngle':\n            creaseAngle = fieldValues[0];\n            break;\n\n          case 'crossSection':\n            crossSection = fieldValues;\n            break;\n\n          case 'endCap':\n            endCap = fieldValues[0];\n            break;\n\n          case 'orientation':\n            orientation = fieldValues;\n            break;\n\n          case 'scale':\n            scale = fieldValues;\n            break;\n\n          case 'solid':\n            solid = fieldValues[0];\n            break;\n\n          case 'spine':\n            spine = fieldValues; // only extrusion along the Y-axis are supported so far\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const crossSectionClosed = crossSection[0] === crossSection[crossSection.length - 2] && crossSection[1] === crossSection[crossSection.length - 1]; // vertices\n\n      const vertices = [];\n      const spineVector = new Vector3();\n      const scaling = new Vector3();\n      const axis = new Vector3();\n      const vertex = new Vector3();\n      const quaternion = new Quaternion();\n\n      for (let i = 0, j = 0, o = 0, il = spine.length; i < il; i += 3, j += 2, o += 4) {\n        spineVector.fromArray(spine, i);\n        scaling.x = scale ? scale[j + 0] : 1;\n        scaling.y = 1;\n        scaling.z = scale ? scale[j + 1] : 1;\n        axis.x = orientation ? orientation[o + 0] : 0;\n        axis.y = orientation ? orientation[o + 1] : 0;\n        axis.z = orientation ? orientation[o + 2] : 1;\n        const angle = orientation ? orientation[o + 3] : 0;\n\n        for (let k = 0, kl = crossSection.length; k < kl; k += 2) {\n          vertex.x = crossSection[k + 0];\n          vertex.y = 0;\n          vertex.z = crossSection[k + 1]; // scale\n\n          vertex.multiply(scaling); // rotate\n\n          quaternion.setFromAxisAngle(axis, angle);\n          vertex.applyQuaternion(quaternion); // translate\n\n          vertex.add(spineVector);\n          vertices.push(vertex.x, vertex.y, vertex.z);\n        }\n      } // indices\n\n\n      const indices = [];\n      const spineCount = spine.length / 3;\n      const crossSectionCount = crossSection.length / 2;\n\n      for (let i = 0; i < spineCount - 1; i++) {\n        for (let j = 0; j < crossSectionCount - 1; j++) {\n          const a = j + i * crossSectionCount;\n          let b = j + 1 + i * crossSectionCount;\n          const c = j + (i + 1) * crossSectionCount;\n          let d = j + 1 + (i + 1) * crossSectionCount;\n\n          if (j === crossSectionCount - 2 && crossSectionClosed === true) {\n            b = i * crossSectionCount;\n            d = (i + 1) * crossSectionCount;\n          }\n\n          if (ccw === true) {\n            indices.push(a, b, c);\n            indices.push(c, b, d);\n          } else {\n            indices.push(a, c, b);\n            indices.push(c, d, b);\n          }\n        }\n      } // triangulate cap\n\n\n      if (beginCap === true || endCap === true) {\n        const contour = [];\n\n        for (let i = 0, l = crossSection.length; i < l; i += 2) {\n          contour.push(new Vector2(crossSection[i], crossSection[i + 1]));\n        }\n\n        const faces = ShapeUtils.triangulateShape(contour, []);\n        const capIndices = [];\n\n        for (let i = 0, l = faces.length; i < l; i++) {\n          const face = faces[i];\n          capIndices.push(face[0], face[1], face[2]);\n        } // begin cap\n\n\n        if (beginCap === true) {\n          for (let i = 0, l = capIndices.length; i < l; i += 3) {\n            if (ccw === true) {\n              indices.push(capIndices[i + 0], capIndices[i + 1], capIndices[i + 2]);\n            } else {\n              indices.push(capIndices[i + 0], capIndices[i + 2], capIndices[i + 1]);\n            }\n          }\n        } // end cap\n\n\n        if (endCap === true) {\n          const indexOffset = crossSectionCount * (spineCount - 1); // references to the first vertex of the last cross section\n\n          for (let i = 0, l = capIndices.length; i < l; i += 3) {\n            if (ccw === true) {\n              indices.push(indexOffset + capIndices[i + 0], indexOffset + capIndices[i + 2], indexOffset + capIndices[i + 1]);\n            } else {\n              indices.push(indexOffset + capIndices[i + 0], indexOffset + capIndices[i + 1], indexOffset + capIndices[i + 2]);\n            }\n          }\n        }\n      }\n\n      const positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n      const normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', positionAttribute);\n      geometry.setAttribute('normal', normalAttribute); // no uvs yet\n      // \"solid\" influences the material so let's store it for later use\n\n      geometry._solid = solid;\n      geometry._type = 'mesh';\n      return geometry;\n    } // helper functions\n\n\n    function resolveUSE(identifier) {\n      const node = nodeMap[identifier];\n      const build = getNode(node); // because the same 3D objects can have different transformations, it's necessary to clone them.\n      // materials can be influenced by the geometry (e.g. vertex normals). cloning is necessary to avoid\n      // any side effects\n\n      return build.isObject3D || build.isMaterial ? build.clone() : build;\n    }\n\n    function parseFieldChildren(children, owner) {\n      for (let i = 0, l = children.length; i < l; i++) {\n        const object = getNode(children[i]);\n        if (object instanceof Object3D) owner.add(object);\n      }\n    }\n\n    function triangulateFaceIndex(index, ccw) {\n      const indices = []; // since face defintions can have more than three vertices, it's necessary to\n      // perform a simple triangulation\n\n      let start = 0;\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[start];\n        const i2 = index[i + (ccw ? 1 : 2)];\n        const i3 = index[i + (ccw ? 2 : 1)];\n        indices.push(i1, i2, i3); // an index of -1 indicates that the current face has ended and the next one begins\n\n        if (index[i + 3] === -1 || i + 3 >= l) {\n          i += 3;\n          start = i + 1;\n        }\n      }\n\n      return indices;\n    }\n\n    function triangulateFaceData(data, index) {\n      const triangulatedData = [];\n      let start = 0;\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const stride = start * 3;\n        const x = data[stride];\n        const y = data[stride + 1];\n        const z = data[stride + 2];\n        triangulatedData.push(x, y, z); // an index of -1 indicates that the current face has ended and the next one begins\n\n        if (index[i + 3] === -1 || i + 3 >= l) {\n          i += 3;\n          start++;\n        }\n      }\n\n      return triangulatedData;\n    }\n\n    function flattenData(data, index) {\n      const flattenData = [];\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[i];\n        const stride = i1 * 3;\n        const x = data[stride];\n        const y = data[stride + 1];\n        const z = data[stride + 2];\n        flattenData.push(x, y, z);\n      }\n\n      return flattenData;\n    }\n\n    function expandLineIndex(index) {\n      const indices = [];\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[i];\n        const i2 = index[i + 1];\n        indices.push(i1, i2); // an index of -1 indicates that the current line has ended and the next one begins\n\n        if (index[i + 2] === -1 || i + 2 >= l) {\n          i += 2;\n        }\n      }\n\n      return indices;\n    }\n\n    function expandLineData(data, index) {\n      const triangulatedData = [];\n      let start = 0;\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const stride = start * 3;\n        const x = data[stride];\n        const y = data[stride + 1];\n        const z = data[stride + 2];\n        triangulatedData.push(x, y, z); // an index of -1 indicates that the current line has ended and the next one begins\n\n        if (index[i + 2] === -1 || i + 2 >= l) {\n          i += 2;\n          start++;\n        }\n      }\n\n      return triangulatedData;\n    }\n\n    const vA = new Vector3();\n    const vB = new Vector3();\n    const vC = new Vector3();\n    const uvA = new Vector2();\n    const uvB = new Vector2();\n    const uvC = new Vector2();\n\n    function computeAttributeFromIndexedData(coordIndex, index, data, itemSize) {\n      const array = []; // we use the coordIndex.length as delimiter since normalIndex must contain at least as many indices\n\n      for (let i = 0, l = coordIndex.length; i < l; i += 3) {\n        const a = index[i];\n        const b = index[i + 1];\n        const c = index[i + 2];\n\n        if (itemSize === 2) {\n          uvA.fromArray(data, a * itemSize);\n          uvB.fromArray(data, b * itemSize);\n          uvC.fromArray(data, c * itemSize);\n          array.push(uvA.x, uvA.y);\n          array.push(uvB.x, uvB.y);\n          array.push(uvC.x, uvC.y);\n        } else {\n          vA.fromArray(data, a * itemSize);\n          vB.fromArray(data, b * itemSize);\n          vC.fromArray(data, c * itemSize);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vB.x, vB.y, vB.z);\n          array.push(vC.x, vC.y, vC.z);\n        }\n      }\n\n      return new Float32BufferAttribute(array, itemSize);\n    }\n\n    function computeAttributeFromFaceData(index, faceData) {\n      const array = [];\n\n      for (let i = 0, j = 0, l = index.length; i < l; i += 3, j++) {\n        vA.fromArray(faceData, j * 3);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n      }\n\n      return new Float32BufferAttribute(array, 3);\n    }\n\n    function computeAttributeFromLineData(index, lineData) {\n      const array = [];\n\n      for (let i = 0, j = 0, l = index.length; i < l; i += 2, j++) {\n        vA.fromArray(lineData, j * 3);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n      }\n\n      return new Float32BufferAttribute(array, 3);\n    }\n\n    function toNonIndexedAttribute(indices, attribute) {\n      const array = attribute.array;\n      const itemSize = attribute.itemSize;\n      const array2 = new array.constructor(indices.length * itemSize);\n      let index = 0,\n          index2 = 0;\n\n      for (let i = 0, l = indices.length; i < l; i++) {\n        index = indices[i] * itemSize;\n\n        for (let j = 0; j < itemSize; j++) {\n          array2[index2++] = array[index++];\n        }\n      }\n\n      return new Float32BufferAttribute(array2, itemSize);\n    }\n\n    const ab = new Vector3();\n    const cb = new Vector3();\n\n    function computeNormalAttribute(index, coord, creaseAngle) {\n      const faces = [];\n      const vertexNormals = {}; // prepare face and raw vertex normals\n\n      for (let i = 0, l = index.length; i < l; i += 3) {\n        const a = index[i];\n        const b = index[i + 1];\n        const c = index[i + 2];\n        const face = new Face(a, b, c);\n        vA.fromArray(coord, a * 3);\n        vB.fromArray(coord, b * 3);\n        vC.fromArray(coord, c * 3);\n        cb.subVectors(vC, vB);\n        ab.subVectors(vA, vB);\n        cb.cross(ab);\n        cb.normalize();\n        face.normal.copy(cb);\n        if (vertexNormals[a] === undefined) vertexNormals[a] = [];\n        if (vertexNormals[b] === undefined) vertexNormals[b] = [];\n        if (vertexNormals[c] === undefined) vertexNormals[c] = [];\n        vertexNormals[a].push(face.normal);\n        vertexNormals[b].push(face.normal);\n        vertexNormals[c].push(face.normal);\n        faces.push(face);\n      } // compute vertex normals and build final geometry\n\n\n      const normals = [];\n\n      for (let i = 0, l = faces.length; i < l; i++) {\n        const face = faces[i];\n        const nA = weightedNormal(vertexNormals[face.a], face.normal, creaseAngle);\n        const nB = weightedNormal(vertexNormals[face.b], face.normal, creaseAngle);\n        const nC = weightedNormal(vertexNormals[face.c], face.normal, creaseAngle);\n        vA.fromArray(coord, face.a * 3);\n        vB.fromArray(coord, face.b * 3);\n        vC.fromArray(coord, face.c * 3);\n        normals.push(nA.x, nA.y, nA.z);\n        normals.push(nB.x, nB.y, nB.z);\n        normals.push(nC.x, nC.y, nC.z);\n      }\n\n      return new Float32BufferAttribute(normals, 3);\n    }\n\n    function weightedNormal(normals, vector, creaseAngle) {\n      const normal = new Vector3();\n\n      if (creaseAngle === 0) {\n        normal.copy(vector);\n      } else {\n        for (let i = 0, l = normals.length; i < l; i++) {\n          if (normals[i].angleTo(vector) < creaseAngle) {\n            normal.add(normals[i]);\n          }\n        }\n      }\n\n      return normal.normalize();\n    }\n\n    function toColorArray(colors) {\n      const array = [];\n\n      for (let i = 0, l = colors.length; i < l; i += 3) {\n        array.push(new Color(colors[i], colors[i + 1], colors[i + 2]));\n      }\n\n      return array;\n    }\n    /**\n     * Vertically paints the faces interpolating between the\n     * specified colors at the specified angels. This is used for the Background\n     * node, but could be applied to other nodes with multiple faces as well.\n     *\n     * When used with the Background node, default is directionIsDown is true if\n     * interpolating the skyColor down from the Zenith. When interpolationg up from\n     * the Nadir i.e. interpolating the groundColor, the directionIsDown is false.\n     *\n     * The first angle is never specified, it is the Zenith (0 rad). Angles are specified\n     * in radians. The geometry is thought a sphere, but could be anything. The color interpolation\n     * is linear along the Y axis in any case.\n     *\n     * You must specify one more color than you have angles at the beginning of the colors array.\n     * This is the color of the Zenith (the top of the shape).\n     *\n     * @param {BufferGeometry} geometry\n     * @param {number} radius\n     * @param {array} angles\n     * @param {array} colors\n     * @param {boolean} topDown - Whether to work top down or bottom up.\n     */\n\n\n    function paintFaces(geometry, radius, angles, colors, topDown) {\n      // compute threshold values\n      const thresholds = [];\n      const startAngle = topDown === true ? 0 : Math.PI;\n\n      for (let i = 0, l = colors.length; i < l; i++) {\n        let angle = i === 0 ? 0 : angles[i - 1];\n        angle = topDown === true ? angle : startAngle - angle;\n        const point = new Vector3();\n        point.setFromSphericalCoords(radius, angle, 0);\n        thresholds.push(point);\n      } // generate vertex colors\n\n\n      const indices = geometry.index;\n      const positionAttribute = geometry.attributes.position;\n      const colorAttribute = new BufferAttribute(new Float32Array(geometry.attributes.position.count * 3), 3);\n      const position = new Vector3();\n      const color = new Color();\n\n      for (let i = 0; i < indices.count; i++) {\n        const index = indices.getX(i);\n        position.fromBufferAttribute(positionAttribute, index);\n        let thresholdIndexA, thresholdIndexB;\n        let t = 1;\n\n        for (let j = 1; j < thresholds.length; j++) {\n          thresholdIndexA = j - 1;\n          thresholdIndexB = j;\n          const thresholdA = thresholds[thresholdIndexA];\n          const thresholdB = thresholds[thresholdIndexB];\n\n          if (topDown === true) {\n            // interpolation for sky color\n            if (position.y <= thresholdA.y && position.y > thresholdB.y) {\n              t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n              break;\n            }\n          } else {\n            // interpolation for ground color\n            if (position.y >= thresholdA.y && position.y < thresholdB.y) {\n              t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n              break;\n            }\n          }\n        }\n\n        const colorA = colors[thresholdIndexA];\n        const colorB = colors[thresholdIndexB];\n        color.copy(colorA).lerp(colorB, t);\n        colorAttribute.setXYZ(index, color.r, color.g, color.b);\n      }\n\n      geometry.setAttribute('color', colorAttribute);\n    } //\n\n\n    const textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin); // check version (only 2.0 is supported)\n\n    if (data.indexOf('#VRML V2.0') === -1) {\n      throw Error('THREE.VRMLLexer: Version of VRML asset not supported.');\n    } // create JSON representing the tree structure of the VRML asset\n\n\n    const tree = generateVRMLTree(data); // parse the tree structure to a three.js scene\n\n    const scene = parseTree(tree);\n    return scene;\n  }\n\n}\n\nclass VRMLLexer {\n  constructor(tokens) {\n    this.lexer = new Lexer(tokens); // eslint-disable-line no-undef\n  }\n\n  lex(inputText) {\n    const lexingResult = this.lexer.tokenize(inputText);\n\n    if (lexingResult.errors.length > 0) {\n      console.error(lexingResult.errors);\n      throw Error('THREE.VRMLLexer: Lexing errors detected.');\n    }\n\n    return lexingResult;\n  }\n\n}\n\nclass VRMLParser extends CstParser {\n  constructor(tokenVocabulary) {\n    super(tokenVocabulary);\n    const $ = this;\n    const Version = tokenVocabulary['Version'];\n    const LCurly = tokenVocabulary['LCurly'];\n    const RCurly = tokenVocabulary['RCurly'];\n    const LSquare = tokenVocabulary['LSquare'];\n    const RSquare = tokenVocabulary['RSquare'];\n    const Identifier = tokenVocabulary['Identifier'];\n    const RouteIdentifier = tokenVocabulary['RouteIdentifier'];\n    const StringLiteral = tokenVocabulary['StringLiteral'];\n    const HexLiteral = tokenVocabulary['HexLiteral'];\n    const NumberLiteral = tokenVocabulary['NumberLiteral'];\n    const TrueLiteral = tokenVocabulary['TrueLiteral'];\n    const FalseLiteral = tokenVocabulary['FalseLiteral'];\n    const NullLiteral = tokenVocabulary['NullLiteral'];\n    const DEF = tokenVocabulary['DEF'];\n    const USE = tokenVocabulary['USE'];\n    const ROUTE = tokenVocabulary['ROUTE'];\n    const TO = tokenVocabulary['TO'];\n    const NodeName = tokenVocabulary['NodeName'];\n    $.RULE('vrml', function () {\n      $.SUBRULE($.version);\n      $.AT_LEAST_ONE(function () {\n        $.SUBRULE($.node);\n      });\n      $.MANY(function () {\n        $.SUBRULE($.route);\n      });\n    });\n    $.RULE('version', function () {\n      $.CONSUME(Version);\n    });\n    $.RULE('node', function () {\n      $.OPTION(function () {\n        $.SUBRULE($.def);\n      });\n      $.CONSUME(NodeName);\n      $.CONSUME(LCurly);\n      $.MANY(function () {\n        $.SUBRULE($.field);\n      });\n      $.CONSUME(RCurly);\n    });\n    $.RULE('field', function () {\n      $.CONSUME(Identifier);\n      $.OR2([{\n        ALT: function () {\n          $.SUBRULE($.singleFieldValue);\n        }\n      }, {\n        ALT: function () {\n          $.SUBRULE($.multiFieldValue);\n        }\n      }]);\n    });\n    $.RULE('def', function () {\n      $.CONSUME(DEF);\n      $.OR([{\n        ALT: function () {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function () {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE('use', function () {\n      $.CONSUME(USE);\n      $.OR([{\n        ALT: function () {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function () {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE('singleFieldValue', function () {\n      $.AT_LEAST_ONE(function () {\n        $.OR([{\n          ALT: function () {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function () {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(TrueLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(FalseLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n    });\n    $.RULE('multiFieldValue', function () {\n      $.CONSUME(LSquare);\n      $.MANY(function () {\n        $.OR([{\n          ALT: function () {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function () {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n      $.CONSUME(RSquare);\n    });\n    $.RULE('route', function () {\n      $.CONSUME(ROUTE);\n      $.CONSUME(RouteIdentifier);\n      $.CONSUME(TO);\n      $.CONSUME2(RouteIdentifier);\n    });\n    this.performSelfAnalysis();\n  }\n\n}\n\nclass Face {\n  constructor(a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.normal = new Vector3();\n  }\n\n}\n\nconst TEXTURE_TYPE = {\n  INTENSITY: 1,\n  INTENSITY_ALPHA: 2,\n  RGB: 3,\n  RGBA: 4\n};\nexport { VRMLLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","Vector3","Vector2","TextureLoader","Scene","Object3D","Group","SphereGeometry","MeshBasicMaterial","BackSide","Mesh","PointsMaterial","Points","LineBasicMaterial","LineSegments","FrontSide","DoubleSide","MeshPhongMaterial","Color","DataTexture","BufferGeometry","Float32BufferAttribute","BoxGeometry","ConeGeometry","CylinderGeometry","Quaternion","ShapeUtils","BufferAttribute","RepeatWrapping","ClampToEdgeWrapping","createToken","Lexer","CstParser","VRMLLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","nodeMap","generateVRMLTree","tokenData","createTokens","lexer","VRMLLexer","tokens","parser","VRMLParser","tokenVocabulary","visitor","createVisitor","getBaseCstVisitorConstructor","lexingResult","lex","input","cstOutput","vrml","errors","length","Error","ast","visit","RouteIdentifier","name","pattern","Identifier","longer_alt","nodeTypes","Version","NodeName","RegExp","join","DEF","USE","ROUTE","TO","StringLiteral","HexLiteral","NumberLiteral","TrueLiteral","FalseLiteral","NullLiteral","LSquare","RSquare","LCurly","RCurly","Comment","group","SKIPPED","WhiteSpace","i","l","token","BaseVRMLVisitor","VRMLToASTVisitor","call","validateVisitor","prototype","Object","assign","create","ctx","version","nodes","routes","node","push","route","image","fields","field","def","type","values","result","singleFieldValue","multiFieldValue","use","processField","FROM","stringLiteral","replace","numberLiteral","parseFloat","hexLiteral","trueLiteral","falseLiteral","forEach","parseTree","tree","scene","buildNodeMap","object","getNode","add","userData","worldInfo","fieldValues","j","jl","resolveUSE","build","undefined","buildNode","nodeName","buildGroupingNode","buildBackgroundNode","buildShapeNode","buildAppearanceNode","buildMaterialNode","buildImageTextureNode","buildPixelTextureNode","buildTextureTransformNode","buildIndexedFaceSetNode","buildIndexedLineSetNode","buildPointSetNode","buildBoxNode","buildConeNode","buildCylinderNode","buildSphereNode","buildElevationGridNode","buildExtrusionNode","buildGeometricNode","buildWorldInfoNode","warn","hasOwnProperty","fieldName","parseFieldChildren","axis","angle","quaternion","setFromAxisAngle","scale","set","position","groundAngle","groundColor","skyAngle","skyColor","radius","skyGeometry","skyMaterial","fog","side","depthWrite","depthTest","paintFaces","toColorArray","vertexColors","color","setRGB","sky","groundGeometry","Math","PI","groundMaterial","ground","renderOrder","Infinity","material","geometry","attributes","_type","pointsMaterial","isMeshPhongMaterial","copy","emissive","lineMaterial","_solid","visible","transformData","materialData","diffuseColor","emissiveColor","shininess","specularColor","specular","transparency","opacity","transparent","textureNode","map","__type","TEXTURE_TYPE","INTENSITY_ALPHA","RGB","RGBA","center","rotation","repeat","offset","translation","parseHexColor","hex","textureType","value","INTENSITY","parseInt","r","g","b","a","substring","getTextureType","num_components","texture","wrapS","wrapT","width","height","Uint8Array","k","stride","needsUpdate","textureLoader","title","info","coord","normal","texCoord","ccw","solid","creaseAngle","colorIndex","coordIndex","normalIndex","texCoordIndex","colorPerVertex","normalPerVertex","colorNode","coordNode","normalNode","texCoordNode","triangulatedCoordIndex","triangulateFaceIndex","colorAttribute","normalAttribute","uvAttribute","triangulatedColorIndex","computeAttributeFromIndexedData","toNonIndexedAttribute","flattenFaceColors","flattenData","triangulatedFaceColors","triangulateFaceData","computeAttributeFromFaceData","triangulatedNormalIndex","flattenFaceNormals","triangulatedFaceNormals","computeNormalAttribute","triangulatedTexCoordIndex","positionAttribute","setAttribute","expandedLineIndex","expandLineIndex","expandedColorIndex","flattenLineColors","expandedLineColors","expandLineData","computeAttributeFromLineData","size","x","y","z","openEnded","xDimension","zDimension","xSpacing","zSpacing","vertices","normals","colors","uvs","index","xn","yn","zn","s","t","indices","c","d","crossSection","spine","orientation","beginCap","endCap","crossSectionClosed","spineVector","scaling","vertex","o","il","fromArray","kl","multiply","applyQuaternion","spineCount","crossSectionCount","contour","faces","triangulateShape","capIndices","face","indexOffset","identifier","isObject3D","isMaterial","clone","children","owner","start","i1","i2","i3","triangulatedData","vA","vB","vC","uvA","uvB","uvC","itemSize","array","faceData","lineData","attribute","array2","index2","ab","cb","vertexNormals","Face","subVectors","cross","normalize","nA","weightedNormal","nB","nC","vector","angleTo","angles","topDown","thresholds","startAngle","point","setFromSphericalCoords","Float32Array","count","getX","fromBufferAttribute","thresholdIndexA","thresholdIndexB","thresholdA","thresholdB","abs","colorA","colorB","lerp","setXYZ","resourcePath","setCrossOrigin","crossOrigin","indexOf","inputText","tokenize","$","RULE","SUBRULE","AT_LEAST_ONE","MANY","CONSUME","OPTION","OR2","ALT","OR","CONSUME2","performSelfAnalysis"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/three-stdlib/loaders/VRMLLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, Vector3, Vector2, TextureLoader, Scene, Object3D, Group, SphereGeometry, MeshBasicMaterial, BackSide, Mesh, PointsMaterial, Points, LineBasicMaterial, LineSegments, FrontSide, DoubleSide, MeshPhongMaterial, Color, DataTexture, BufferGeometry, Float32BufferAttribute, BoxGeometry, ConeGeometry, CylinderGeometry, Quaternion, ShapeUtils, BufferAttribute, RepeatWrapping, ClampToEdgeWrapping } from 'three';\nimport { createToken, Lexer, CstParser } from 'chevrotain';\n\nclass VRMLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data, path) {\n    const nodeMap = {};\n\n    function generateVRMLTree(data) {\n      // create lexer, parser and visitor\n      const tokenData = createTokens();\n      const lexer = new VRMLLexer(tokenData.tokens);\n      const parser = new VRMLParser(tokenData.tokenVocabulary);\n      const visitor = createVisitor(parser.getBaseCstVisitorConstructor()); // lexing\n\n      const lexingResult = lexer.lex(data);\n      parser.input = lexingResult.tokens; // parsing\n\n      const cstOutput = parser.vrml();\n\n      if (parser.errors.length > 0) {\n        console.error(parser.errors);\n        throw Error('THREE.VRMLLoader: Parsing errors detected.');\n      } // actions\n\n\n      const ast = visitor.visit(cstOutput);\n      return ast;\n    }\n\n    function createTokens() {\n      // from http://gun.teipir.gr/VRML-amgem/spec/part1/concepts.html#SyntaxBasics\n      const RouteIdentifier = createToken({\n        name: 'RouteIdentifier',\n        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*[\\.][^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/\n      });\n      const Identifier = createToken({\n        name: 'Identifier',\n        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/,\n        longer_alt: RouteIdentifier\n      }); // from http://gun.teipir.gr/VRML-amgem/spec/part1/nodesRef.html\n\n      const nodeTypes = ['Anchor', 'Billboard', 'Collision', 'Group', 'Transform', // grouping nodes\n      'Inline', 'LOD', 'Switch', // special groups\n      'AudioClip', 'DirectionalLight', 'PointLight', 'Script', 'Shape', 'Sound', 'SpotLight', 'WorldInfo', // common nodes\n      'CylinderSensor', 'PlaneSensor', 'ProximitySensor', 'SphereSensor', 'TimeSensor', 'TouchSensor', 'VisibilitySensor', // sensors\n      'Box', 'Cone', 'Cylinder', 'ElevationGrid', 'Extrusion', 'IndexedFaceSet', 'IndexedLineSet', 'PointSet', 'Sphere', // geometries\n      'Color', 'Coordinate', 'Normal', 'TextureCoordinate', // geometric properties\n      'Appearance', 'FontStyle', 'ImageTexture', 'Material', 'MovieTexture', 'PixelTexture', 'TextureTransform', // appearance\n      'ColorInterpolator', 'CoordinateInterpolator', 'NormalInterpolator', 'OrientationInterpolator', 'PositionInterpolator', 'ScalarInterpolator', // interpolators\n      'Background', 'Fog', 'NavigationInfo', 'Viewpoint', // bindable nodes\n      'Text' // Text must be placed at the end of the regex so there are no matches for TextureTransform and TextureCoordinate\n      ]; //\n\n      const Version = createToken({\n        name: 'Version',\n        pattern: /#VRML.*/,\n        longer_alt: Identifier\n      });\n      const NodeName = createToken({\n        name: 'NodeName',\n        pattern: new RegExp(nodeTypes.join('|')),\n        longer_alt: Identifier\n      });\n      const DEF = createToken({\n        name: 'DEF',\n        pattern: /DEF/,\n        longer_alt: Identifier\n      });\n      const USE = createToken({\n        name: 'USE',\n        pattern: /USE/,\n        longer_alt: Identifier\n      });\n      const ROUTE = createToken({\n        name: 'ROUTE',\n        pattern: /ROUTE/,\n        longer_alt: Identifier\n      });\n      const TO = createToken({\n        name: 'TO',\n        pattern: /TO/,\n        longer_alt: Identifier\n      }); //\n\n      const StringLiteral = createToken({\n        name: 'StringLiteral',\n        pattern: /\"(?:[^\\\\\"\\n\\r]|\\\\[bfnrtv\"\\\\/]|\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])*\"/\n      });\n      const HexLiteral = createToken({\n        name: 'HexLiteral',\n        pattern: /0[xX][0-9a-fA-F]+/\n      });\n      const NumberLiteral = createToken({\n        name: 'NumberLiteral',\n        pattern: /[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?/\n      });\n      const TrueLiteral = createToken({\n        name: 'TrueLiteral',\n        pattern: /TRUE/\n      });\n      const FalseLiteral = createToken({\n        name: 'FalseLiteral',\n        pattern: /FALSE/\n      });\n      const NullLiteral = createToken({\n        name: 'NullLiteral',\n        pattern: /NULL/\n      });\n      const LSquare = createToken({\n        name: 'LSquare',\n        pattern: /\\[/\n      });\n      const RSquare = createToken({\n        name: 'RSquare',\n        pattern: /]/\n      });\n      const LCurly = createToken({\n        name: 'LCurly',\n        pattern: /{/\n      });\n      const RCurly = createToken({\n        name: 'RCurly',\n        pattern: /}/\n      });\n      const Comment = createToken({\n        name: 'Comment',\n        pattern: /#.*/,\n        group: Lexer.SKIPPED // eslint-disable-line no-undef\n\n      }); // commas, blanks, tabs, newlines and carriage returns are whitespace characters wherever they appear outside of string fields\n\n      const WhiteSpace = createToken({\n        name: 'WhiteSpace',\n        pattern: /[ ,\\s]/,\n        group: Lexer.SKIPPED // eslint-disable-line no-undef\n\n      });\n      const tokens = [WhiteSpace, // keywords appear before the Identifier\n      NodeName, DEF, USE, ROUTE, TO, TrueLiteral, FalseLiteral, NullLiteral, // the Identifier must appear after the keywords because all keywords are valid identifiers\n      Version, Identifier, RouteIdentifier, StringLiteral, HexLiteral, NumberLiteral, LSquare, RSquare, LCurly, RCurly, Comment];\n      const tokenVocabulary = {};\n\n      for (let i = 0, l = tokens.length; i < l; i++) {\n        const token = tokens[i];\n        tokenVocabulary[token.name] = token;\n      }\n\n      return {\n        tokens: tokens,\n        tokenVocabulary: tokenVocabulary\n      };\n    }\n\n    function createVisitor(BaseVRMLVisitor) {\n      // the visitor is created dynmaically based on the given base class\n      function VRMLToASTVisitor() {\n        BaseVRMLVisitor.call(this);\n        this.validateVisitor();\n      }\n\n      VRMLToASTVisitor.prototype = Object.assign(Object.create(BaseVRMLVisitor.prototype), {\n        constructor: VRMLToASTVisitor,\n        vrml: function (ctx) {\n          const data = {\n            version: this.visit(ctx.version),\n            nodes: [],\n            routes: []\n          };\n\n          for (let i = 0, l = ctx.node.length; i < l; i++) {\n            const node = ctx.node[i];\n            data.nodes.push(this.visit(node));\n          }\n\n          if (ctx.route) {\n            for (let i = 0, l = ctx.route.length; i < l; i++) {\n              const route = ctx.route[i];\n              data.routes.push(this.visit(route));\n            }\n          }\n\n          return data;\n        },\n        version: function (ctx) {\n          return ctx.Version[0].image;\n        },\n        node: function (ctx) {\n          const data = {\n            name: ctx.NodeName[0].image,\n            fields: []\n          };\n\n          if (ctx.field) {\n            for (let i = 0, l = ctx.field.length; i < l; i++) {\n              const field = ctx.field[i];\n              data.fields.push(this.visit(field));\n            }\n          } // DEF\n\n\n          if (ctx.def) {\n            data.DEF = this.visit(ctx.def[0]);\n          }\n\n          return data;\n        },\n        field: function (ctx) {\n          const data = {\n            name: ctx.Identifier[0].image,\n            type: null,\n            values: null\n          };\n          let result; // SFValue\n\n          if (ctx.singleFieldValue) {\n            result = this.visit(ctx.singleFieldValue[0]);\n          } // MFValue\n\n\n          if (ctx.multiFieldValue) {\n            result = this.visit(ctx.multiFieldValue[0]);\n          }\n\n          data.type = result.type;\n          data.values = result.values;\n          return data;\n        },\n        def: function (ctx) {\n          return (ctx.Identifier || ctx.NodeName)[0].image;\n        },\n        use: function (ctx) {\n          return {\n            USE: (ctx.Identifier || ctx.NodeName)[0].image\n          };\n        },\n        singleFieldValue: function (ctx) {\n          return processField(this, ctx);\n        },\n        multiFieldValue: function (ctx) {\n          return processField(this, ctx);\n        },\n        route: function (ctx) {\n          const data = {\n            FROM: ctx.RouteIdentifier[0].image,\n            TO: ctx.RouteIdentifier[1].image\n          };\n          return data;\n        }\n      });\n\n      function processField(scope, ctx) {\n        const field = {\n          type: null,\n          values: []\n        };\n\n        if (ctx.node) {\n          field.type = 'node';\n\n          for (let i = 0, l = ctx.node.length; i < l; i++) {\n            const node = ctx.node[i];\n            field.values.push(scope.visit(node));\n          }\n        }\n\n        if (ctx.use) {\n          field.type = 'use';\n\n          for (let i = 0, l = ctx.use.length; i < l; i++) {\n            const use = ctx.use[i];\n            field.values.push(scope.visit(use));\n          }\n        }\n\n        if (ctx.StringLiteral) {\n          field.type = 'string';\n\n          for (let i = 0, l = ctx.StringLiteral.length; i < l; i++) {\n            const stringLiteral = ctx.StringLiteral[i];\n            field.values.push(stringLiteral.image.replace(/'|\"/g, ''));\n          }\n        }\n\n        if (ctx.NumberLiteral) {\n          field.type = 'number';\n\n          for (let i = 0, l = ctx.NumberLiteral.length; i < l; i++) {\n            const numberLiteral = ctx.NumberLiteral[i];\n            field.values.push(parseFloat(numberLiteral.image));\n          }\n        }\n\n        if (ctx.HexLiteral) {\n          field.type = 'hex';\n\n          for (let i = 0, l = ctx.HexLiteral.length; i < l; i++) {\n            const hexLiteral = ctx.HexLiteral[i];\n            field.values.push(hexLiteral.image);\n          }\n        }\n\n        if (ctx.TrueLiteral) {\n          field.type = 'boolean';\n\n          for (let i = 0, l = ctx.TrueLiteral.length; i < l; i++) {\n            const trueLiteral = ctx.TrueLiteral[i];\n            if (trueLiteral.image === 'TRUE') field.values.push(true);\n          }\n        }\n\n        if (ctx.FalseLiteral) {\n          field.type = 'boolean';\n\n          for (let i = 0, l = ctx.FalseLiteral.length; i < l; i++) {\n            const falseLiteral = ctx.FalseLiteral[i];\n            if (falseLiteral.image === 'FALSE') field.values.push(false);\n          }\n        }\n\n        if (ctx.NullLiteral) {\n          field.type = 'null';\n          ctx.NullLiteral.forEach(function () {\n            field.values.push(null);\n          });\n        }\n\n        return field;\n      }\n\n      return new VRMLToASTVisitor();\n    }\n\n    function parseTree(tree) {\n      // console.log( JSON.stringify( tree, null, 2 ) );\n      const nodes = tree.nodes;\n      const scene = new Scene(); // first iteration: build nodemap based on DEF statements\n\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        const node = nodes[i];\n        buildNodeMap(node);\n      } // second iteration: build nodes\n\n\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        const node = nodes[i];\n        const object = getNode(node);\n        if (object instanceof Object3D) scene.add(object);\n        if (node.name === 'WorldInfo') scene.userData.worldInfo = object;\n      }\n\n      return scene;\n    }\n\n    function buildNodeMap(node) {\n      if (node.DEF) {\n        nodeMap[node.DEF] = node;\n      }\n\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n\n        if (field.type === 'node') {\n          const fieldValues = field.values;\n\n          for (let j = 0, jl = fieldValues.length; j < jl; j++) {\n            buildNodeMap(fieldValues[j]);\n          }\n        }\n      }\n    }\n\n    function getNode(node) {\n      // handle case where a node refers to a different one\n      if (node.USE) {\n        return resolveUSE(node.USE);\n      }\n\n      if (node.build !== undefined) return node.build;\n      node.build = buildNode(node);\n      return node.build;\n    } // node builder\n\n\n    function buildNode(node) {\n      const nodeName = node.name;\n      let build;\n\n      switch (nodeName) {\n        case 'Group':\n        case 'Transform':\n        case 'Collision':\n          build = buildGroupingNode(node);\n          break;\n\n        case 'Background':\n          build = buildBackgroundNode(node);\n          break;\n\n        case 'Shape':\n          build = buildShapeNode(node);\n          break;\n\n        case 'Appearance':\n          build = buildAppearanceNode(node);\n          break;\n\n        case 'Material':\n          build = buildMaterialNode(node);\n          break;\n\n        case 'ImageTexture':\n          build = buildImageTextureNode(node);\n          break;\n\n        case 'PixelTexture':\n          build = buildPixelTextureNode(node);\n          break;\n\n        case 'TextureTransform':\n          build = buildTextureTransformNode(node);\n          break;\n\n        case 'IndexedFaceSet':\n          build = buildIndexedFaceSetNode(node);\n          break;\n\n        case 'IndexedLineSet':\n          build = buildIndexedLineSetNode(node);\n          break;\n\n        case 'PointSet':\n          build = buildPointSetNode(node);\n          break;\n\n        case 'Box':\n          build = buildBoxNode(node);\n          break;\n\n        case 'Cone':\n          build = buildConeNode(node);\n          break;\n\n        case 'Cylinder':\n          build = buildCylinderNode(node);\n          break;\n\n        case 'Sphere':\n          build = buildSphereNode(node);\n          break;\n\n        case 'ElevationGrid':\n          build = buildElevationGridNode(node);\n          break;\n\n        case 'Extrusion':\n          build = buildExtrusionNode(node);\n          break;\n\n        case 'Color':\n        case 'Coordinate':\n        case 'Normal':\n        case 'TextureCoordinate':\n          build = buildGeometricNode(node);\n          break;\n\n        case 'WorldInfo':\n          build = buildWorldInfoNode(node);\n          break;\n\n        case 'Anchor':\n        case 'Billboard':\n        case 'Inline':\n        case 'LOD':\n        case 'Switch':\n        case 'AudioClip':\n        case 'DirectionalLight':\n        case 'PointLight':\n        case 'Script':\n        case 'Sound':\n        case 'SpotLight':\n        case 'CylinderSensor':\n        case 'PlaneSensor':\n        case 'ProximitySensor':\n        case 'SphereSensor':\n        case 'TimeSensor':\n        case 'TouchSensor':\n        case 'VisibilitySensor':\n        case 'Text':\n        case 'FontStyle':\n        case 'MovieTexture':\n        case 'ColorInterpolator':\n        case 'CoordinateInterpolator':\n        case 'NormalInterpolator':\n        case 'OrientationInterpolator':\n        case 'PositionInterpolator':\n        case 'ScalarInterpolator':\n        case 'Fog':\n        case 'NavigationInfo':\n        case 'Viewpoint':\n          // node not supported yet\n          break;\n\n        default:\n          console.warn('THREE.VRMLLoader: Unknown node:', nodeName);\n          break;\n      }\n\n      if (build !== undefined && node.DEF !== undefined && build.hasOwnProperty('name') === true) {\n        build.name = node.DEF;\n      }\n\n      return build;\n    }\n\n    function buildGroupingNode(node) {\n      const object = new Group(); //\n\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'bboxCenter':\n            // field not supported\n            break;\n\n          case 'bboxSize':\n            // field not supported\n            break;\n\n          case 'center':\n            // field not supported\n            break;\n\n          case 'children':\n            parseFieldChildren(fieldValues, object);\n            break;\n\n          case 'collide':\n            // field not supported\n            break;\n\n          case 'rotation':\n            const axis = new Vector3(fieldValues[0], fieldValues[1], fieldValues[2]);\n            const angle = fieldValues[3];\n            object.quaternion.setFromAxisAngle(axis, angle);\n            break;\n\n          case 'scale':\n            object.scale.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'scaleOrientation':\n            // field not supported\n            break;\n\n          case 'translation':\n            object.position.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'proxy':\n            // field not supported\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return object;\n    }\n\n    function buildBackgroundNode(node) {\n      const group = new Group();\n      let groundAngle, groundColor;\n      let skyAngle, skyColor;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'groundAngle':\n            groundAngle = fieldValues;\n            break;\n\n          case 'groundColor':\n            groundColor = fieldValues;\n            break;\n\n          case 'backUrl':\n            // field not supported\n            break;\n\n          case 'bottomUrl':\n            // field not supported\n            break;\n\n          case 'frontUrl':\n            // field not supported\n            break;\n\n          case 'leftUrl':\n            // field not supported\n            break;\n\n          case 'rightUrl':\n            // field not supported\n            break;\n\n          case 'topUrl':\n            // field not supported\n            break;\n\n          case 'skyAngle':\n            skyAngle = fieldValues;\n            break;\n\n          case 'skyColor':\n            skyColor = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const radius = 10000; // sky\n\n      if (skyColor) {\n        const skyGeometry = new SphereGeometry(radius, 32, 16);\n        const skyMaterial = new MeshBasicMaterial({\n          fog: false,\n          side: BackSide,\n          depthWrite: false,\n          depthTest: false\n        });\n\n        if (skyColor.length > 3) {\n          paintFaces(skyGeometry, radius, skyAngle, toColorArray(skyColor), true);\n          skyMaterial.vertexColors = true;\n        } else {\n          skyMaterial.color.setRGB(skyColor[0], skyColor[1], skyColor[2]);\n        }\n\n        const sky = new Mesh(skyGeometry, skyMaterial);\n        group.add(sky);\n      } // ground\n\n\n      if (groundColor) {\n        if (groundColor.length > 0) {\n          const groundGeometry = new SphereGeometry(radius, 32, 16, 0, 2 * Math.PI, 0.5 * Math.PI, 1.5 * Math.PI);\n          const groundMaterial = new MeshBasicMaterial({\n            fog: false,\n            side: BackSide,\n            vertexColors: true,\n            depthWrite: false,\n            depthTest: false\n          });\n          paintFaces(groundGeometry, radius, groundAngle, toColorArray(groundColor), false);\n          const ground = new Mesh(groundGeometry, groundMaterial);\n          group.add(ground);\n        }\n      } // render background group first\n\n\n      group.renderOrder = -Infinity;\n      return group;\n    }\n\n    function buildShapeNode(node) {\n      const fields = node.fields; // if the appearance field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n\n      let material = new MeshBasicMaterial({\n        color: 0x000000\n      });\n      let geometry;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'appearance':\n            if (fieldValues[0] !== null) {\n              material = getNode(fieldValues[0]);\n            }\n\n            break;\n\n          case 'geometry':\n            if (fieldValues[0] !== null) {\n              geometry = getNode(fieldValues[0]);\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // build 3D object\n\n\n      let object;\n\n      if (geometry && geometry.attributes.position) {\n        const type = geometry._type;\n\n        if (type === 'points') {\n          // points\n          const pointsMaterial = new PointsMaterial({\n            color: 0xffffff\n          });\n\n          if (geometry.attributes.color !== undefined) {\n            pointsMaterial.vertexColors = true;\n          } else {\n            // if the color field is NULL and there is a material defined for the appearance affecting this PointSet, then use the emissiveColor of the material to draw the points\n            if (material.isMeshPhongMaterial) {\n              pointsMaterial.color.copy(material.emissive);\n            }\n          }\n\n          object = new Points(geometry, pointsMaterial);\n        } else if (type === 'line') {\n          // lines\n          const lineMaterial = new LineBasicMaterial({\n            color: 0xffffff\n          });\n\n          if (geometry.attributes.color !== undefined) {\n            lineMaterial.vertexColors = true;\n          } else {\n            // if the color field is NULL and there is a material defined for the appearance affecting this IndexedLineSet, then use the emissiveColor of the material to draw the lines\n            if (material.isMeshPhongMaterial) {\n              lineMaterial.color.copy(material.emissive);\n            }\n          }\n\n          object = new LineSegments(geometry, lineMaterial);\n        } else {\n          // consider meshes\n          // check \"solid\" hint (it's placed in the geometry but affects the material)\n          if (geometry._solid !== undefined) {\n            material.side = geometry._solid ? FrontSide : DoubleSide;\n          } // check for vertex colors\n\n\n          if (geometry.attributes.color !== undefined) {\n            material.vertexColors = true;\n          }\n\n          object = new Mesh(geometry, material);\n        }\n      } else {\n        object = new Object3D(); // if the geometry field is NULL or no vertices are defined the object is not drawn\n\n        object.visible = false;\n      }\n\n      return object;\n    }\n\n    function buildAppearanceNode(node) {\n      let material = new MeshPhongMaterial();\n      let transformData;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'material':\n            if (fieldValues[0] !== null) {\n              const materialData = getNode(fieldValues[0]);\n              if (materialData.diffuseColor) material.color.copy(materialData.diffuseColor);\n              if (materialData.emissiveColor) material.emissive.copy(materialData.emissiveColor);\n              if (materialData.shininess) material.shininess = materialData.shininess;\n              if (materialData.specularColor) material.specular.copy(materialData.specularColor);\n              if (materialData.transparency) material.opacity = 1 - materialData.transparency;\n              if (materialData.transparency > 0) material.transparent = true;\n            } else {\n              // if the material field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n              material = new MeshBasicMaterial({\n                color: 0x000000\n              });\n            }\n\n            break;\n\n          case 'texture':\n            const textureNode = fieldValues[0];\n\n            if (textureNode !== null) {\n              if (textureNode.name === 'ImageTexture' || textureNode.name === 'PixelTexture') {\n                material.map = getNode(textureNode);\n              }\n            }\n\n            break;\n\n          case 'textureTransform':\n            if (fieldValues[0] !== null) {\n              transformData = getNode(fieldValues[0]);\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // only apply texture transform data if a texture was defined\n\n\n      if (material.map) {\n        // respect VRML lighting model\n        if (material.map.__type) {\n          switch (material.map.__type) {\n            case TEXTURE_TYPE.INTENSITY_ALPHA:\n              material.opacity = 1; // ignore transparency\n\n              break;\n\n            case TEXTURE_TYPE.RGB:\n              material.color.set(0xffffff); // ignore material color\n\n              break;\n\n            case TEXTURE_TYPE.RGBA:\n              material.color.set(0xffffff); // ignore material color\n\n              material.opacity = 1; // ignore transparency\n\n              break;\n          }\n\n          delete material.map.__type;\n        } // apply texture transform\n\n\n        if (transformData) {\n          material.map.center.copy(transformData.center);\n          material.map.rotation = transformData.rotation;\n          material.map.repeat.copy(transformData.scale);\n          material.map.offset.copy(transformData.translation);\n        }\n      }\n\n      return material;\n    }\n\n    function buildMaterialNode(node) {\n      const materialData = {};\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'ambientIntensity':\n            // field not supported\n            break;\n\n          case 'diffuseColor':\n            materialData.diffuseColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'emissiveColor':\n            materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'shininess':\n            materialData.shininess = fieldValues[0];\n            break;\n\n          case 'specularColor':\n            materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'transparency':\n            materialData.transparency = fieldValues[0];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return materialData;\n    }\n\n    function parseHexColor(hex, textureType, color) {\n      let value;\n\n      switch (textureType) {\n        case TEXTURE_TYPE.INTENSITY:\n          // Intensity texture: A one-component image specifies one-byte hexadecimal or integer values representing the intensity of the image\n          value = parseInt(hex);\n          color.r = value;\n          color.g = value;\n          color.b = value;\n          color.a = 1;\n          break;\n\n        case TEXTURE_TYPE.INTENSITY_ALPHA:\n          // Intensity+Alpha texture: A two-component image specifies the intensity in the first (high) byte and the alpha opacity in the second (low) byte.\n          value = parseInt('0x' + hex.substring(2, 4));\n          color.r = value;\n          color.g = value;\n          color.b = value;\n          color.a = parseInt('0x' + hex.substring(4, 6));\n          break;\n\n        case TEXTURE_TYPE.RGB:\n          // RGB texture: Pixels in a three-component image specify the red component in the first (high) byte, followed by the green and blue components\n          color.r = parseInt('0x' + hex.substring(2, 4));\n          color.g = parseInt('0x' + hex.substring(4, 6));\n          color.b = parseInt('0x' + hex.substring(6, 8));\n          color.a = 1;\n          break;\n\n        case TEXTURE_TYPE.RGBA:\n          // RGBA texture: Four-component images specify the alpha opacity byte after red/green/blue\n          color.r = parseInt('0x' + hex.substring(2, 4));\n          color.g = parseInt('0x' + hex.substring(4, 6));\n          color.b = parseInt('0x' + hex.substring(6, 8));\n          color.a = parseInt('0x' + hex.substring(8, 10));\n          break;\n      }\n    }\n\n    function getTextureType(num_components) {\n      let type;\n\n      switch (num_components) {\n        case 1:\n          type = TEXTURE_TYPE.INTENSITY;\n          break;\n\n        case 2:\n          type = TEXTURE_TYPE.INTENSITY_ALPHA;\n          break;\n\n        case 3:\n          type = TEXTURE_TYPE.RGB;\n          break;\n\n        case 4:\n          type = TEXTURE_TYPE.RGBA;\n          break;\n      }\n\n      return type;\n    }\n\n    function buildPixelTextureNode(node) {\n      let texture;\n      let wrapS = RepeatWrapping;\n      let wrapT = RepeatWrapping;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'image':\n            const width = fieldValues[0];\n            const height = fieldValues[1];\n            const num_components = fieldValues[2];\n            const textureType = getTextureType(num_components);\n            const data = new Uint8Array(4 * width * height);\n            const color = {\n              r: 0,\n              g: 0,\n              b: 0,\n              a: 0\n            };\n\n            for (let j = 3, k = 0, jl = fieldValues.length; j < jl; j++, k++) {\n              parseHexColor(fieldValues[j], textureType, color);\n              const stride = k * 4;\n              data[stride + 0] = color.r;\n              data[stride + 1] = color.g;\n              data[stride + 2] = color.b;\n              data[stride + 3] = color.a;\n            }\n\n            texture = new DataTexture(data, width, height);\n            texture.needsUpdate = true;\n            texture.__type = textureType; // needed for material modifications\n\n            break;\n\n          case 'repeatS':\n            if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n            break;\n\n          case 'repeatT':\n            if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      if (texture) {\n        texture.wrapS = wrapS;\n        texture.wrapT = wrapT;\n      }\n\n      return texture;\n    }\n\n    function buildImageTextureNode(node) {\n      let texture;\n      let wrapS = RepeatWrapping;\n      let wrapT = RepeatWrapping;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'url':\n            const url = fieldValues[0];\n            if (url) texture = textureLoader.load(url);\n            break;\n\n          case 'repeatS':\n            if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n            break;\n\n          case 'repeatT':\n            if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      if (texture) {\n        texture.wrapS = wrapS;\n        texture.wrapT = wrapT;\n      }\n\n      return texture;\n    }\n\n    function buildTextureTransformNode(node) {\n      const transformData = {\n        center: new Vector2(),\n        rotation: new Vector2(),\n        scale: new Vector2(),\n        translation: new Vector2()\n      };\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'center':\n            transformData.center.set(fieldValues[0], fieldValues[1]);\n            break;\n\n          case 'rotation':\n            transformData.rotation = fieldValues[0];\n            break;\n\n          case 'scale':\n            transformData.scale.set(fieldValues[0], fieldValues[1]);\n            break;\n\n          case 'translation':\n            transformData.translation.set(fieldValues[0], fieldValues[1]);\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return transformData;\n    }\n\n    function buildGeometricNode(node) {\n      return node.fields[0].values;\n    }\n\n    function buildWorldInfoNode(node) {\n      const worldInfo = {};\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'title':\n            worldInfo.title = fieldValues[0];\n            break;\n\n          case 'info':\n            worldInfo.info = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return worldInfo;\n    }\n\n    function buildIndexedFaceSetNode(node) {\n      let color, coord, normal, texCoord;\n      let ccw = true,\n          solid = true,\n          creaseAngle = 0;\n      let colorIndex, coordIndex, normalIndex, texCoordIndex;\n      let colorPerVertex = true,\n          normalPerVertex = true;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'coord':\n            const coordNode = fieldValues[0];\n\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n\n            break;\n\n          case 'normal':\n            const normalNode = fieldValues[0];\n\n            if (normalNode !== null) {\n              normal = getNode(normalNode);\n            }\n\n            break;\n\n          case 'texCoord':\n            const texCoordNode = fieldValues[0];\n\n            if (texCoordNode !== null) {\n              texCoord = getNode(texCoordNode);\n            }\n\n            break;\n\n          case 'ccw':\n            ccw = fieldValues[0];\n            break;\n\n          case 'colorIndex':\n            colorIndex = fieldValues;\n            break;\n\n          case 'colorPerVertex':\n            colorPerVertex = fieldValues[0];\n            break;\n\n          case 'convex':\n            // field not supported\n            break;\n\n          case 'coordIndex':\n            coordIndex = fieldValues;\n            break;\n\n          case 'creaseAngle':\n            creaseAngle = fieldValues[0];\n            break;\n\n          case 'normalIndex':\n            normalIndex = fieldValues;\n            break;\n\n          case 'normalPerVertex':\n            normalPerVertex = fieldValues[0];\n            break;\n\n          case 'solid':\n            solid = fieldValues[0];\n            break;\n\n          case 'texCoordIndex':\n            texCoordIndex = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      if (coordIndex === undefined) {\n        console.warn('THREE.VRMLLoader: Missing coordIndex.');\n        return new BufferGeometry(); // handle VRML files with incomplete geometry definition\n      }\n\n      const triangulatedCoordIndex = triangulateFaceIndex(coordIndex, ccw);\n      let colorAttribute;\n      let normalAttribute;\n      let uvAttribute;\n\n      if (color) {\n        if (colorPerVertex === true) {\n          if (colorIndex && colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then it is used to choose colors for each vertex of the IndexedFaceSet.\n            const triangulatedColorIndex = triangulateFaceIndex(colorIndex, ccw);\n            colorAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedColorIndex, color, 3);\n          } else {\n            // if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n            colorAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(color, 3));\n          }\n        } else {\n          if (colorIndex && colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then they are used to choose one color for each face of the IndexedFaceSet\n            const flattenFaceColors = flattenData(color, colorIndex);\n            const triangulatedFaceColors = triangulateFaceData(flattenFaceColors, coordIndex);\n            colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n          } else {\n            // if the colorIndex field is empty, then the color are applied to each face of the IndexedFaceSet in order\n            const triangulatedFaceColors = triangulateFaceData(color, coordIndex);\n            colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n          }\n        }\n      }\n\n      if (normal) {\n        if (normalPerVertex === true) {\n          // consider vertex normals\n          if (normalIndex && normalIndex.length > 0) {\n            // if the normalIndex field is not empty, then it is used to choose normals for each vertex of the IndexedFaceSet.\n            const triangulatedNormalIndex = triangulateFaceIndex(normalIndex, ccw);\n            normalAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedNormalIndex, normal, 3);\n          } else {\n            // if the normalIndex field is empty, then the coordIndex field is used to choose normals from the Normal node\n            normalAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(normal, 3));\n          }\n        } else {\n          // consider face normals\n          if (normalIndex && normalIndex.length > 0) {\n            // if the normalIndex field is not empty, then they are used to choose one normal for each face of the IndexedFaceSet\n            const flattenFaceNormals = flattenData(normal, normalIndex);\n            const triangulatedFaceNormals = triangulateFaceData(flattenFaceNormals, coordIndex);\n            normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n          } else {\n            // if the normalIndex field is empty, then the normals are applied to each face of the IndexedFaceSet in order\n            const triangulatedFaceNormals = triangulateFaceData(normal, coordIndex);\n            normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n          }\n        }\n      } else {\n        // if the normal field is NULL, then the loader should automatically generate normals, using creaseAngle to determine if and how normals are smoothed across shared vertices\n        normalAttribute = computeNormalAttribute(triangulatedCoordIndex, coord, creaseAngle);\n      }\n\n      if (texCoord) {\n        // texture coordinates are always defined on vertex level\n        if (texCoordIndex && texCoordIndex.length > 0) {\n          // if the texCoordIndex field is not empty, then it is used to choose texture coordinates for each vertex of the IndexedFaceSet.\n          const triangulatedTexCoordIndex = triangulateFaceIndex(texCoordIndex, ccw);\n          uvAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedTexCoordIndex, texCoord, 2);\n        } else {\n          // if the texCoordIndex field is empty, then the coordIndex array is used to choose texture coordinates from the TextureCoordinate node\n          uvAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(texCoord, 2));\n        }\n      }\n\n      const geometry = new BufferGeometry();\n      const positionAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(coord, 3));\n      geometry.setAttribute('position', positionAttribute);\n      geometry.setAttribute('normal', normalAttribute); // optional attributes\n\n      if (colorAttribute) geometry.setAttribute('color', colorAttribute);\n      if (uvAttribute) geometry.setAttribute('uv', uvAttribute); // \"solid\" influences the material so let's store it for later use\n\n      geometry._solid = solid;\n      geometry._type = 'mesh';\n      return geometry;\n    }\n\n    function buildIndexedLineSetNode(node) {\n      let color, coord;\n      let colorIndex, coordIndex;\n      let colorPerVertex = true;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'coord':\n            const coordNode = fieldValues[0];\n\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n\n            break;\n\n          case 'colorIndex':\n            colorIndex = fieldValues;\n            break;\n\n          case 'colorPerVertex':\n            colorPerVertex = fieldValues[0];\n            break;\n\n          case 'coordIndex':\n            coordIndex = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // build lines\n\n\n      let colorAttribute;\n      const expandedLineIndex = expandLineIndex(coordIndex); // create an index for three.js's linesegment primitive\n\n      if (color) {\n        if (colorPerVertex === true) {\n          if (colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then one color is used for each polyline of the IndexedLineSet.\n            const expandedColorIndex = expandLineIndex(colorIndex); // compute colors for each line segment (rendering primitve)\n\n            colorAttribute = computeAttributeFromIndexedData(expandedLineIndex, expandedColorIndex, color, 3); // compute data on vertex level\n          } else {\n            // if the colorIndex field is empty, then the colors are applied to each polyline of the IndexedLineSet in order.\n            colorAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(color, 3));\n          }\n        } else {\n          if (colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then colors are applied to each vertex of the IndexedLineSet\n            const flattenLineColors = flattenData(color, colorIndex); // compute colors for each VRML primitve\n\n            const expandedLineColors = expandLineData(flattenLineColors, coordIndex); // compute colors for each line segment (rendering primitve)\n\n            colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors); // compute data on vertex level\n          } else {\n            // if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n            const expandedLineColors = expandLineData(color, coordIndex); // compute colors for each line segment (rendering primitve)\n\n            colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors); // compute data on vertex level\n          }\n        }\n      } //\n\n\n      const geometry = new BufferGeometry();\n      const positionAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(coord, 3));\n      geometry.setAttribute('position', positionAttribute);\n      if (colorAttribute) geometry.setAttribute('color', colorAttribute);\n      geometry._type = 'line';\n      return geometry;\n    }\n\n    function buildPointSetNode(node) {\n      let color, coord;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'coord':\n            const coordNode = fieldValues[0];\n\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(coord, 3));\n      if (color) geometry.setAttribute('color', new Float32BufferAttribute(color, 3));\n      geometry._type = 'points';\n      return geometry;\n    }\n\n    function buildBoxNode(node) {\n      const size = new Vector3(2, 2, 2);\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'size':\n            size.x = fieldValues[0];\n            size.y = fieldValues[1];\n            size.z = fieldValues[2];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new BoxGeometry(size.x, size.y, size.z);\n      return geometry;\n    }\n\n    function buildConeNode(node) {\n      let radius = 1,\n          height = 2,\n          openEnded = false;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'bottom':\n            openEnded = !fieldValues[0];\n            break;\n\n          case 'bottomRadius':\n            radius = fieldValues[0];\n            break;\n\n          case 'height':\n            height = fieldValues[0];\n            break;\n\n          case 'side':\n            // field not supported\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new ConeGeometry(radius, height, 16, 1, openEnded);\n      return geometry;\n    }\n\n    function buildCylinderNode(node) {\n      let radius = 1,\n          height = 2;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'bottom':\n            // field not supported\n            break;\n\n          case 'radius':\n            radius = fieldValues[0];\n            break;\n\n          case 'height':\n            height = fieldValues[0];\n            break;\n\n          case 'side':\n            // field not supported\n            break;\n\n          case 'top':\n            // field not supported\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new CylinderGeometry(radius, radius, height, 16, 1);\n      return geometry;\n    }\n\n    function buildSphereNode(node) {\n      let radius = 1;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'radius':\n            radius = fieldValues[0];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new SphereGeometry(radius, 16, 16);\n      return geometry;\n    }\n\n    function buildElevationGridNode(node) {\n      let color;\n      let normal;\n      let texCoord;\n      let height;\n      let colorPerVertex = true;\n      let normalPerVertex = true;\n      let solid = true;\n      let ccw = true;\n      let creaseAngle = 0;\n      let xDimension = 2;\n      let zDimension = 2;\n      let xSpacing = 1;\n      let zSpacing = 1;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'normal':\n            const normalNode = fieldValues[0];\n\n            if (normalNode !== null) {\n              normal = getNode(normalNode);\n            }\n\n            break;\n\n          case 'texCoord':\n            const texCoordNode = fieldValues[0];\n\n            if (texCoordNode !== null) {\n              texCoord = getNode(texCoordNode);\n            }\n\n            break;\n\n          case 'height':\n            height = fieldValues;\n            break;\n\n          case 'ccw':\n            ccw = fieldValues[0];\n            break;\n\n          case 'colorPerVertex':\n            colorPerVertex = fieldValues[0];\n            break;\n\n          case 'creaseAngle':\n            creaseAngle = fieldValues[0];\n            break;\n\n          case 'normalPerVertex':\n            normalPerVertex = fieldValues[0];\n            break;\n\n          case 'solid':\n            solid = fieldValues[0];\n            break;\n\n          case 'xDimension':\n            xDimension = fieldValues[0];\n            break;\n\n          case 'xSpacing':\n            xSpacing = fieldValues[0];\n            break;\n\n          case 'zDimension':\n            zDimension = fieldValues[0];\n            break;\n\n          case 'zSpacing':\n            zSpacing = fieldValues[0];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // vertex data\n\n\n      const vertices = [];\n      const normals = [];\n      const colors = [];\n      const uvs = [];\n\n      for (let i = 0; i < zDimension; i++) {\n        for (let j = 0; j < xDimension; j++) {\n          // compute a row major index\n          const index = i * xDimension + j; // vertices\n\n          const x = xSpacing * i;\n          const y = height[index];\n          const z = zSpacing * j;\n          vertices.push(x, y, z); // colors\n\n          if (color && colorPerVertex === true) {\n            const r = color[index * 3 + 0];\n            const g = color[index * 3 + 1];\n            const b = color[index * 3 + 2];\n            colors.push(r, g, b);\n          } // normals\n\n\n          if (normal && normalPerVertex === true) {\n            const xn = normal[index * 3 + 0];\n            const yn = normal[index * 3 + 1];\n            const zn = normal[index * 3 + 2];\n            normals.push(xn, yn, zn);\n          } // uvs\n\n\n          if (texCoord) {\n            const s = texCoord[index * 2 + 0];\n            const t = texCoord[index * 2 + 1];\n            uvs.push(s, t);\n          } else {\n            uvs.push(i / (xDimension - 1), j / (zDimension - 1));\n          }\n        }\n      } // indices\n\n\n      const indices = [];\n\n      for (let i = 0; i < xDimension - 1; i++) {\n        for (let j = 0; j < zDimension - 1; j++) {\n          // from https://tecfa.unige.ch/guides/vrml/vrml97/spec/part1/nodesRef.html#ElevationGrid\n          const a = i + j * xDimension;\n          const b = i + (j + 1) * xDimension;\n          const c = i + 1 + (j + 1) * xDimension;\n          const d = i + 1 + j * xDimension; // faces\n\n          if (ccw === true) {\n            indices.push(a, c, b);\n            indices.push(c, a, d);\n          } else {\n            indices.push(a, b, c);\n            indices.push(c, d, a);\n          }\n        }\n      } //\n\n\n      const positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n      const uvAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(uvs, 2));\n      let colorAttribute;\n      let normalAttribute; // color attribute\n\n      if (color) {\n        if (colorPerVertex === false) {\n          for (let i = 0; i < xDimension - 1; i++) {\n            for (let j = 0; j < zDimension - 1; j++) {\n              const index = i + j * (xDimension - 1);\n              const r = color[index * 3 + 0];\n              const g = color[index * 3 + 1];\n              const b = color[index * 3 + 2]; // one color per quad\n\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n            }\n          }\n\n          colorAttribute = new Float32BufferAttribute(colors, 3);\n        } else {\n          colorAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(colors, 3));\n        }\n      } // normal attribute\n\n\n      if (normal) {\n        if (normalPerVertex === false) {\n          for (let i = 0; i < xDimension - 1; i++) {\n            for (let j = 0; j < zDimension - 1; j++) {\n              const index = i + j * (xDimension - 1);\n              const xn = normal[index * 3 + 0];\n              const yn = normal[index * 3 + 1];\n              const zn = normal[index * 3 + 2]; // one normal per quad\n\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n            }\n          }\n\n          normalAttribute = new Float32BufferAttribute(normals, 3);\n        } else {\n          normalAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(normals, 3));\n        }\n      } else {\n        normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n      } // build geometry\n\n\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', positionAttribute);\n      geometry.setAttribute('normal', normalAttribute);\n      geometry.setAttribute('uv', uvAttribute);\n      if (colorAttribute) geometry.setAttribute('color', colorAttribute); // \"solid\" influences the material so let's store it for later use\n\n      geometry._solid = solid;\n      geometry._type = 'mesh';\n      return geometry;\n    }\n\n    function buildExtrusionNode(node) {\n      let crossSection = [1, 1, 1, -1, -1, -1, -1, 1, 1, 1];\n      let spine = [0, 0, 0, 0, 1, 0];\n      let scale;\n      let orientation;\n      let beginCap = true;\n      let ccw = true;\n      let creaseAngle = 0;\n      let endCap = true;\n      let solid = true;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'beginCap':\n            beginCap = fieldValues[0];\n            break;\n\n          case 'ccw':\n            ccw = fieldValues[0];\n            break;\n\n          case 'convex':\n            // field not supported\n            break;\n\n          case 'creaseAngle':\n            creaseAngle = fieldValues[0];\n            break;\n\n          case 'crossSection':\n            crossSection = fieldValues;\n            break;\n\n          case 'endCap':\n            endCap = fieldValues[0];\n            break;\n\n          case 'orientation':\n            orientation = fieldValues;\n            break;\n\n          case 'scale':\n            scale = fieldValues;\n            break;\n\n          case 'solid':\n            solid = fieldValues[0];\n            break;\n\n          case 'spine':\n            spine = fieldValues; // only extrusion along the Y-axis are supported so far\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const crossSectionClosed = crossSection[0] === crossSection[crossSection.length - 2] && crossSection[1] === crossSection[crossSection.length - 1]; // vertices\n\n      const vertices = [];\n      const spineVector = new Vector3();\n      const scaling = new Vector3();\n      const axis = new Vector3();\n      const vertex = new Vector3();\n      const quaternion = new Quaternion();\n\n      for (let i = 0, j = 0, o = 0, il = spine.length; i < il; i += 3, j += 2, o += 4) {\n        spineVector.fromArray(spine, i);\n        scaling.x = scale ? scale[j + 0] : 1;\n        scaling.y = 1;\n        scaling.z = scale ? scale[j + 1] : 1;\n        axis.x = orientation ? orientation[o + 0] : 0;\n        axis.y = orientation ? orientation[o + 1] : 0;\n        axis.z = orientation ? orientation[o + 2] : 1;\n        const angle = orientation ? orientation[o + 3] : 0;\n\n        for (let k = 0, kl = crossSection.length; k < kl; k += 2) {\n          vertex.x = crossSection[k + 0];\n          vertex.y = 0;\n          vertex.z = crossSection[k + 1]; // scale\n\n          vertex.multiply(scaling); // rotate\n\n          quaternion.setFromAxisAngle(axis, angle);\n          vertex.applyQuaternion(quaternion); // translate\n\n          vertex.add(spineVector);\n          vertices.push(vertex.x, vertex.y, vertex.z);\n        }\n      } // indices\n\n\n      const indices = [];\n      const spineCount = spine.length / 3;\n      const crossSectionCount = crossSection.length / 2;\n\n      for (let i = 0; i < spineCount - 1; i++) {\n        for (let j = 0; j < crossSectionCount - 1; j++) {\n          const a = j + i * crossSectionCount;\n          let b = j + 1 + i * crossSectionCount;\n          const c = j + (i + 1) * crossSectionCount;\n          let d = j + 1 + (i + 1) * crossSectionCount;\n\n          if (j === crossSectionCount - 2 && crossSectionClosed === true) {\n            b = i * crossSectionCount;\n            d = (i + 1) * crossSectionCount;\n          }\n\n          if (ccw === true) {\n            indices.push(a, b, c);\n            indices.push(c, b, d);\n          } else {\n            indices.push(a, c, b);\n            indices.push(c, d, b);\n          }\n        }\n      } // triangulate cap\n\n\n      if (beginCap === true || endCap === true) {\n        const contour = [];\n\n        for (let i = 0, l = crossSection.length; i < l; i += 2) {\n          contour.push(new Vector2(crossSection[i], crossSection[i + 1]));\n        }\n\n        const faces = ShapeUtils.triangulateShape(contour, []);\n        const capIndices = [];\n\n        for (let i = 0, l = faces.length; i < l; i++) {\n          const face = faces[i];\n          capIndices.push(face[0], face[1], face[2]);\n        } // begin cap\n\n\n        if (beginCap === true) {\n          for (let i = 0, l = capIndices.length; i < l; i += 3) {\n            if (ccw === true) {\n              indices.push(capIndices[i + 0], capIndices[i + 1], capIndices[i + 2]);\n            } else {\n              indices.push(capIndices[i + 0], capIndices[i + 2], capIndices[i + 1]);\n            }\n          }\n        } // end cap\n\n\n        if (endCap === true) {\n          const indexOffset = crossSectionCount * (spineCount - 1); // references to the first vertex of the last cross section\n\n          for (let i = 0, l = capIndices.length; i < l; i += 3) {\n            if (ccw === true) {\n              indices.push(indexOffset + capIndices[i + 0], indexOffset + capIndices[i + 2], indexOffset + capIndices[i + 1]);\n            } else {\n              indices.push(indexOffset + capIndices[i + 0], indexOffset + capIndices[i + 1], indexOffset + capIndices[i + 2]);\n            }\n          }\n        }\n      }\n\n      const positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n      const normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', positionAttribute);\n      geometry.setAttribute('normal', normalAttribute); // no uvs yet\n      // \"solid\" influences the material so let's store it for later use\n\n      geometry._solid = solid;\n      geometry._type = 'mesh';\n      return geometry;\n    } // helper functions\n\n\n    function resolveUSE(identifier) {\n      const node = nodeMap[identifier];\n      const build = getNode(node); // because the same 3D objects can have different transformations, it's necessary to clone them.\n      // materials can be influenced by the geometry (e.g. vertex normals). cloning is necessary to avoid\n      // any side effects\n\n      return build.isObject3D || build.isMaterial ? build.clone() : build;\n    }\n\n    function parseFieldChildren(children, owner) {\n      for (let i = 0, l = children.length; i < l; i++) {\n        const object = getNode(children[i]);\n        if (object instanceof Object3D) owner.add(object);\n      }\n    }\n\n    function triangulateFaceIndex(index, ccw) {\n      const indices = []; // since face defintions can have more than three vertices, it's necessary to\n      // perform a simple triangulation\n\n      let start = 0;\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[start];\n        const i2 = index[i + (ccw ? 1 : 2)];\n        const i3 = index[i + (ccw ? 2 : 1)];\n        indices.push(i1, i2, i3); // an index of -1 indicates that the current face has ended and the next one begins\n\n        if (index[i + 3] === -1 || i + 3 >= l) {\n          i += 3;\n          start = i + 1;\n        }\n      }\n\n      return indices;\n    }\n\n    function triangulateFaceData(data, index) {\n      const triangulatedData = [];\n      let start = 0;\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const stride = start * 3;\n        const x = data[stride];\n        const y = data[stride + 1];\n        const z = data[stride + 2];\n        triangulatedData.push(x, y, z); // an index of -1 indicates that the current face has ended and the next one begins\n\n        if (index[i + 3] === -1 || i + 3 >= l) {\n          i += 3;\n          start++;\n        }\n      }\n\n      return triangulatedData;\n    }\n\n    function flattenData(data, index) {\n      const flattenData = [];\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[i];\n        const stride = i1 * 3;\n        const x = data[stride];\n        const y = data[stride + 1];\n        const z = data[stride + 2];\n        flattenData.push(x, y, z);\n      }\n\n      return flattenData;\n    }\n\n    function expandLineIndex(index) {\n      const indices = [];\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[i];\n        const i2 = index[i + 1];\n        indices.push(i1, i2); // an index of -1 indicates that the current line has ended and the next one begins\n\n        if (index[i + 2] === -1 || i + 2 >= l) {\n          i += 2;\n        }\n      }\n\n      return indices;\n    }\n\n    function expandLineData(data, index) {\n      const triangulatedData = [];\n      let start = 0;\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const stride = start * 3;\n        const x = data[stride];\n        const y = data[stride + 1];\n        const z = data[stride + 2];\n        triangulatedData.push(x, y, z); // an index of -1 indicates that the current line has ended and the next one begins\n\n        if (index[i + 2] === -1 || i + 2 >= l) {\n          i += 2;\n          start++;\n        }\n      }\n\n      return triangulatedData;\n    }\n\n    const vA = new Vector3();\n    const vB = new Vector3();\n    const vC = new Vector3();\n    const uvA = new Vector2();\n    const uvB = new Vector2();\n    const uvC = new Vector2();\n\n    function computeAttributeFromIndexedData(coordIndex, index, data, itemSize) {\n      const array = []; // we use the coordIndex.length as delimiter since normalIndex must contain at least as many indices\n\n      for (let i = 0, l = coordIndex.length; i < l; i += 3) {\n        const a = index[i];\n        const b = index[i + 1];\n        const c = index[i + 2];\n\n        if (itemSize === 2) {\n          uvA.fromArray(data, a * itemSize);\n          uvB.fromArray(data, b * itemSize);\n          uvC.fromArray(data, c * itemSize);\n          array.push(uvA.x, uvA.y);\n          array.push(uvB.x, uvB.y);\n          array.push(uvC.x, uvC.y);\n        } else {\n          vA.fromArray(data, a * itemSize);\n          vB.fromArray(data, b * itemSize);\n          vC.fromArray(data, c * itemSize);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vB.x, vB.y, vB.z);\n          array.push(vC.x, vC.y, vC.z);\n        }\n      }\n\n      return new Float32BufferAttribute(array, itemSize);\n    }\n\n    function computeAttributeFromFaceData(index, faceData) {\n      const array = [];\n\n      for (let i = 0, j = 0, l = index.length; i < l; i += 3, j++) {\n        vA.fromArray(faceData, j * 3);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n      }\n\n      return new Float32BufferAttribute(array, 3);\n    }\n\n    function computeAttributeFromLineData(index, lineData) {\n      const array = [];\n\n      for (let i = 0, j = 0, l = index.length; i < l; i += 2, j++) {\n        vA.fromArray(lineData, j * 3);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n      }\n\n      return new Float32BufferAttribute(array, 3);\n    }\n\n    function toNonIndexedAttribute(indices, attribute) {\n      const array = attribute.array;\n      const itemSize = attribute.itemSize;\n      const array2 = new array.constructor(indices.length * itemSize);\n      let index = 0,\n          index2 = 0;\n\n      for (let i = 0, l = indices.length; i < l; i++) {\n        index = indices[i] * itemSize;\n\n        for (let j = 0; j < itemSize; j++) {\n          array2[index2++] = array[index++];\n        }\n      }\n\n      return new Float32BufferAttribute(array2, itemSize);\n    }\n\n    const ab = new Vector3();\n    const cb = new Vector3();\n\n    function computeNormalAttribute(index, coord, creaseAngle) {\n      const faces = [];\n      const vertexNormals = {}; // prepare face and raw vertex normals\n\n      for (let i = 0, l = index.length; i < l; i += 3) {\n        const a = index[i];\n        const b = index[i + 1];\n        const c = index[i + 2];\n        const face = new Face(a, b, c);\n        vA.fromArray(coord, a * 3);\n        vB.fromArray(coord, b * 3);\n        vC.fromArray(coord, c * 3);\n        cb.subVectors(vC, vB);\n        ab.subVectors(vA, vB);\n        cb.cross(ab);\n        cb.normalize();\n        face.normal.copy(cb);\n        if (vertexNormals[a] === undefined) vertexNormals[a] = [];\n        if (vertexNormals[b] === undefined) vertexNormals[b] = [];\n        if (vertexNormals[c] === undefined) vertexNormals[c] = [];\n        vertexNormals[a].push(face.normal);\n        vertexNormals[b].push(face.normal);\n        vertexNormals[c].push(face.normal);\n        faces.push(face);\n      } // compute vertex normals and build final geometry\n\n\n      const normals = [];\n\n      for (let i = 0, l = faces.length; i < l; i++) {\n        const face = faces[i];\n        const nA = weightedNormal(vertexNormals[face.a], face.normal, creaseAngle);\n        const nB = weightedNormal(vertexNormals[face.b], face.normal, creaseAngle);\n        const nC = weightedNormal(vertexNormals[face.c], face.normal, creaseAngle);\n        vA.fromArray(coord, face.a * 3);\n        vB.fromArray(coord, face.b * 3);\n        vC.fromArray(coord, face.c * 3);\n        normals.push(nA.x, nA.y, nA.z);\n        normals.push(nB.x, nB.y, nB.z);\n        normals.push(nC.x, nC.y, nC.z);\n      }\n\n      return new Float32BufferAttribute(normals, 3);\n    }\n\n    function weightedNormal(normals, vector, creaseAngle) {\n      const normal = new Vector3();\n\n      if (creaseAngle === 0) {\n        normal.copy(vector);\n      } else {\n        for (let i = 0, l = normals.length; i < l; i++) {\n          if (normals[i].angleTo(vector) < creaseAngle) {\n            normal.add(normals[i]);\n          }\n        }\n      }\n\n      return normal.normalize();\n    }\n\n    function toColorArray(colors) {\n      const array = [];\n\n      for (let i = 0, l = colors.length; i < l; i += 3) {\n        array.push(new Color(colors[i], colors[i + 1], colors[i + 2]));\n      }\n\n      return array;\n    }\n    /**\n     * Vertically paints the faces interpolating between the\n     * specified colors at the specified angels. This is used for the Background\n     * node, but could be applied to other nodes with multiple faces as well.\n     *\n     * When used with the Background node, default is directionIsDown is true if\n     * interpolating the skyColor down from the Zenith. When interpolationg up from\n     * the Nadir i.e. interpolating the groundColor, the directionIsDown is false.\n     *\n     * The first angle is never specified, it is the Zenith (0 rad). Angles are specified\n     * in radians. The geometry is thought a sphere, but could be anything. The color interpolation\n     * is linear along the Y axis in any case.\n     *\n     * You must specify one more color than you have angles at the beginning of the colors array.\n     * This is the color of the Zenith (the top of the shape).\n     *\n     * @param {BufferGeometry} geometry\n     * @param {number} radius\n     * @param {array} angles\n     * @param {array} colors\n     * @param {boolean} topDown - Whether to work top down or bottom up.\n     */\n\n\n    function paintFaces(geometry, radius, angles, colors, topDown) {\n      // compute threshold values\n      const thresholds = [];\n      const startAngle = topDown === true ? 0 : Math.PI;\n\n      for (let i = 0, l = colors.length; i < l; i++) {\n        let angle = i === 0 ? 0 : angles[i - 1];\n        angle = topDown === true ? angle : startAngle - angle;\n        const point = new Vector3();\n        point.setFromSphericalCoords(radius, angle, 0);\n        thresholds.push(point);\n      } // generate vertex colors\n\n\n      const indices = geometry.index;\n      const positionAttribute = geometry.attributes.position;\n      const colorAttribute = new BufferAttribute(new Float32Array(geometry.attributes.position.count * 3), 3);\n      const position = new Vector3();\n      const color = new Color();\n\n      for (let i = 0; i < indices.count; i++) {\n        const index = indices.getX(i);\n        position.fromBufferAttribute(positionAttribute, index);\n        let thresholdIndexA, thresholdIndexB;\n        let t = 1;\n\n        for (let j = 1; j < thresholds.length; j++) {\n          thresholdIndexA = j - 1;\n          thresholdIndexB = j;\n          const thresholdA = thresholds[thresholdIndexA];\n          const thresholdB = thresholds[thresholdIndexB];\n\n          if (topDown === true) {\n            // interpolation for sky color\n            if (position.y <= thresholdA.y && position.y > thresholdB.y) {\n              t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n              break;\n            }\n          } else {\n            // interpolation for ground color\n            if (position.y >= thresholdA.y && position.y < thresholdB.y) {\n              t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n              break;\n            }\n          }\n        }\n\n        const colorA = colors[thresholdIndexA];\n        const colorB = colors[thresholdIndexB];\n        color.copy(colorA).lerp(colorB, t);\n        colorAttribute.setXYZ(index, color.r, color.g, color.b);\n      }\n\n      geometry.setAttribute('color', colorAttribute);\n    } //\n\n\n    const textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin); // check version (only 2.0 is supported)\n\n    if (data.indexOf('#VRML V2.0') === -1) {\n      throw Error('THREE.VRMLLexer: Version of VRML asset not supported.');\n    } // create JSON representing the tree structure of the VRML asset\n\n\n    const tree = generateVRMLTree(data); // parse the tree structure to a three.js scene\n\n    const scene = parseTree(tree);\n    return scene;\n  }\n\n}\n\nclass VRMLLexer {\n  constructor(tokens) {\n    this.lexer = new Lexer(tokens); // eslint-disable-line no-undef\n  }\n\n  lex(inputText) {\n    const lexingResult = this.lexer.tokenize(inputText);\n\n    if (lexingResult.errors.length > 0) {\n      console.error(lexingResult.errors);\n      throw Error('THREE.VRMLLexer: Lexing errors detected.');\n    }\n\n    return lexingResult;\n  }\n\n}\n\nclass VRMLParser extends CstParser {\n  constructor(tokenVocabulary) {\n    super(tokenVocabulary);\n    const $ = this;\n    const Version = tokenVocabulary['Version'];\n    const LCurly = tokenVocabulary['LCurly'];\n    const RCurly = tokenVocabulary['RCurly'];\n    const LSquare = tokenVocabulary['LSquare'];\n    const RSquare = tokenVocabulary['RSquare'];\n    const Identifier = tokenVocabulary['Identifier'];\n    const RouteIdentifier = tokenVocabulary['RouteIdentifier'];\n    const StringLiteral = tokenVocabulary['StringLiteral'];\n    const HexLiteral = tokenVocabulary['HexLiteral'];\n    const NumberLiteral = tokenVocabulary['NumberLiteral'];\n    const TrueLiteral = tokenVocabulary['TrueLiteral'];\n    const FalseLiteral = tokenVocabulary['FalseLiteral'];\n    const NullLiteral = tokenVocabulary['NullLiteral'];\n    const DEF = tokenVocabulary['DEF'];\n    const USE = tokenVocabulary['USE'];\n    const ROUTE = tokenVocabulary['ROUTE'];\n    const TO = tokenVocabulary['TO'];\n    const NodeName = tokenVocabulary['NodeName'];\n    $.RULE('vrml', function () {\n      $.SUBRULE($.version);\n      $.AT_LEAST_ONE(function () {\n        $.SUBRULE($.node);\n      });\n      $.MANY(function () {\n        $.SUBRULE($.route);\n      });\n    });\n    $.RULE('version', function () {\n      $.CONSUME(Version);\n    });\n    $.RULE('node', function () {\n      $.OPTION(function () {\n        $.SUBRULE($.def);\n      });\n      $.CONSUME(NodeName);\n      $.CONSUME(LCurly);\n      $.MANY(function () {\n        $.SUBRULE($.field);\n      });\n      $.CONSUME(RCurly);\n    });\n    $.RULE('field', function () {\n      $.CONSUME(Identifier);\n      $.OR2([{\n        ALT: function () {\n          $.SUBRULE($.singleFieldValue);\n        }\n      }, {\n        ALT: function () {\n          $.SUBRULE($.multiFieldValue);\n        }\n      }]);\n    });\n    $.RULE('def', function () {\n      $.CONSUME(DEF);\n      $.OR([{\n        ALT: function () {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function () {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE('use', function () {\n      $.CONSUME(USE);\n      $.OR([{\n        ALT: function () {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function () {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE('singleFieldValue', function () {\n      $.AT_LEAST_ONE(function () {\n        $.OR([{\n          ALT: function () {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function () {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(TrueLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(FalseLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n    });\n    $.RULE('multiFieldValue', function () {\n      $.CONSUME(LSquare);\n      $.MANY(function () {\n        $.OR([{\n          ALT: function () {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function () {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n      $.CONSUME(RSquare);\n    });\n    $.RULE('route', function () {\n      $.CONSUME(ROUTE);\n      $.CONSUME(RouteIdentifier);\n      $.CONSUME(TO);\n      $.CONSUME2(RouteIdentifier);\n    });\n    this.performSelfAnalysis();\n  }\n\n}\n\nclass Face {\n  constructor(a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.normal = new Vector3();\n  }\n\n}\n\nconst TEXTURE_TYPE = {\n  INTENSITY: 1,\n  INTENSITY_ALPHA: 2,\n  RGB: 3,\n  RGBA: 4\n};\n\nexport { VRMLLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}