{"ast":null,"code":"import { DataTextureLoader, HalfFloatType, FloatType, DataUtils, LinearEncoding, LinearFilter } from 'three'; // http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  } // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\n  parse(buffer) {\n    const\n    /* return codes for rgbe routines */\n    //RGBE_RETURN_SUCCESS = 0,\n    RGBE_RETURN_FAILURE = -1,\n\n    /* default error routine.  change this to change error handling */\n    rgbe_read_error = 1,\n          rgbe_write_error = 2,\n          rgbe_format_error = 3,\n          rgbe_memory_error = 4,\n          rgbe_error = function (rgbe_error_code, msg) {\n      switch (rgbe_error_code) {\n        case rgbe_read_error:\n          console.error('THREE.RGBELoader Read Error: ' + (msg || ''));\n          break;\n\n        case rgbe_write_error:\n          console.error('THREE.RGBELoader Write Error: ' + (msg || ''));\n          break;\n\n        case rgbe_format_error:\n          console.error('THREE.RGBELoader Bad File Format: ' + (msg || ''));\n          break;\n\n        default:\n        case rgbe_memory_error:\n          console.error('THREE.RGBELoader: Error: ' + (msg || ''));\n      }\n\n      return RGBE_RETURN_FAILURE;\n    },\n\n    /* offsets to red, green, and blue components in a data (float) pixel */\n    //RGBE_DATA_RED = 0,\n    //RGBE_DATA_GREEN = 1,\n    //RGBE_DATA_BLUE = 2,\n\n    /* number of floats per pixel, use 4 since stored in rgba image format */\n    //RGBE_DATA_SIZE = 4,\n\n    /* flags indicating which fields in an rgbe_header_info are valid */\n    RGBE_VALID_PROGRAMTYPE = 1,\n          RGBE_VALID_FORMAT = 2,\n          RGBE_VALID_DIMENSIONS = 4,\n          NEWLINE = '\\n',\n          fgets = function (buffer, lineLimit, consume) {\n      const chunkSize = 128;\n      lineLimit = !lineLimit ? 1024 : lineLimit;\n      let p = buffer.pos,\n          i = -1,\n          len = 0,\n          s = '',\n          chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n\n      while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\n        s += chunk;\n        len += chunk.length;\n        p += chunkSize;\n        chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n      }\n\n      if (-1 < i) {\n        /*for (i=l-1; i>=0; i--) {\n        byteCode = m.charCodeAt(i);\n        if (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n        else if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n        if (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n        }*/\n        if (false !== consume) buffer.pos += len + i + 1;\n        return s + chunk.slice(0, i);\n      }\n\n      return false;\n    },\n\n    /* minimal header reading.  modify if you want to parse more information */\n    RGBE_ReadHeader = function (buffer) {\n      // regexes to parse header info fields\n      const magic_token_re = /^#\\?(\\S+)/,\n            gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n            dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n            // RGBE format header struct\n      header = {\n        valid: 0\n        /* indicate which fields are valid */\n        ,\n        string: ''\n        /* the actual header string */\n        ,\n        comments: ''\n        /* comments found in header */\n        ,\n        programtype: 'RGBE'\n        /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n        ,\n        format: ''\n        /* RGBE format, default 32-bit_rle_rgbe */\n        ,\n        gamma: 1.0\n        /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n        ,\n        exposure: 1.0\n        /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n        ,\n        width: 0,\n        height: 0\n        /* image dimensions, width/height */\n\n      };\n      let line, match;\n\n      if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\n        return rgbe_error(rgbe_read_error, 'no header found');\n      }\n      /* if you want to require the magic token then uncomment the next line */\n\n\n      if (!(match = line.match(magic_token_re))) {\n        return rgbe_error(rgbe_format_error, 'bad initial token');\n      }\n\n      header.valid |= RGBE_VALID_PROGRAMTYPE;\n      header.programtype = match[1];\n      header.string += line + '\\n';\n\n      while (true) {\n        line = fgets(buffer);\n        if (false === line) break;\n        header.string += line + '\\n';\n\n        if ('#' === line.charAt(0)) {\n          header.comments += line + '\\n';\n          continue; // comment line\n        }\n\n        if (match = line.match(gamma_re)) {\n          header.gamma = parseFloat(match[1]);\n        }\n\n        if (match = line.match(exposure_re)) {\n          header.exposure = parseFloat(match[1]);\n        }\n\n        if (match = line.match(format_re)) {\n          header.valid |= RGBE_VALID_FORMAT;\n          header.format = match[1]; //'32-bit_rle_rgbe';\n        }\n\n        if (match = line.match(dimensions_re)) {\n          header.valid |= RGBE_VALID_DIMENSIONS;\n          header.height = parseInt(match[1], 10);\n          header.width = parseInt(match[2], 10);\n        }\n\n        if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n      }\n\n      if (!(header.valid & RGBE_VALID_FORMAT)) {\n        return rgbe_error(rgbe_format_error, 'missing format specifier');\n      }\n\n      if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n        return rgbe_error(rgbe_format_error, 'missing image size specifier');\n      }\n\n      return header;\n    },\n          RGBE_ReadPixels_RLE = function (buffer, w, h) {\n      const scanline_width = w;\n\n      if ( // run length encoding is not allowed so read flat\n      scanline_width < 8 || scanline_width > 0x7fff || // this file is not run length encoded\n      2 !== buffer[0] || 2 !== buffer[1] || buffer[2] & 0x80) {\n        // return the flat buffer\n        return new Uint8Array(buffer);\n      }\n\n      if (scanline_width !== (buffer[2] << 8 | buffer[3])) {\n        return rgbe_error(rgbe_format_error, 'wrong scanline width');\n      }\n\n      const data_rgba = new Uint8Array(4 * w * h);\n\n      if (!data_rgba.length) {\n        return rgbe_error(rgbe_memory_error, 'unable to allocate buffer space');\n      }\n\n      let offset = 0,\n          pos = 0;\n      const ptr_end = 4 * scanline_width;\n      const rgbeStart = new Uint8Array(4);\n      const scanline_buffer = new Uint8Array(ptr_end);\n      let num_scanlines = h; // read in each successive scanline\n\n      while (num_scanlines > 0 && pos < buffer.byteLength) {\n        if (pos + 4 > buffer.byteLength) {\n          return rgbe_error(rgbe_read_error);\n        }\n\n        rgbeStart[0] = buffer[pos++];\n        rgbeStart[1] = buffer[pos++];\n        rgbeStart[2] = buffer[pos++];\n        rgbeStart[3] = buffer[pos++];\n\n        if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n          return rgbe_error(rgbe_format_error, 'bad rgbe scanline format');\n        } // read each of the four channels for the scanline into the buffer\n        // first red, then green, then blue, then exponent\n\n\n        let ptr = 0,\n            count;\n\n        while (ptr < ptr_end && pos < buffer.byteLength) {\n          count = buffer[pos++];\n          const isEncodedRun = count > 128;\n          if (isEncodedRun) count -= 128;\n\n          if (0 === count || ptr + count > ptr_end) {\n            return rgbe_error(rgbe_format_error, 'bad scanline data');\n          }\n\n          if (isEncodedRun) {\n            // a (encoded) run of the same value\n            const byteValue = buffer[pos++];\n\n            for (let i = 0; i < count; i++) {\n              scanline_buffer[ptr++] = byteValue;\n            } //ptr += count;\n\n          } else {\n            // a literal-run\n            scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n            ptr += count;\n            pos += count;\n          }\n        } // now convert data from buffer into rgba\n        // first red, then green, then blue, then exponent (alpha)\n\n\n        const l = scanline_width; //scanline_buffer.byteLength;\n\n        for (let i = 0; i < l; i++) {\n          let off = 0;\n          data_rgba[offset] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 1] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 2] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 3] = scanline_buffer[i + off];\n          offset += 4;\n        }\n\n        num_scanlines--;\n      }\n\n      return data_rgba;\n    };\n\n    const RGBEByteToRGBFloat = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2.0, e - 128.0) / 255.0;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n      destArray[destOffset + 3] = 1;\n    };\n\n    const RGBEByteToRGBHalf = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2.0, e - 128.0) / 255.0; // clamping to 65504, the maximum representable value in float16\n\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n    };\n\n    const byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    const rgbe_header_info = RGBE_ReadHeader(byteArray);\n\n    if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n      const w = rgbe_header_info.width,\n            h = rgbe_header_info.height,\n            image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n\n      if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n        let data, format, type;\n        let numElements;\n\n        switch (this.type) {\n          case FloatType:\n            numElements = image_rgba_data.length / 4;\n            const floatArray = new Float32Array(numElements * 4);\n\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n            }\n\n            data = floatArray;\n            type = FloatType;\n            break;\n\n          case HalfFloatType:\n            numElements = image_rgba_data.length / 4;\n            const halfArray = new Uint16Array(numElements * 4);\n\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4);\n            }\n\n            data = halfArray;\n            type = HalfFloatType;\n            break;\n\n          default:\n            console.error('THREE.RGBELoader: unsupported type: ', this.type);\n            break;\n        }\n\n        return {\n          width: w,\n          height: h,\n          data: data,\n          header: rgbe_header_info.string,\n          gamma: rgbe_header_info.gamma,\n          exposure: rgbe_header_info.exposure,\n          format: format,\n          type: type\n        };\n      }\n    }\n\n    return null;\n  }\n\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n\n        case HalfFloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n\n      if (onLoad) onLoad(texture, texData);\n    }\n\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n\n}\n\nexport { RGBELoader };","map":{"version":3,"names":["DataTextureLoader","HalfFloatType","FloatType","DataUtils","LinearEncoding","LinearFilter","RGBELoader","constructor","manager","type","parse","buffer","RGBE_RETURN_FAILURE","rgbe_read_error","rgbe_write_error","rgbe_format_error","rgbe_memory_error","rgbe_error","rgbe_error_code","msg","console","error","RGBE_VALID_PROGRAMTYPE","RGBE_VALID_FORMAT","RGBE_VALID_DIMENSIONS","NEWLINE","fgets","lineLimit","consume","chunkSize","p","pos","i","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBE_ReadHeader","magic_token_re","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","width","height","line","match","charAt","parseFloat","parseInt","RGBE_ReadPixels_RLE","w","h","scanline_width","Uint8Array","data_rgba","offset","ptr_end","rgbeStart","scanline_buffer","num_scanlines","ptr","count","isEncodedRun","byteValue","set","l","off","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","Math","pow","RGBEByteToRGBHalf","toHalfFloat","min","byteArray","rgbe_header_info","image_rgba_data","data","numElements","floatArray","Float32Array","j","halfArray","setDataType","value","load","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","encoding","minFilter","magFilter","generateMipmaps","flipY"],"sources":["/home/odin/Desktop/THP☠/Developpeur/Final_Project/pokeland/node_modules/three-stdlib/loaders/RGBELoader.js"],"sourcesContent":["import { DataTextureLoader, HalfFloatType, FloatType, DataUtils, LinearEncoding, LinearFilter } from 'three';\n\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  } // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\n  parse(buffer) {\n    const\n    /* return codes for rgbe routines */\n    //RGBE_RETURN_SUCCESS = 0,\n    RGBE_RETURN_FAILURE = -1,\n\n    /* default error routine.  change this to change error handling */\n    rgbe_read_error = 1,\n          rgbe_write_error = 2,\n          rgbe_format_error = 3,\n          rgbe_memory_error = 4,\n          rgbe_error = function (rgbe_error_code, msg) {\n      switch (rgbe_error_code) {\n        case rgbe_read_error:\n          console.error('THREE.RGBELoader Read Error: ' + (msg || ''));\n          break;\n\n        case rgbe_write_error:\n          console.error('THREE.RGBELoader Write Error: ' + (msg || ''));\n          break;\n\n        case rgbe_format_error:\n          console.error('THREE.RGBELoader Bad File Format: ' + (msg || ''));\n          break;\n\n        default:\n        case rgbe_memory_error:\n          console.error('THREE.RGBELoader: Error: ' + (msg || ''));\n      }\n\n      return RGBE_RETURN_FAILURE;\n    },\n\n    /* offsets to red, green, and blue components in a data (float) pixel */\n    //RGBE_DATA_RED = 0,\n    //RGBE_DATA_GREEN = 1,\n    //RGBE_DATA_BLUE = 2,\n\n    /* number of floats per pixel, use 4 since stored in rgba image format */\n    //RGBE_DATA_SIZE = 4,\n\n    /* flags indicating which fields in an rgbe_header_info are valid */\n    RGBE_VALID_PROGRAMTYPE = 1,\n          RGBE_VALID_FORMAT = 2,\n          RGBE_VALID_DIMENSIONS = 4,\n          NEWLINE = '\\n',\n          fgets = function (buffer, lineLimit, consume) {\n      const chunkSize = 128;\n      lineLimit = !lineLimit ? 1024 : lineLimit;\n      let p = buffer.pos,\n          i = -1,\n          len = 0,\n          s = '',\n          chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n\n      while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\n        s += chunk;\n        len += chunk.length;\n        p += chunkSize;\n        chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n      }\n\n      if (-1 < i) {\n        /*for (i=l-1; i>=0; i--) {\n        byteCode = m.charCodeAt(i);\n        if (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n        else if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n        if (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n        }*/\n        if (false !== consume) buffer.pos += len + i + 1;\n        return s + chunk.slice(0, i);\n      }\n\n      return false;\n    },\n\n    /* minimal header reading.  modify if you want to parse more information */\n    RGBE_ReadHeader = function (buffer) {\n      // regexes to parse header info fields\n      const magic_token_re = /^#\\?(\\S+)/,\n            gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n            dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n            // RGBE format header struct\n      header = {\n        valid: 0\n        /* indicate which fields are valid */\n        ,\n        string: ''\n        /* the actual header string */\n        ,\n        comments: ''\n        /* comments found in header */\n        ,\n        programtype: 'RGBE'\n        /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n        ,\n        format: ''\n        /* RGBE format, default 32-bit_rle_rgbe */\n        ,\n        gamma: 1.0\n        /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n        ,\n        exposure: 1.0\n        /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n        ,\n        width: 0,\n        height: 0\n        /* image dimensions, width/height */\n\n      };\n      let line, match;\n\n      if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\n        return rgbe_error(rgbe_read_error, 'no header found');\n      }\n      /* if you want to require the magic token then uncomment the next line */\n\n\n      if (!(match = line.match(magic_token_re))) {\n        return rgbe_error(rgbe_format_error, 'bad initial token');\n      }\n\n      header.valid |= RGBE_VALID_PROGRAMTYPE;\n      header.programtype = match[1];\n      header.string += line + '\\n';\n\n      while (true) {\n        line = fgets(buffer);\n        if (false === line) break;\n        header.string += line + '\\n';\n\n        if ('#' === line.charAt(0)) {\n          header.comments += line + '\\n';\n          continue; // comment line\n        }\n\n        if (match = line.match(gamma_re)) {\n          header.gamma = parseFloat(match[1]);\n        }\n\n        if (match = line.match(exposure_re)) {\n          header.exposure = parseFloat(match[1]);\n        }\n\n        if (match = line.match(format_re)) {\n          header.valid |= RGBE_VALID_FORMAT;\n          header.format = match[1]; //'32-bit_rle_rgbe';\n        }\n\n        if (match = line.match(dimensions_re)) {\n          header.valid |= RGBE_VALID_DIMENSIONS;\n          header.height = parseInt(match[1], 10);\n          header.width = parseInt(match[2], 10);\n        }\n\n        if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n      }\n\n      if (!(header.valid & RGBE_VALID_FORMAT)) {\n        return rgbe_error(rgbe_format_error, 'missing format specifier');\n      }\n\n      if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n        return rgbe_error(rgbe_format_error, 'missing image size specifier');\n      }\n\n      return header;\n    },\n          RGBE_ReadPixels_RLE = function (buffer, w, h) {\n      const scanline_width = w;\n\n      if ( // run length encoding is not allowed so read flat\n      scanline_width < 8 || scanline_width > 0x7fff || // this file is not run length encoded\n      2 !== buffer[0] || 2 !== buffer[1] || buffer[2] & 0x80) {\n        // return the flat buffer\n        return new Uint8Array(buffer);\n      }\n\n      if (scanline_width !== (buffer[2] << 8 | buffer[3])) {\n        return rgbe_error(rgbe_format_error, 'wrong scanline width');\n      }\n\n      const data_rgba = new Uint8Array(4 * w * h);\n\n      if (!data_rgba.length) {\n        return rgbe_error(rgbe_memory_error, 'unable to allocate buffer space');\n      }\n\n      let offset = 0,\n          pos = 0;\n      const ptr_end = 4 * scanline_width;\n      const rgbeStart = new Uint8Array(4);\n      const scanline_buffer = new Uint8Array(ptr_end);\n      let num_scanlines = h; // read in each successive scanline\n\n      while (num_scanlines > 0 && pos < buffer.byteLength) {\n        if (pos + 4 > buffer.byteLength) {\n          return rgbe_error(rgbe_read_error);\n        }\n\n        rgbeStart[0] = buffer[pos++];\n        rgbeStart[1] = buffer[pos++];\n        rgbeStart[2] = buffer[pos++];\n        rgbeStart[3] = buffer[pos++];\n\n        if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n          return rgbe_error(rgbe_format_error, 'bad rgbe scanline format');\n        } // read each of the four channels for the scanline into the buffer\n        // first red, then green, then blue, then exponent\n\n\n        let ptr = 0,\n            count;\n\n        while (ptr < ptr_end && pos < buffer.byteLength) {\n          count = buffer[pos++];\n          const isEncodedRun = count > 128;\n          if (isEncodedRun) count -= 128;\n\n          if (0 === count || ptr + count > ptr_end) {\n            return rgbe_error(rgbe_format_error, 'bad scanline data');\n          }\n\n          if (isEncodedRun) {\n            // a (encoded) run of the same value\n            const byteValue = buffer[pos++];\n\n            for (let i = 0; i < count; i++) {\n              scanline_buffer[ptr++] = byteValue;\n            } //ptr += count;\n\n          } else {\n            // a literal-run\n            scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n            ptr += count;\n            pos += count;\n          }\n        } // now convert data from buffer into rgba\n        // first red, then green, then blue, then exponent (alpha)\n\n\n        const l = scanline_width; //scanline_buffer.byteLength;\n\n        for (let i = 0; i < l; i++) {\n          let off = 0;\n          data_rgba[offset] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 1] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 2] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 3] = scanline_buffer[i + off];\n          offset += 4;\n        }\n\n        num_scanlines--;\n      }\n\n      return data_rgba;\n    };\n\n    const RGBEByteToRGBFloat = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2.0, e - 128.0) / 255.0;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n      destArray[destOffset + 3] = 1;\n    };\n\n    const RGBEByteToRGBHalf = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2.0, e - 128.0) / 255.0; // clamping to 65504, the maximum representable value in float16\n\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n    };\n\n    const byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    const rgbe_header_info = RGBE_ReadHeader(byteArray);\n\n    if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n      const w = rgbe_header_info.width,\n            h = rgbe_header_info.height,\n            image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n\n      if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n        let data, format, type;\n        let numElements;\n\n        switch (this.type) {\n          case FloatType:\n            numElements = image_rgba_data.length / 4;\n            const floatArray = new Float32Array(numElements * 4);\n\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n            }\n\n            data = floatArray;\n            type = FloatType;\n            break;\n\n          case HalfFloatType:\n            numElements = image_rgba_data.length / 4;\n            const halfArray = new Uint16Array(numElements * 4);\n\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4);\n            }\n\n            data = halfArray;\n            type = HalfFloatType;\n            break;\n\n          default:\n            console.error('THREE.RGBELoader: unsupported type: ', this.type);\n            break;\n        }\n\n        return {\n          width: w,\n          height: h,\n          data: data,\n          header: rgbe_header_info.string,\n          gamma: rgbe_header_info.gamma,\n          exposure: rgbe_header_info.exposure,\n          format: format,\n          type: type\n        };\n      }\n    }\n\n    return null;\n  }\n\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n\n        case HalfFloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n\n      if (onLoad) onLoad(texture, texData);\n    }\n\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n\n}\n\nexport { RGBELoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}