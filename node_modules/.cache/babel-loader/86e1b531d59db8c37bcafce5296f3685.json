{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, HalfFloatType, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { BlurPass } from '../materials/BlurPass.js';\nimport { MeshReflectorMaterial as MeshReflectorMaterial$1 } from '../materials/MeshReflectorMaterial.js';\nextend({\n  MeshReflectorMaterialImpl: MeshReflectorMaterial$1\n});\nconst MeshReflectorMaterial = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    mixBlur = 0,\n    mixStrength = 1,\n    resolution = 256,\n    blur = [0, 0],\n    minDepthThreshold = 0.9,\n    maxDepthThreshold = 1,\n    depthScale = 0,\n    depthToBlurRatioBias = 0.25,\n    mirror = 0,\n    distortion = 1,\n    mixContrast = 1,\n    distortionMap,\n    reflectorOffset = 0,\n    ...props\n  } = _ref;\n  const gl = useThree(_ref2 => {\n    let {\n      gl\n    } = _ref2;\n    return gl;\n  });\n  const camera = useThree(_ref3 => {\n    let {\n      camera\n    } = _ref3;\n    return camera;\n  });\n  const scene = useThree(_ref4 => {\n    let {\n      scene\n    } = _ref4;\n    return scene;\n  });\n  blur = Array.isArray(blur) ? blur : [blur, blur];\n  const hasBlur = blur[0] + blur[1] > 0;\n  const materialRef = React.useRef(null);\n  const [reflectorPlane] = React.useState(() => new Plane());\n  const [normal] = React.useState(() => new Vector3());\n  const [reflectorWorldPosition] = React.useState(() => new Vector3());\n  const [cameraWorldPosition] = React.useState(() => new Vector3());\n  const [rotationMatrix] = React.useState(() => new Matrix4());\n  const [lookAtPosition] = React.useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = React.useState(() => new Vector4());\n  const [view] = React.useState(() => new Vector3());\n  const [target] = React.useState(() => new Vector3());\n  const [q] = React.useState(() => new Vector4());\n  const [textureMatrix] = React.useState(() => new Matrix4());\n  const [virtualCamera] = React.useState(() => new PerspectiveCamera());\n  const beforeRender = React.useCallback(() => {\n    var _materialRef$current; // TODO: As of R3f 7-8 this should be __r3f.parent\n\n\n    const parent = materialRef.current.parent || ((_materialRef$current = materialRef.current) == null ? void 0 : _materialRef$current.__r3f.parent);\n    if (!parent) return;\n    reflectorWorldPosition.setFromMatrixPosition(parent.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(parent.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    reflectorWorldPosition.addScaledVector(normal, reflectorOffset);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(parent.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, [camera, reflectorOffset]);\n  const [fbo1, fbo2, blurpass, reflectorProps] = React.useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      encoding: gl.outputEncoding,\n      type: HalfFloatType\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n    fbo1.depthBuffer = true;\n    fbo1.depthTexture = new DepthTexture(resolution, resolution);\n    fbo1.depthTexture.format = DepthFormat;\n    fbo1.depthTexture.type = UnsignedShortType;\n    const fbo2 = new WebGLRenderTarget(resolution, resolution, parameters);\n    const blurpass = new BlurPass({\n      gl,\n      resolution,\n      width: blur[0],\n      height: blur[1],\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias\n    });\n    const reflectorProps = {\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      tDiffuseBlur: fbo2.texture,\n      hasBlur,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      distortion,\n      distortionMap,\n      mixContrast,\n      'defines-USE_BLUR': hasBlur ? '' : undefined,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': distortionMap ? '' : undefined\n    };\n    return [fbo1, fbo2, blurpass, reflectorProps];\n  }, [gl, blur, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, distortion, distortionMap, mixContrast]);\n  useFrame(() => {\n    var _materialRef$current2; // TODO: As of R3f 7-8 this should be __r3f.parent\n\n\n    const parent = materialRef.current.parent || ((_materialRef$current2 = materialRef.current) == null ? void 0 : _materialRef$current2.__r3f.parent);\n    if (!parent) return;\n    parent.visible = false;\n    const currentXrEnabled = gl.xr.enabled;\n    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;\n    beforeRender();\n    gl.xr.enabled = false;\n    gl.shadowMap.autoUpdate = false;\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    if (!gl.autoClear) gl.clear();\n    gl.render(scene, virtualCamera);\n    if (hasBlur) blurpass.render(gl, fbo1, fbo2);\n    gl.xr.enabled = currentXrEnabled;\n    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;\n    parent.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/React.createElement(\"meshReflectorMaterialImpl\", _extends({\n    attach: \"material\" // Defines can't be updated dynamically, so we need to recreate the material\n    ,\n    key: 'key' + reflectorProps['defines-USE_BLUR'] + reflectorProps['defines-USE_DEPTH'] + reflectorProps['defines-USE_DISTORTION'],\n    ref: mergeRefs([materialRef, ref])\n  }, reflectorProps, props));\n});\nexport { MeshReflectorMaterial };","map":{"version":3,"names":["_extends","React","Plane","Vector3","Matrix4","Vector4","PerspectiveCamera","LinearFilter","HalfFloatType","WebGLRenderTarget","DepthTexture","DepthFormat","UnsignedShortType","extend","useThree","useFrame","mergeRefs","BlurPass","MeshReflectorMaterial","MeshReflectorMaterial$1","MeshReflectorMaterialImpl","forwardRef","ref","mixBlur","mixStrength","resolution","blur","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","mirror","distortion","mixContrast","distortionMap","reflectorOffset","props","gl","camera","scene","Array","isArray","hasBlur","materialRef","useRef","reflectorPlane","useState","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","target","q","textureMatrix","virtualCamera","beforeRender","useCallback","_materialRef$current","parent","current","__r3f","setFromMatrixPosition","matrixWorld","extractRotation","set","applyMatrix4","addScaledVector","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","Math","sign","elements","w","multiplyScalar","fbo1","fbo2","blurpass","reflectorProps","useMemo","parameters","minFilter","magFilter","encoding","outputEncoding","type","depthBuffer","depthTexture","format","width","height","tDiffuse","texture","tDepth","tDiffuseBlur","undefined","_materialRef$current2","visible","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","render","createElement","attach","key"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/@react-three/drei/core/MeshReflectorMaterial.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, HalfFloatType, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { BlurPass } from '../materials/BlurPass.js';\nimport { MeshReflectorMaterial as MeshReflectorMaterial$1 } from '../materials/MeshReflectorMaterial.js';\n\nextend({\n  MeshReflectorMaterialImpl: MeshReflectorMaterial$1\n});\nconst MeshReflectorMaterial = /*#__PURE__*/React.forwardRef(({\n  mixBlur = 0,\n  mixStrength = 1,\n  resolution = 256,\n  blur = [0, 0],\n  minDepthThreshold = 0.9,\n  maxDepthThreshold = 1,\n  depthScale = 0,\n  depthToBlurRatioBias = 0.25,\n  mirror = 0,\n  distortion = 1,\n  mixContrast = 1,\n  distortionMap,\n  reflectorOffset = 0,\n  ...props\n}, ref) => {\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  blur = Array.isArray(blur) ? blur : [blur, blur];\n  const hasBlur = blur[0] + blur[1] > 0;\n  const materialRef = React.useRef(null);\n  const [reflectorPlane] = React.useState(() => new Plane());\n  const [normal] = React.useState(() => new Vector3());\n  const [reflectorWorldPosition] = React.useState(() => new Vector3());\n  const [cameraWorldPosition] = React.useState(() => new Vector3());\n  const [rotationMatrix] = React.useState(() => new Matrix4());\n  const [lookAtPosition] = React.useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = React.useState(() => new Vector4());\n  const [view] = React.useState(() => new Vector3());\n  const [target] = React.useState(() => new Vector3());\n  const [q] = React.useState(() => new Vector4());\n  const [textureMatrix] = React.useState(() => new Matrix4());\n  const [virtualCamera] = React.useState(() => new PerspectiveCamera());\n  const beforeRender = React.useCallback(() => {\n    var _materialRef$current;\n\n    // TODO: As of R3f 7-8 this should be __r3f.parent\n    const parent = materialRef.current.parent || ((_materialRef$current = materialRef.current) == null ? void 0 : _materialRef$current.__r3f.parent);\n    if (!parent) return;\n    reflectorWorldPosition.setFromMatrixPosition(parent.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(parent.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    reflectorWorldPosition.addScaledVector(normal, reflectorOffset);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(parent.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, [camera, reflectorOffset]);\n  const [fbo1, fbo2, blurpass, reflectorProps] = React.useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      encoding: gl.outputEncoding,\n      type: HalfFloatType\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n    fbo1.depthBuffer = true;\n    fbo1.depthTexture = new DepthTexture(resolution, resolution);\n    fbo1.depthTexture.format = DepthFormat;\n    fbo1.depthTexture.type = UnsignedShortType;\n    const fbo2 = new WebGLRenderTarget(resolution, resolution, parameters);\n    const blurpass = new BlurPass({\n      gl,\n      resolution,\n      width: blur[0],\n      height: blur[1],\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias\n    });\n    const reflectorProps = {\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      tDiffuseBlur: fbo2.texture,\n      hasBlur,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      distortion,\n      distortionMap,\n      mixContrast,\n      'defines-USE_BLUR': hasBlur ? '' : undefined,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': distortionMap ? '' : undefined\n    };\n    return [fbo1, fbo2, blurpass, reflectorProps];\n  }, [gl, blur, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, distortion, distortionMap, mixContrast]);\n  useFrame(() => {\n    var _materialRef$current2;\n\n    // TODO: As of R3f 7-8 this should be __r3f.parent\n    const parent = materialRef.current.parent || ((_materialRef$current2 = materialRef.current) == null ? void 0 : _materialRef$current2.__r3f.parent);\n    if (!parent) return;\n    parent.visible = false;\n    const currentXrEnabled = gl.xr.enabled;\n    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;\n    beforeRender();\n    gl.xr.enabled = false;\n    gl.shadowMap.autoUpdate = false;\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    if (!gl.autoClear) gl.clear();\n    gl.render(scene, virtualCamera);\n    if (hasBlur) blurpass.render(gl, fbo1, fbo2);\n    gl.xr.enabled = currentXrEnabled;\n    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;\n    parent.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/React.createElement(\"meshReflectorMaterialImpl\", _extends({\n    attach: \"material\" // Defines can't be updated dynamically, so we need to recreate the material\n    ,\n    key: 'key' + reflectorProps['defines-USE_BLUR'] + reflectorProps['defines-USE_DEPTH'] + reflectorProps['defines-USE_DISTORTION'],\n    ref: mergeRefs([materialRef, ref])\n  }, reflectorProps, props));\n});\n\nexport { MeshReflectorMaterial };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}