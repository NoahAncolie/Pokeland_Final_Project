{"ast":null,"code":"import { Loader, FileLoader, LoaderUtils, BufferGeometry, Float32BufferAttribute, BufferAttribute } from 'three';\nimport { unzlibSync } from 'fflate';\n\nclass VTKLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    function parseASCII(data) {\n      // connectivity of the triangles\n      var indices = []; // triangles vertices\n\n      var positions = []; // red, green, blue colors in the range 0 to 1\n\n      var colors = []; // normal vector, one per vertex\n\n      var normals = [];\n      var result; // pattern for detecting the end of a number sequence\n\n      var patWord = /^[^\\d.\\s-]+/; // pattern for reading vertices, 3 floats or integers\n\n      var pat3Floats = /(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)/g; // pattern for connectivity, an integer followed by any number of ints\n      // the first integer is the number of polygon nodes\n\n      var patConnectivity = /^(\\d+)\\s+([\\s\\d]*)/; // indicates start of vertex data section\n\n      var patPOINTS = /^POINTS /; // indicates start of polygon connectivity section\n\n      var patPOLYGONS = /^POLYGONS /; // indicates start of triangle strips section\n\n      var patTRIANGLE_STRIPS = /^TRIANGLE_STRIPS /; // POINT_DATA number_of_values\n\n      var patPOINT_DATA = /^POINT_DATA[ ]+(\\d+)/; // CELL_DATA number_of_polys\n\n      var patCELL_DATA = /^CELL_DATA[ ]+(\\d+)/; // Start of color section\n\n      var patCOLOR_SCALARS = /^COLOR_SCALARS[ ]+(\\w+)[ ]+3/; // NORMALS Normals float\n\n      var patNORMALS = /^NORMALS[ ]+(\\w+)[ ]+(\\w+)/;\n      var inPointsSection = false;\n      var inPolygonsSection = false;\n      var inTriangleStripSection = false;\n      var inPointDataSection = false;\n      var inCellDataSection = false;\n      var inColorSection = false;\n      var inNormalsSection = false;\n      var lines = data.split('\\n');\n\n      for (var i in lines) {\n        var line = lines[i].trim();\n\n        if (line.indexOf('DATASET') === 0) {\n          var dataset = line.split(' ')[1];\n          if (dataset !== 'POLYDATA') throw new Error('Unsupported DATASET type: ' + dataset);\n        } else if (inPointsSection) {\n          // get the vertices\n          while ((result = pat3Floats.exec(line)) !== null) {\n            if (patWord.exec(line) !== null) break;\n            var x = parseFloat(result[1]);\n            var y = parseFloat(result[2]);\n            var z = parseFloat(result[3]);\n            positions.push(x, y, z);\n          }\n        } else if (inPolygonsSection) {\n          if ((result = patConnectivity.exec(line)) !== null) {\n            // numVertices i0 i1 i2 ...\n            var numVertices = parseInt(result[1]);\n            var inds = result[2].split(/\\s+/);\n\n            if (numVertices >= 3) {\n              var i0 = parseInt(inds[0]);\n              var i1, i2;\n              var k = 1; // split the polygon in numVertices - 2 triangles\n\n              for (var j = 0; j < numVertices - 2; ++j) {\n                i1 = parseInt(inds[k]);\n                i2 = parseInt(inds[k + 1]);\n                indices.push(i0, i1, i2);\n                k++;\n              }\n            }\n          }\n        } else if (inTriangleStripSection) {\n          if ((result = patConnectivity.exec(line)) !== null) {\n            // numVertices i0 i1 i2 ...\n            var numVertices = parseInt(result[1]);\n            var inds = result[2].split(/\\s+/);\n\n            if (numVertices >= 3) {\n              var i0, i1, i2; // split the polygon in numVertices - 2 triangles\n\n              for (var j = 0; j < numVertices - 2; j++) {\n                if (j % 2 === 1) {\n                  i0 = parseInt(inds[j]);\n                  i1 = parseInt(inds[j + 2]);\n                  i2 = parseInt(inds[j + 1]);\n                  indices.push(i0, i1, i2);\n                } else {\n                  i0 = parseInt(inds[j]);\n                  i1 = parseInt(inds[j + 1]);\n                  i2 = parseInt(inds[j + 2]);\n                  indices.push(i0, i1, i2);\n                }\n              }\n            }\n          }\n        } else if (inPointDataSection || inCellDataSection) {\n          if (inColorSection) {\n            // Get the colors\n            while ((result = pat3Floats.exec(line)) !== null) {\n              if (patWord.exec(line) !== null) break;\n              var r = parseFloat(result[1]);\n              var g = parseFloat(result[2]);\n              var b = parseFloat(result[3]);\n              colors.push(r, g, b);\n            }\n          } else if (inNormalsSection) {\n            // Get the normal vectors\n            while ((result = pat3Floats.exec(line)) !== null) {\n              if (patWord.exec(line) !== null) break;\n              var nx = parseFloat(result[1]);\n              var ny = parseFloat(result[2]);\n              var nz = parseFloat(result[3]);\n              normals.push(nx, ny, nz);\n            }\n          }\n        }\n\n        if (patPOLYGONS.exec(line) !== null) {\n          inPolygonsSection = true;\n          inPointsSection = false;\n          inTriangleStripSection = false;\n        } else if (patPOINTS.exec(line) !== null) {\n          inPolygonsSection = false;\n          inPointsSection = true;\n          inTriangleStripSection = false;\n        } else if (patTRIANGLE_STRIPS.exec(line) !== null) {\n          inPolygonsSection = false;\n          inPointsSection = false;\n          inTriangleStripSection = true;\n        } else if (patPOINT_DATA.exec(line) !== null) {\n          inPointDataSection = true;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        } else if (patCELL_DATA.exec(line) !== null) {\n          inCellDataSection = true;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        } else if (patCOLOR_SCALARS.exec(line) !== null) {\n          inColorSection = true;\n          inNormalsSection = false;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        } else if (patNORMALS.exec(line) !== null) {\n          inNormalsSection = true;\n          inColorSection = false;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        }\n      }\n\n      var geometry = new BufferGeometry();\n      geometry.setIndex(indices);\n      geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\n      if (normals.length === positions.length) {\n        geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      }\n\n      if (colors.length !== indices.length) {\n        // stagger\n        if (colors.length === positions.length) {\n          geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n        }\n      } else {\n        // cell\n        geometry = geometry.toNonIndexed();\n        var numTriangles = geometry.attributes.position.count / 3;\n\n        if (colors.length === numTriangles * 3) {\n          var newColors = [];\n\n          for (var i = 0; i < numTriangles; i++) {\n            var r = colors[3 * i + 0];\n            var g = colors[3 * i + 1];\n            var b = colors[3 * i + 2];\n            newColors.push(r, g, b);\n            newColors.push(r, g, b);\n            newColors.push(r, g, b);\n          }\n\n          geometry.setAttribute('color', new Float32BufferAttribute(newColors, 3));\n        }\n      }\n\n      return geometry;\n    }\n\n    function parseBinary(data) {\n      var count, pointIndex, i, numberOfPoints, s;\n      var buffer = new Uint8Array(data);\n      var dataView = new DataView(data); // Points and normals, by default, are empty\n\n      var points = [];\n      var normals = [];\n      var indices = []; // Going to make a big array of strings\n\n      var index = 0;\n\n      function findString(buffer, start) {\n        var index = start;\n        var c = buffer[index];\n        var s = [];\n\n        while (c !== 10) {\n          s.push(String.fromCharCode(c));\n          index++;\n          c = buffer[index];\n        }\n\n        return {\n          start: start,\n          end: index,\n          next: index + 1,\n          parsedString: s.join('')\n        };\n      }\n\n      var state, line;\n\n      while (true) {\n        // Get a string\n        state = findString(buffer, index);\n        line = state.parsedString;\n\n        if (line.indexOf('DATASET') === 0) {\n          var dataset = line.split(' ')[1];\n          if (dataset !== 'POLYDATA') throw new Error('Unsupported DATASET type: ' + dataset);\n        } else if (line.indexOf('POINTS') === 0) {\n          numberOfPoints = parseInt(line.split(' ')[1], 10); // Each point is 3 4-byte floats\n\n          count = numberOfPoints * 4 * 3;\n          points = new Float32Array(numberOfPoints * 3);\n          pointIndex = state.next;\n\n          for (i = 0; i < numberOfPoints; i++) {\n            points[3 * i] = dataView.getFloat32(pointIndex, false);\n            points[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n            points[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n            pointIndex = pointIndex + 12;\n          } // increment our next pointer\n\n\n          state.next = state.next + count + 1;\n        } else if (line.indexOf('TRIANGLE_STRIPS') === 0) {\n          var numberOfStrips = parseInt(line.split(' ')[1], 10);\n          var size = parseInt(line.split(' ')[2], 10); // 4 byte integers\n\n          count = size * 4;\n          indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n          var indicesIndex = 0;\n          pointIndex = state.next;\n\n          for (i = 0; i < numberOfStrips; i++) {\n            // For each strip, read the first value, then record that many more points\n            var indexCount = dataView.getInt32(pointIndex, false);\n            var strip = [];\n            pointIndex += 4;\n\n            for (s = 0; s < indexCount; s++) {\n              strip.push(dataView.getInt32(pointIndex, false));\n              pointIndex += 4;\n            } // retrieves the n-2 triangles from the triangle strip\n\n\n            for (var j = 0; j < indexCount - 2; j++) {\n              if (j % 2) {\n                indices[indicesIndex++] = strip[j];\n                indices[indicesIndex++] = strip[j + 2];\n                indices[indicesIndex++] = strip[j + 1];\n              } else {\n                indices[indicesIndex++] = strip[j];\n                indices[indicesIndex++] = strip[j + 1];\n                indices[indicesIndex++] = strip[j + 2];\n              }\n            }\n          } // increment our next pointer\n\n\n          state.next = state.next + count + 1;\n        } else if (line.indexOf('POLYGONS') === 0) {\n          var numberOfStrips = parseInt(line.split(' ')[1], 10);\n          var size = parseInt(line.split(' ')[2], 10); // 4 byte integers\n\n          count = size * 4;\n          indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n          var indicesIndex = 0;\n          pointIndex = state.next;\n\n          for (i = 0; i < numberOfStrips; i++) {\n            // For each strip, read the first value, then record that many more points\n            var indexCount = dataView.getInt32(pointIndex, false);\n            var strip = [];\n            pointIndex += 4;\n\n            for (s = 0; s < indexCount; s++) {\n              strip.push(dataView.getInt32(pointIndex, false));\n              pointIndex += 4;\n            } // divide the polygon in n-2 triangle\n\n\n            for (var j = 1; j < indexCount - 1; j++) {\n              indices[indicesIndex++] = strip[0];\n              indices[indicesIndex++] = strip[j];\n              indices[indicesIndex++] = strip[j + 1];\n            }\n          } // increment our next pointer\n\n\n          state.next = state.next + count + 1;\n        } else if (line.indexOf('POINT_DATA') === 0) {\n          numberOfPoints = parseInt(line.split(' ')[1], 10); // Grab the next line\n\n          state = findString(buffer, state.next); // Now grab the binary data\n\n          count = numberOfPoints * 4 * 3;\n          normals = new Float32Array(numberOfPoints * 3);\n          pointIndex = state.next;\n\n          for (i = 0; i < numberOfPoints; i++) {\n            normals[3 * i] = dataView.getFloat32(pointIndex, false);\n            normals[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n            normals[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n            pointIndex += 12;\n          } // Increment past our data\n\n\n          state.next = state.next + count;\n        } // Increment index\n\n\n        index = state.next;\n\n        if (index >= buffer.byteLength) {\n          break;\n        }\n      }\n\n      var geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(indices, 1));\n      geometry.setAttribute('position', new BufferAttribute(points, 3));\n\n      if (normals.length === points.length) {\n        geometry.setAttribute('normal', new BufferAttribute(normals, 3));\n      }\n\n      return geometry;\n    }\n\n    function Float32Concat(first, second) {\n      const firstLength = first.length,\n            result = new Float32Array(firstLength + second.length);\n      result.set(first);\n      result.set(second, firstLength);\n      return result;\n    }\n\n    function Int32Concat(first, second) {\n      var firstLength = first.length,\n          result = new Int32Array(firstLength + second.length);\n      result.set(first);\n      result.set(second, firstLength);\n      return result;\n    }\n\n    function parseXML(stringFile) {\n      // Changes XML to JSON, based on https://davidwalsh.name/convert-xml-json\n      function xmlToJson(xml) {\n        // Create the return object\n        var obj = {};\n\n        if (xml.nodeType === 1) {\n          // element\n          // do attributes\n          if (xml.attributes) {\n            if (xml.attributes.length > 0) {\n              obj['attributes'] = {};\n\n              for (var j = 0; j < xml.attributes.length; j++) {\n                var attribute = xml.attributes.item(j);\n                obj['attributes'][attribute.nodeName] = attribute.nodeValue.trim();\n              }\n            }\n          }\n        } else if (xml.nodeType === 3) {\n          // text\n          obj = xml.nodeValue.trim();\n        } // do children\n\n\n        if (xml.hasChildNodes()) {\n          for (var i = 0; i < xml.childNodes.length; i++) {\n            var item = xml.childNodes.item(i);\n            var nodeName = item.nodeName;\n\n            if (typeof obj[nodeName] === 'undefined') {\n              var tmp = xmlToJson(item);\n              if (tmp !== '') obj[nodeName] = tmp;\n            } else {\n              if (typeof obj[nodeName].push === 'undefined') {\n                var old = obj[nodeName];\n                obj[nodeName] = [old];\n              }\n\n              var tmp = xmlToJson(item);\n              if (tmp !== '') obj[nodeName].push(tmp);\n            }\n          }\n        }\n\n        return obj;\n      } // Taken from Base64-js\n\n\n      function Base64toByteArray(b64) {\n        var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n        var i;\n        var lookup = [];\n        var revLookup = [];\n        var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n        var len = code.length;\n\n        for (i = 0; i < len; i++) {\n          lookup[i] = code[i];\n        }\n\n        for (i = 0; i < len; ++i) {\n          revLookup[code.charCodeAt(i)] = i;\n        }\n\n        revLookup['-'.charCodeAt(0)] = 62;\n        revLookup['_'.charCodeAt(0)] = 63;\n        var j, l, tmp, placeHolders, arr;\n        var len = b64.length;\n\n        if (len % 4 > 0) {\n          throw new Error('Invalid string. Length must be a multiple of 4');\n        }\n\n        placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;\n        arr = new Arr(len * 3 / 4 - placeHolders);\n        l = placeHolders > 0 ? len - 4 : len;\n        var L = 0;\n\n        for (i = 0, j = 0; i < l; i += 4, j += 3) {\n          tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n          arr[L++] = (tmp & 0xff0000) >> 16;\n          arr[L++] = (tmp & 0xff00) >> 8;\n          arr[L++] = tmp & 0xff;\n        }\n\n        if (placeHolders === 2) {\n          tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n          arr[L++] = tmp & 0xff;\n        } else if (placeHolders === 1) {\n          tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n          arr[L++] = tmp >> 8 & 0xff;\n          arr[L++] = tmp & 0xff;\n        }\n\n        return arr;\n      }\n\n      function parseDataArray(ele, compressed) {\n        var numBytes = 0;\n\n        if (json.attributes.header_type === 'UInt64') {\n          numBytes = 8;\n        } else if (json.attributes.header_type === 'UInt32') {\n          numBytes = 4;\n        } // Check the format\n\n\n        if (ele.attributes.format === 'binary' && compressed) {\n          var rawData, content, byteData, blocks, cSizeStart, headerSize, padding, dataOffsets, currentOffset;\n\n          if (ele.attributes.type === 'Float32') {\n            var txt = new Float32Array();\n          } else if (ele.attributes.type === 'Int64') {\n            var txt = new Int32Array();\n          } // VTP data with the header has the following structure:\n          // [#blocks][#u-size][#p-size][#c-size-1][#c-size-2]...[#c-size-#blocks][DATA]\n          //\n          // Each token is an integer value whose type is specified by \"header_type\" at the top of the file (UInt32 if no type specified). The token meanings are:\n          // [#blocks] = Number of blocks\n          // [#u-size] = Block size before compression\n          // [#p-size] = Size of last partial block (zero if it not needed)\n          // [#c-size-i] = Size in bytes of block i after compression\n          //\n          // The [DATA] portion stores contiguously every block appended together. The offset from the beginning of the data section to the beginning of a block is\n          // computed by summing the compressed block sizes from preceding blocks according to the header.\n\n\n          rawData = ele['#text'];\n          byteData = Base64toByteArray(rawData);\n          blocks = byteData[0];\n\n          for (var i = 1; i < numBytes - 1; i++) {\n            blocks = blocks | byteData[i] << i * numBytes;\n          }\n\n          headerSize = (blocks + 3) * numBytes;\n          padding = headerSize % 3 > 0 ? 3 - headerSize % 3 : 0;\n          headerSize = headerSize + padding;\n          dataOffsets = [];\n          currentOffset = headerSize;\n          dataOffsets.push(currentOffset); // Get the blocks sizes after the compression.\n          // There are three blocks before c-size-i, so we skip 3*numBytes\n\n          cSizeStart = 3 * numBytes;\n\n          for (var i = 0; i < blocks; i++) {\n            var currentBlockSize = byteData[i * numBytes + cSizeStart];\n\n            for (var j = 1; j < numBytes - 1; j++) {\n              // Each data point consists of 8 bytes regardless of the header type\n              currentBlockSize = currentBlockSize | byteData[i * numBytes + cSizeStart + j] << j * 8;\n            }\n\n            currentOffset = currentOffset + currentBlockSize;\n            dataOffsets.push(currentOffset);\n          }\n\n          for (var i = 0; i < dataOffsets.length - 1; i++) {\n            var data = unzlibSync(byteData.slice(dataOffsets[i], dataOffsets[i + 1])); // eslint-disable-line no-undef\n\n            content = data.buffer;\n\n            if (ele.attributes.type === 'Float32') {\n              content = new Float32Array(content);\n              txt = Float32Concat(txt, content);\n            } else if (ele.attributes.type === 'Int64') {\n              content = new Int32Array(content);\n              txt = Int32Concat(txt, content);\n            }\n          }\n\n          delete ele['#text'];\n\n          if (ele.attributes.type === 'Int64') {\n            if (ele.attributes.format === 'binary') {\n              txt = txt.filter(function (el, idx) {\n                if (idx % 2 !== 1) return true;\n              });\n            }\n          }\n        } else {\n          if (ele.attributes.format === 'binary' && !compressed) {\n            var content = Base64toByteArray(ele['#text']); //  VTP data for the uncompressed case has the following structure:\n            // [#bytes][DATA]\n            // where \"[#bytes]\" is an integer value specifying the number of bytes in the block of data following it.\n\n            content = content.slice(numBytes).buffer;\n          } else {\n            if (ele['#text']) {\n              var content = ele['#text'].split(/\\s+/).filter(function (el) {\n                if (el !== '') return el;\n              });\n            } else {\n              var content = new Int32Array(0).buffer;\n            }\n          }\n\n          delete ele['#text']; // Get the content and optimize it\n\n          if (ele.attributes.type === 'Float32') {\n            var txt = new Float32Array(content);\n          } else if (ele.attributes.type === 'Int32') {\n            var txt = new Int32Array(content);\n          } else if (ele.attributes.type === 'Int64') {\n            var txt = new Int32Array(content);\n\n            if (ele.attributes.format === 'binary') {\n              txt = txt.filter(function (el, idx) {\n                if (idx % 2 !== 1) return true;\n              });\n            }\n          }\n        } // endif ( ele.attributes.format === 'binary' && compressed )\n\n\n        return txt;\n      } // Main part\n      // Get Dom\n\n\n      var dom = null;\n\n      if (window.DOMParser) {\n        try {\n          dom = new DOMParser().parseFromString(stringFile, 'text/xml');\n        } catch (e) {\n          dom = null;\n        }\n      } else if (window.ActiveXObject) {\n        try {\n          dom = new ActiveXObject('Microsoft.XMLDOM'); // eslint-disable-line no-undef\n\n          dom.async = false;\n\n          if (!dom.loadXML()) {\n            throw new Error(dom.parseError.reason + dom.parseError.srcText);\n          }\n        } catch (e) {\n          dom = null;\n        }\n      } else {\n        throw new Error('Cannot parse xml string!');\n      } // Get the doc\n\n\n      var doc = dom.documentElement; // Convert to json\n\n      var json = xmlToJson(doc);\n      var points = [];\n      var normals = [];\n      var indices = [];\n\n      if (json.PolyData) {\n        var piece = json.PolyData.Piece;\n        var compressed = json.attributes.hasOwnProperty('compressor'); // Can be optimized\n        // Loop through the sections\n\n        var sections = ['PointData', 'Points', 'Strips', 'Polys']; // +['CellData', 'Verts', 'Lines'];\n\n        var sectionIndex = 0,\n            numberOfSections = sections.length;\n\n        while (sectionIndex < numberOfSections) {\n          var section = piece[sections[sectionIndex]]; // If it has a DataArray in it\n\n          if (section && section.DataArray) {\n            // Depending on the number of DataArrays\n            if (Object.prototype.toString.call(section.DataArray) === '[object Array]') {\n              var arr = section.DataArray;\n            } else {\n              var arr = [section.DataArray];\n            }\n\n            var dataArrayIndex = 0,\n                numberOfDataArrays = arr.length;\n\n            while (dataArrayIndex < numberOfDataArrays) {\n              // Parse the DataArray\n              if ('#text' in arr[dataArrayIndex] && arr[dataArrayIndex]['#text'].length > 0) {\n                arr[dataArrayIndex].text = parseDataArray(arr[dataArrayIndex], compressed);\n              }\n\n              dataArrayIndex++;\n            }\n\n            switch (sections[sectionIndex]) {\n              // if iti is point data\n              case 'PointData':\n                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n                var normalsName = section.attributes.Normals;\n\n                if (numberOfPoints > 0) {\n                  for (var i = 0, len = arr.length; i < len; i++) {\n                    if (normalsName === arr[i].attributes.Name) {\n                      var components = arr[i].attributes.NumberOfComponents;\n                      normals = new Float32Array(numberOfPoints * components);\n                      normals.set(arr[i].text, 0);\n                    }\n                  }\n                }\n\n                break;\n              // if it is points\n\n              case 'Points':\n                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n\n                if (numberOfPoints > 0) {\n                  var components = section.DataArray.attributes.NumberOfComponents;\n                  points = new Float32Array(numberOfPoints * components);\n                  points.set(section.DataArray.text, 0);\n                }\n\n                break;\n              // if it is strips\n\n              case 'Strips':\n                var numberOfStrips = parseInt(piece.attributes.NumberOfStrips);\n\n                if (numberOfStrips > 0) {\n                  var connectivity = new Int32Array(section.DataArray[0].text.length);\n                  var offset = new Int32Array(section.DataArray[1].text.length);\n                  connectivity.set(section.DataArray[0].text, 0);\n                  offset.set(section.DataArray[1].text, 0);\n                  var size = numberOfStrips + connectivity.length;\n                  indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n                  var indicesIndex = 0;\n\n                  for (var i = 0, len = numberOfStrips; i < len; i++) {\n                    var strip = [];\n\n                    for (var s = 0, len1 = offset[i], len0 = 0; s < len1 - len0; s++) {\n                      strip.push(connectivity[s]);\n                      if (i > 0) len0 = offset[i - 1];\n                    }\n\n                    for (var j = 0, len1 = offset[i], len0 = 0; j < len1 - len0 - 2; j++) {\n                      if (j % 2) {\n                        indices[indicesIndex++] = strip[j];\n                        indices[indicesIndex++] = strip[j + 2];\n                        indices[indicesIndex++] = strip[j + 1];\n                      } else {\n                        indices[indicesIndex++] = strip[j];\n                        indices[indicesIndex++] = strip[j + 1];\n                        indices[indicesIndex++] = strip[j + 2];\n                      }\n\n                      if (i > 0) len0 = offset[i - 1];\n                    }\n                  }\n                }\n\n                break;\n              // if it is polys\n\n              case 'Polys':\n                var numberOfPolys = parseInt(piece.attributes.NumberOfPolys);\n\n                if (numberOfPolys > 0) {\n                  var connectivity = new Int32Array(section.DataArray[0].text.length);\n                  var offset = new Int32Array(section.DataArray[1].text.length);\n                  connectivity.set(section.DataArray[0].text, 0);\n                  offset.set(section.DataArray[1].text, 0);\n                  var size = numberOfPolys + connectivity.length;\n                  indices = new Uint32Array(3 * size - 9 * numberOfPolys);\n                  var indicesIndex = 0,\n                      connectivityIndex = 0;\n                  var i = 0,\n                      len = numberOfPolys,\n                      len0 = 0;\n\n                  while (i < len) {\n                    var poly = [];\n                    var s = 0,\n                        len1 = offset[i];\n\n                    while (s < len1 - len0) {\n                      poly.push(connectivity[connectivityIndex++]);\n                      s++;\n                    }\n\n                    var j = 1;\n\n                    while (j < len1 - len0 - 1) {\n                      indices[indicesIndex++] = poly[0];\n                      indices[indicesIndex++] = poly[j];\n                      indices[indicesIndex++] = poly[j + 1];\n                      j++;\n                    }\n\n                    i++;\n                    len0 = offset[i - 1];\n                  }\n                }\n\n                break;\n            }\n          }\n\n          sectionIndex++;\n        }\n\n        var geometry = new BufferGeometry();\n        geometry.setIndex(new BufferAttribute(indices, 1));\n        geometry.setAttribute('position', new BufferAttribute(points, 3));\n\n        if (normals.length === points.length) {\n          geometry.setAttribute('normal', new BufferAttribute(normals, 3));\n        }\n\n        return geometry;\n      } else {\n        throw new Error('Unsupported DATASET type');\n      }\n    } // get the 5 first lines of the files to check if there is the key word binary\n\n\n    var meta = LoaderUtils.decodeText(new Uint8Array(data, 0, 250)).split('\\n');\n\n    if (meta[0].indexOf('xml') !== -1) {\n      return parseXML(LoaderUtils.decodeText(data));\n    } else if (meta[2].includes('ASCII')) {\n      return parseASCII(LoaderUtils.decodeText(data));\n    } else {\n      return parseBinary(data);\n    }\n  }\n\n}\n\nexport { VTKLoader };","map":{"version":3,"names":["Loader","FileLoader","LoaderUtils","BufferGeometry","Float32BufferAttribute","BufferAttribute","unzlibSync","VTKLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","parseASCII","indices","positions","colors","normals","result","patWord","pat3Floats","patConnectivity","patPOINTS","patPOLYGONS","patTRIANGLE_STRIPS","patPOINT_DATA","patCELL_DATA","patCOLOR_SCALARS","patNORMALS","inPointsSection","inPolygonsSection","inTriangleStripSection","inPointDataSection","inCellDataSection","inColorSection","inNormalsSection","lines","split","i","line","trim","indexOf","dataset","Error","exec","x","parseFloat","y","z","push","numVertices","parseInt","inds","i0","i1","i2","k","j","r","g","b","nx","ny","nz","geometry","setIndex","setAttribute","length","toNonIndexed","numTriangles","attributes","position","count","newColors","parseBinary","pointIndex","numberOfPoints","s","buffer","Uint8Array","dataView","DataView","points","index","findString","start","c","String","fromCharCode","end","next","parsedString","join","state","Float32Array","getFloat32","numberOfStrips","size","Uint32Array","indicesIndex","indexCount","getInt32","strip","byteLength","Float32Concat","first","second","firstLength","set","Int32Concat","Int32Array","parseXML","stringFile","xmlToJson","xml","obj","nodeType","attribute","item","nodeName","nodeValue","hasChildNodes","childNodes","tmp","old","Base64toByteArray","b64","Arr","Array","lookup","revLookup","code","len","charCodeAt","l","placeHolders","arr","L","parseDataArray","ele","compressed","numBytes","json","header_type","format","rawData","content","byteData","blocks","cSizeStart","headerSize","padding","dataOffsets","currentOffset","type","txt","currentBlockSize","slice","filter","el","idx","dom","window","DOMParser","parseFromString","ActiveXObject","async","loadXML","parseError","reason","srcText","doc","documentElement","PolyData","piece","Piece","hasOwnProperty","sections","sectionIndex","numberOfSections","section","DataArray","Object","prototype","toString","call","dataArrayIndex","numberOfDataArrays","NumberOfPoints","normalsName","Normals","Name","components","NumberOfComponents","NumberOfStrips","connectivity","offset","len1","len0","numberOfPolys","NumberOfPolys","connectivityIndex","poly","meta","decodeText","includes"],"sources":["/home/odin/Desktop/THP☠/Developpeur/Final_Project/pokeland/node_modules/three-stdlib/loaders/VTKLoader.js"],"sourcesContent":["import { Loader, FileLoader, LoaderUtils, BufferGeometry, Float32BufferAttribute, BufferAttribute } from 'three';\nimport { unzlibSync } from 'fflate';\n\nclass VTKLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    function parseASCII(data) {\n      // connectivity of the triangles\n      var indices = []; // triangles vertices\n\n      var positions = []; // red, green, blue colors in the range 0 to 1\n\n      var colors = []; // normal vector, one per vertex\n\n      var normals = [];\n      var result; // pattern for detecting the end of a number sequence\n\n      var patWord = /^[^\\d.\\s-]+/; // pattern for reading vertices, 3 floats or integers\n\n      var pat3Floats = /(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)/g; // pattern for connectivity, an integer followed by any number of ints\n      // the first integer is the number of polygon nodes\n\n      var patConnectivity = /^(\\d+)\\s+([\\s\\d]*)/; // indicates start of vertex data section\n\n      var patPOINTS = /^POINTS /; // indicates start of polygon connectivity section\n\n      var patPOLYGONS = /^POLYGONS /; // indicates start of triangle strips section\n\n      var patTRIANGLE_STRIPS = /^TRIANGLE_STRIPS /; // POINT_DATA number_of_values\n\n      var patPOINT_DATA = /^POINT_DATA[ ]+(\\d+)/; // CELL_DATA number_of_polys\n\n      var patCELL_DATA = /^CELL_DATA[ ]+(\\d+)/; // Start of color section\n\n      var patCOLOR_SCALARS = /^COLOR_SCALARS[ ]+(\\w+)[ ]+3/; // NORMALS Normals float\n\n      var patNORMALS = /^NORMALS[ ]+(\\w+)[ ]+(\\w+)/;\n      var inPointsSection = false;\n      var inPolygonsSection = false;\n      var inTriangleStripSection = false;\n      var inPointDataSection = false;\n      var inCellDataSection = false;\n      var inColorSection = false;\n      var inNormalsSection = false;\n      var lines = data.split('\\n');\n\n      for (var i in lines) {\n        var line = lines[i].trim();\n\n        if (line.indexOf('DATASET') === 0) {\n          var dataset = line.split(' ')[1];\n          if (dataset !== 'POLYDATA') throw new Error('Unsupported DATASET type: ' + dataset);\n        } else if (inPointsSection) {\n          // get the vertices\n          while ((result = pat3Floats.exec(line)) !== null) {\n            if (patWord.exec(line) !== null) break;\n            var x = parseFloat(result[1]);\n            var y = parseFloat(result[2]);\n            var z = parseFloat(result[3]);\n            positions.push(x, y, z);\n          }\n        } else if (inPolygonsSection) {\n          if ((result = patConnectivity.exec(line)) !== null) {\n            // numVertices i0 i1 i2 ...\n            var numVertices = parseInt(result[1]);\n            var inds = result[2].split(/\\s+/);\n\n            if (numVertices >= 3) {\n              var i0 = parseInt(inds[0]);\n              var i1, i2;\n              var k = 1; // split the polygon in numVertices - 2 triangles\n\n              for (var j = 0; j < numVertices - 2; ++j) {\n                i1 = parseInt(inds[k]);\n                i2 = parseInt(inds[k + 1]);\n                indices.push(i0, i1, i2);\n                k++;\n              }\n            }\n          }\n        } else if (inTriangleStripSection) {\n          if ((result = patConnectivity.exec(line)) !== null) {\n            // numVertices i0 i1 i2 ...\n            var numVertices = parseInt(result[1]);\n            var inds = result[2].split(/\\s+/);\n\n            if (numVertices >= 3) {\n              var i0, i1, i2; // split the polygon in numVertices - 2 triangles\n\n              for (var j = 0; j < numVertices - 2; j++) {\n                if (j % 2 === 1) {\n                  i0 = parseInt(inds[j]);\n                  i1 = parseInt(inds[j + 2]);\n                  i2 = parseInt(inds[j + 1]);\n                  indices.push(i0, i1, i2);\n                } else {\n                  i0 = parseInt(inds[j]);\n                  i1 = parseInt(inds[j + 1]);\n                  i2 = parseInt(inds[j + 2]);\n                  indices.push(i0, i1, i2);\n                }\n              }\n            }\n          }\n        } else if (inPointDataSection || inCellDataSection) {\n          if (inColorSection) {\n            // Get the colors\n            while ((result = pat3Floats.exec(line)) !== null) {\n              if (patWord.exec(line) !== null) break;\n              var r = parseFloat(result[1]);\n              var g = parseFloat(result[2]);\n              var b = parseFloat(result[3]);\n              colors.push(r, g, b);\n            }\n          } else if (inNormalsSection) {\n            // Get the normal vectors\n            while ((result = pat3Floats.exec(line)) !== null) {\n              if (patWord.exec(line) !== null) break;\n              var nx = parseFloat(result[1]);\n              var ny = parseFloat(result[2]);\n              var nz = parseFloat(result[3]);\n              normals.push(nx, ny, nz);\n            }\n          }\n        }\n\n        if (patPOLYGONS.exec(line) !== null) {\n          inPolygonsSection = true;\n          inPointsSection = false;\n          inTriangleStripSection = false;\n        } else if (patPOINTS.exec(line) !== null) {\n          inPolygonsSection = false;\n          inPointsSection = true;\n          inTriangleStripSection = false;\n        } else if (patTRIANGLE_STRIPS.exec(line) !== null) {\n          inPolygonsSection = false;\n          inPointsSection = false;\n          inTriangleStripSection = true;\n        } else if (patPOINT_DATA.exec(line) !== null) {\n          inPointDataSection = true;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        } else if (patCELL_DATA.exec(line) !== null) {\n          inCellDataSection = true;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        } else if (patCOLOR_SCALARS.exec(line) !== null) {\n          inColorSection = true;\n          inNormalsSection = false;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        } else if (patNORMALS.exec(line) !== null) {\n          inNormalsSection = true;\n          inColorSection = false;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        }\n      }\n\n      var geometry = new BufferGeometry();\n      geometry.setIndex(indices);\n      geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\n      if (normals.length === positions.length) {\n        geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      }\n\n      if (colors.length !== indices.length) {\n        // stagger\n        if (colors.length === positions.length) {\n          geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n        }\n      } else {\n        // cell\n        geometry = geometry.toNonIndexed();\n        var numTriangles = geometry.attributes.position.count / 3;\n\n        if (colors.length === numTriangles * 3) {\n          var newColors = [];\n\n          for (var i = 0; i < numTriangles; i++) {\n            var r = colors[3 * i + 0];\n            var g = colors[3 * i + 1];\n            var b = colors[3 * i + 2];\n            newColors.push(r, g, b);\n            newColors.push(r, g, b);\n            newColors.push(r, g, b);\n          }\n\n          geometry.setAttribute('color', new Float32BufferAttribute(newColors, 3));\n        }\n      }\n\n      return geometry;\n    }\n\n    function parseBinary(data) {\n      var count, pointIndex, i, numberOfPoints, s;\n      var buffer = new Uint8Array(data);\n      var dataView = new DataView(data); // Points and normals, by default, are empty\n\n      var points = [];\n      var normals = [];\n      var indices = []; // Going to make a big array of strings\n      var index = 0;\n\n      function findString(buffer, start) {\n        var index = start;\n        var c = buffer[index];\n        var s = [];\n\n        while (c !== 10) {\n          s.push(String.fromCharCode(c));\n          index++;\n          c = buffer[index];\n        }\n\n        return {\n          start: start,\n          end: index,\n          next: index + 1,\n          parsedString: s.join('')\n        };\n      }\n\n      var state, line;\n\n      while (true) {\n        // Get a string\n        state = findString(buffer, index);\n        line = state.parsedString;\n\n        if (line.indexOf('DATASET') === 0) {\n          var dataset = line.split(' ')[1];\n          if (dataset !== 'POLYDATA') throw new Error('Unsupported DATASET type: ' + dataset);\n        } else if (line.indexOf('POINTS') === 0) {\n\n          numberOfPoints = parseInt(line.split(' ')[1], 10); // Each point is 3 4-byte floats\n\n          count = numberOfPoints * 4 * 3;\n          points = new Float32Array(numberOfPoints * 3);\n          pointIndex = state.next;\n\n          for (i = 0; i < numberOfPoints; i++) {\n            points[3 * i] = dataView.getFloat32(pointIndex, false);\n            points[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n            points[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n            pointIndex = pointIndex + 12;\n          } // increment our next pointer\n\n\n          state.next = state.next + count + 1;\n        } else if (line.indexOf('TRIANGLE_STRIPS') === 0) {\n          var numberOfStrips = parseInt(line.split(' ')[1], 10);\n          var size = parseInt(line.split(' ')[2], 10); // 4 byte integers\n\n          count = size * 4;\n          indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n          var indicesIndex = 0;\n          pointIndex = state.next;\n\n          for (i = 0; i < numberOfStrips; i++) {\n            // For each strip, read the first value, then record that many more points\n            var indexCount = dataView.getInt32(pointIndex, false);\n            var strip = [];\n            pointIndex += 4;\n\n            for (s = 0; s < indexCount; s++) {\n              strip.push(dataView.getInt32(pointIndex, false));\n              pointIndex += 4;\n            } // retrieves the n-2 triangles from the triangle strip\n\n\n            for (var j = 0; j < indexCount - 2; j++) {\n              if (j % 2) {\n                indices[indicesIndex++] = strip[j];\n                indices[indicesIndex++] = strip[j + 2];\n                indices[indicesIndex++] = strip[j + 1];\n              } else {\n                indices[indicesIndex++] = strip[j];\n                indices[indicesIndex++] = strip[j + 1];\n                indices[indicesIndex++] = strip[j + 2];\n              }\n            }\n          } // increment our next pointer\n\n\n          state.next = state.next + count + 1;\n        } else if (line.indexOf('POLYGONS') === 0) {\n          var numberOfStrips = parseInt(line.split(' ')[1], 10);\n          var size = parseInt(line.split(' ')[2], 10); // 4 byte integers\n\n          count = size * 4;\n          indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n          var indicesIndex = 0;\n          pointIndex = state.next;\n\n          for (i = 0; i < numberOfStrips; i++) {\n            // For each strip, read the first value, then record that many more points\n            var indexCount = dataView.getInt32(pointIndex, false);\n            var strip = [];\n            pointIndex += 4;\n\n            for (s = 0; s < indexCount; s++) {\n              strip.push(dataView.getInt32(pointIndex, false));\n              pointIndex += 4;\n            } // divide the polygon in n-2 triangle\n\n\n            for (var j = 1; j < indexCount - 1; j++) {\n              indices[indicesIndex++] = strip[0];\n              indices[indicesIndex++] = strip[j];\n              indices[indicesIndex++] = strip[j + 1];\n            }\n          } // increment our next pointer\n\n\n          state.next = state.next + count + 1;\n        } else if (line.indexOf('POINT_DATA') === 0) {\n          numberOfPoints = parseInt(line.split(' ')[1], 10); // Grab the next line\n\n          state = findString(buffer, state.next); // Now grab the binary data\n\n          count = numberOfPoints * 4 * 3;\n          normals = new Float32Array(numberOfPoints * 3);\n          pointIndex = state.next;\n\n          for (i = 0; i < numberOfPoints; i++) {\n            normals[3 * i] = dataView.getFloat32(pointIndex, false);\n            normals[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n            normals[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n            pointIndex += 12;\n          } // Increment past our data\n\n\n          state.next = state.next + count;\n        } // Increment index\n\n\n        index = state.next;\n\n        if (index >= buffer.byteLength) {\n          break;\n        }\n      }\n\n      var geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(indices, 1));\n      geometry.setAttribute('position', new BufferAttribute(points, 3));\n\n      if (normals.length === points.length) {\n        geometry.setAttribute('normal', new BufferAttribute(normals, 3));\n      }\n\n      return geometry;\n    }\n\n    function Float32Concat(first, second) {\n      const firstLength = first.length,\n            result = new Float32Array(firstLength + second.length);\n      result.set(first);\n      result.set(second, firstLength);\n      return result;\n    }\n\n    function Int32Concat(first, second) {\n      var firstLength = first.length,\n          result = new Int32Array(firstLength + second.length);\n      result.set(first);\n      result.set(second, firstLength);\n      return result;\n    }\n\n    function parseXML(stringFile) {\n      // Changes XML to JSON, based on https://davidwalsh.name/convert-xml-json\n      function xmlToJson(xml) {\n        // Create the return object\n        var obj = {};\n\n        if (xml.nodeType === 1) {\n          // element\n          // do attributes\n          if (xml.attributes) {\n            if (xml.attributes.length > 0) {\n              obj['attributes'] = {};\n\n              for (var j = 0; j < xml.attributes.length; j++) {\n                var attribute = xml.attributes.item(j);\n                obj['attributes'][attribute.nodeName] = attribute.nodeValue.trim();\n              }\n            }\n          }\n        } else if (xml.nodeType === 3) {\n          // text\n          obj = xml.nodeValue.trim();\n        } // do children\n\n\n        if (xml.hasChildNodes()) {\n          for (var i = 0; i < xml.childNodes.length; i++) {\n            var item = xml.childNodes.item(i);\n            var nodeName = item.nodeName;\n\n            if (typeof obj[nodeName] === 'undefined') {\n              var tmp = xmlToJson(item);\n              if (tmp !== '') obj[nodeName] = tmp;\n            } else {\n              if (typeof obj[nodeName].push === 'undefined') {\n                var old = obj[nodeName];\n                obj[nodeName] = [old];\n              }\n\n              var tmp = xmlToJson(item);\n              if (tmp !== '') obj[nodeName].push(tmp);\n            }\n          }\n        }\n\n        return obj;\n      } // Taken from Base64-js\n\n\n      function Base64toByteArray(b64) {\n        var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n        var i;\n        var lookup = [];\n        var revLookup = [];\n        var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n        var len = code.length;\n\n        for (i = 0; i < len; i++) {\n          lookup[i] = code[i];\n        }\n\n        for (i = 0; i < len; ++i) {\n          revLookup[code.charCodeAt(i)] = i;\n        }\n\n        revLookup['-'.charCodeAt(0)] = 62;\n        revLookup['_'.charCodeAt(0)] = 63;\n        var j, l, tmp, placeHolders, arr;\n        var len = b64.length;\n\n        if (len % 4 > 0) {\n          throw new Error('Invalid string. Length must be a multiple of 4');\n        }\n\n        placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;\n        arr = new Arr(len * 3 / 4 - placeHolders);\n        l = placeHolders > 0 ? len - 4 : len;\n        var L = 0;\n\n        for (i = 0, j = 0; i < l; i += 4, j += 3) {\n          tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n          arr[L++] = (tmp & 0xff0000) >> 16;\n          arr[L++] = (tmp & 0xff00) >> 8;\n          arr[L++] = tmp & 0xff;\n        }\n\n        if (placeHolders === 2) {\n          tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n          arr[L++] = tmp & 0xff;\n        } else if (placeHolders === 1) {\n          tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n          arr[L++] = tmp >> 8 & 0xff;\n          arr[L++] = tmp & 0xff;\n        }\n\n        return arr;\n      }\n\n      function parseDataArray(ele, compressed) {\n        var numBytes = 0;\n\n        if (json.attributes.header_type === 'UInt64') {\n          numBytes = 8;\n        } else if (json.attributes.header_type === 'UInt32') {\n          numBytes = 4;\n        } // Check the format\n\n\n        if (ele.attributes.format === 'binary' && compressed) {\n          var rawData, content, byteData, blocks, cSizeStart, headerSize, padding, dataOffsets, currentOffset;\n\n          if (ele.attributes.type === 'Float32') {\n            var txt = new Float32Array();\n          } else if (ele.attributes.type === 'Int64') {\n            var txt = new Int32Array();\n          } // VTP data with the header has the following structure:\n          // [#blocks][#u-size][#p-size][#c-size-1][#c-size-2]...[#c-size-#blocks][DATA]\n          //\n          // Each token is an integer value whose type is specified by \"header_type\" at the top of the file (UInt32 if no type specified). The token meanings are:\n          // [#blocks] = Number of blocks\n          // [#u-size] = Block size before compression\n          // [#p-size] = Size of last partial block (zero if it not needed)\n          // [#c-size-i] = Size in bytes of block i after compression\n          //\n          // The [DATA] portion stores contiguously every block appended together. The offset from the beginning of the data section to the beginning of a block is\n          // computed by summing the compressed block sizes from preceding blocks according to the header.\n\n\n          rawData = ele['#text'];\n          byteData = Base64toByteArray(rawData);\n          blocks = byteData[0];\n\n          for (var i = 1; i < numBytes - 1; i++) {\n            blocks = blocks | byteData[i] << i * numBytes;\n          }\n\n          headerSize = (blocks + 3) * numBytes;\n          padding = headerSize % 3 > 0 ? 3 - headerSize % 3 : 0;\n          headerSize = headerSize + padding;\n          dataOffsets = [];\n          currentOffset = headerSize;\n          dataOffsets.push(currentOffset); // Get the blocks sizes after the compression.\n          // There are three blocks before c-size-i, so we skip 3*numBytes\n\n          cSizeStart = 3 * numBytes;\n\n          for (var i = 0; i < blocks; i++) {\n            var currentBlockSize = byteData[i * numBytes + cSizeStart];\n\n            for (var j = 1; j < numBytes - 1; j++) {\n              // Each data point consists of 8 bytes regardless of the header type\n              currentBlockSize = currentBlockSize | byteData[i * numBytes + cSizeStart + j] << j * 8;\n            }\n\n            currentOffset = currentOffset + currentBlockSize;\n            dataOffsets.push(currentOffset);\n          }\n\n          for (var i = 0; i < dataOffsets.length - 1; i++) {\n            var data = unzlibSync(byteData.slice(dataOffsets[i], dataOffsets[i + 1])); // eslint-disable-line no-undef\n\n            content = data.buffer;\n\n            if (ele.attributes.type === 'Float32') {\n              content = new Float32Array(content);\n              txt = Float32Concat(txt, content);\n            } else if (ele.attributes.type === 'Int64') {\n              content = new Int32Array(content);\n              txt = Int32Concat(txt, content);\n            }\n          }\n\n          delete ele['#text'];\n\n          if (ele.attributes.type === 'Int64') {\n            if (ele.attributes.format === 'binary') {\n              txt = txt.filter(function (el, idx) {\n                if (idx % 2 !== 1) return true;\n              });\n            }\n          }\n        } else {\n          if (ele.attributes.format === 'binary' && !compressed) {\n            var content = Base64toByteArray(ele['#text']); //  VTP data for the uncompressed case has the following structure:\n            // [#bytes][DATA]\n            // where \"[#bytes]\" is an integer value specifying the number of bytes in the block of data following it.\n\n            content = content.slice(numBytes).buffer;\n          } else {\n            if (ele['#text']) {\n              var content = ele['#text'].split(/\\s+/).filter(function (el) {\n                if (el !== '') return el;\n              });\n            } else {\n              var content = new Int32Array(0).buffer;\n            }\n          }\n\n          delete ele['#text']; // Get the content and optimize it\n\n          if (ele.attributes.type === 'Float32') {\n            var txt = new Float32Array(content);\n          } else if (ele.attributes.type === 'Int32') {\n            var txt = new Int32Array(content);\n          } else if (ele.attributes.type === 'Int64') {\n            var txt = new Int32Array(content);\n\n            if (ele.attributes.format === 'binary') {\n              txt = txt.filter(function (el, idx) {\n                if (idx % 2 !== 1) return true;\n              });\n            }\n          }\n        } // endif ( ele.attributes.format === 'binary' && compressed )\n\n\n        return txt;\n      } // Main part\n      // Get Dom\n\n\n      var dom = null;\n\n      if (window.DOMParser) {\n        try {\n          dom = new DOMParser().parseFromString(stringFile, 'text/xml');\n        } catch (e) {\n          dom = null;\n        }\n      } else if (window.ActiveXObject) {\n        try {\n          dom = new ActiveXObject('Microsoft.XMLDOM'); // eslint-disable-line no-undef\n\n          dom.async = false;\n\n          if (!dom.loadXML()) {\n            throw new Error(dom.parseError.reason + dom.parseError.srcText);\n          }\n        } catch (e) {\n          dom = null;\n        }\n      } else {\n        throw new Error('Cannot parse xml string!');\n      } // Get the doc\n\n\n      var doc = dom.documentElement; // Convert to json\n\n      var json = xmlToJson(doc);\n      var points = [];\n      var normals = [];\n      var indices = [];\n\n      if (json.PolyData) {\n        var piece = json.PolyData.Piece;\n        var compressed = json.attributes.hasOwnProperty('compressor'); // Can be optimized\n        // Loop through the sections\n\n        var sections = ['PointData', 'Points', 'Strips', 'Polys']; // +['CellData', 'Verts', 'Lines'];\n\n        var sectionIndex = 0,\n            numberOfSections = sections.length;\n\n        while (sectionIndex < numberOfSections) {\n          var section = piece[sections[sectionIndex]]; // If it has a DataArray in it\n\n          if (section && section.DataArray) {\n            // Depending on the number of DataArrays\n            if (Object.prototype.toString.call(section.DataArray) === '[object Array]') {\n              var arr = section.DataArray;\n            } else {\n              var arr = [section.DataArray];\n            }\n\n            var dataArrayIndex = 0,\n                numberOfDataArrays = arr.length;\n\n            while (dataArrayIndex < numberOfDataArrays) {\n              // Parse the DataArray\n              if ('#text' in arr[dataArrayIndex] && arr[dataArrayIndex]['#text'].length > 0) {\n                arr[dataArrayIndex].text = parseDataArray(arr[dataArrayIndex], compressed);\n              }\n\n              dataArrayIndex++;\n            }\n\n            switch (sections[sectionIndex]) {\n              // if iti is point data\n              case 'PointData':\n                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n                var normalsName = section.attributes.Normals;\n\n                if (numberOfPoints > 0) {\n                  for (var i = 0, len = arr.length; i < len; i++) {\n                    if (normalsName === arr[i].attributes.Name) {\n                      var components = arr[i].attributes.NumberOfComponents;\n                      normals = new Float32Array(numberOfPoints * components);\n                      normals.set(arr[i].text, 0);\n                    }\n                  }\n                }\n\n                break;\n              // if it is points\n\n              case 'Points':\n                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n\n                if (numberOfPoints > 0) {\n                  var components = section.DataArray.attributes.NumberOfComponents;\n                  points = new Float32Array(numberOfPoints * components);\n                  points.set(section.DataArray.text, 0);\n                }\n\n                break;\n              // if it is strips\n\n              case 'Strips':\n                var numberOfStrips = parseInt(piece.attributes.NumberOfStrips);\n\n                if (numberOfStrips > 0) {\n                  var connectivity = new Int32Array(section.DataArray[0].text.length);\n                  var offset = new Int32Array(section.DataArray[1].text.length);\n                  connectivity.set(section.DataArray[0].text, 0);\n                  offset.set(section.DataArray[1].text, 0);\n                  var size = numberOfStrips + connectivity.length;\n                  indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n                  var indicesIndex = 0;\n\n                  for (var i = 0, len = numberOfStrips; i < len; i++) {\n                    var strip = [];\n\n                    for (var s = 0, len1 = offset[i], len0 = 0; s < len1 - len0; s++) {\n                      strip.push(connectivity[s]);\n                      if (i > 0) len0 = offset[i - 1];\n                    }\n\n                    for (var j = 0, len1 = offset[i], len0 = 0; j < len1 - len0 - 2; j++) {\n                      if (j % 2) {\n                        indices[indicesIndex++] = strip[j];\n                        indices[indicesIndex++] = strip[j + 2];\n                        indices[indicesIndex++] = strip[j + 1];\n                      } else {\n                        indices[indicesIndex++] = strip[j];\n                        indices[indicesIndex++] = strip[j + 1];\n                        indices[indicesIndex++] = strip[j + 2];\n                      }\n\n                      if (i > 0) len0 = offset[i - 1];\n                    }\n                  }\n                }\n\n                break;\n              // if it is polys\n\n              case 'Polys':\n                var numberOfPolys = parseInt(piece.attributes.NumberOfPolys);\n\n                if (numberOfPolys > 0) {\n                  var connectivity = new Int32Array(section.DataArray[0].text.length);\n                  var offset = new Int32Array(section.DataArray[1].text.length);\n                  connectivity.set(section.DataArray[0].text, 0);\n                  offset.set(section.DataArray[1].text, 0);\n                  var size = numberOfPolys + connectivity.length;\n                  indices = new Uint32Array(3 * size - 9 * numberOfPolys);\n                  var indicesIndex = 0,\n                      connectivityIndex = 0;\n                  var i = 0,\n                      len = numberOfPolys,\n                      len0 = 0;\n\n                  while (i < len) {\n                    var poly = [];\n                    var s = 0,\n                        len1 = offset[i];\n\n                    while (s < len1 - len0) {\n                      poly.push(connectivity[connectivityIndex++]);\n                      s++;\n                    }\n\n                    var j = 1;\n\n                    while (j < len1 - len0 - 1) {\n                      indices[indicesIndex++] = poly[0];\n                      indices[indicesIndex++] = poly[j];\n                      indices[indicesIndex++] = poly[j + 1];\n                      j++;\n                    }\n\n                    i++;\n                    len0 = offset[i - 1];\n                  }\n                }\n\n                break;\n            }\n          }\n\n          sectionIndex++;\n        }\n\n        var geometry = new BufferGeometry();\n        geometry.setIndex(new BufferAttribute(indices, 1));\n        geometry.setAttribute('position', new BufferAttribute(points, 3));\n\n        if (normals.length === points.length) {\n          geometry.setAttribute('normal', new BufferAttribute(normals, 3));\n        }\n\n        return geometry;\n      } else {\n        throw new Error('Unsupported DATASET type');\n      }\n    } // get the 5 first lines of the files to check if there is the key word binary\n\n\n    var meta = LoaderUtils.decodeText(new Uint8Array(data, 0, 250)).split('\\n');\n\n    if (meta[0].indexOf('xml') !== -1) {\n      return parseXML(LoaderUtils.decodeText(data));\n    } else if (meta[2].includes('ASCII')) {\n      return parseASCII(LoaderUtils.decodeText(data));\n    } else {\n      return parseBinary(data);\n    }\n  }\n\n}\n\nexport { VTKLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}