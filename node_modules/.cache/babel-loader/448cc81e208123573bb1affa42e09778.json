{"ast":null,"code":"import { Vector3, Loader, FileLoader, Group, BufferGeometry, Float32BufferAttribute, LineBasicMaterial, Material, PointsMaterial, MeshPhongMaterial, LineSegments, Points, Mesh } from 'three';\nconst _object_pattern = /^[og]\\s*(.+)?/; // mtllib file_reference\n\nconst _material_library_pattern = /^mtllib /; // usemtl material_name\n\nconst _material_use_pattern = /^usemtl /; // usemap map_name\n\nconst _map_use_pattern = /^usemap /;\n\nconst _vA = new Vector3();\n\nconst _vB = new Vector3();\n\nconst _vC = new Vector3();\n\nconst _ab = new Vector3();\n\nconst _cb = new Vector3();\n\nfunction ParserState() {\n  const state = {\n    objects: [],\n    object: {},\n    vertices: [],\n    normals: [],\n    colors: [],\n    uvs: [],\n    materials: {},\n    materialLibraries: [],\n    startObject: function (name, fromDeclaration) {\n      // If the current object (initial from reset) is not from a g/o declaration in the parsed\n      // file. We need to use it for the first parsed g/o to keep things in sync.\n      if (this.object && this.object.fromDeclaration === false) {\n        this.object.name = name;\n        this.object.fromDeclaration = fromDeclaration !== false;\n        return;\n      }\n\n      const previousMaterial = this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined;\n\n      if (this.object && typeof this.object._finalize === 'function') {\n        this.object._finalize(true);\n      }\n\n      this.object = {\n        name: name || '',\n        fromDeclaration: fromDeclaration !== false,\n        geometry: {\n          vertices: [],\n          normals: [],\n          colors: [],\n          uvs: [],\n          hasUVIndices: false\n        },\n        materials: [],\n        smooth: true,\n        startMaterial: function (name, libraries) {\n          const previous = this._finalize(false); // New usemtl declaration overwrites an inherited material, except if faces were declared\n          // after the material, then it must be preserved for proper MultiMaterial continuation.\n\n\n          if (previous && (previous.inherited || previous.groupCount <= 0)) {\n            this.materials.splice(previous.index, 1);\n          }\n\n          const material = {\n            index: this.materials.length,\n            name: name || '',\n            mtllib: Array.isArray(libraries) && libraries.length > 0 ? libraries[libraries.length - 1] : '',\n            smooth: previous !== undefined ? previous.smooth : this.smooth,\n            groupStart: previous !== undefined ? previous.groupEnd : 0,\n            groupEnd: -1,\n            groupCount: -1,\n            inherited: false,\n            clone: function (index) {\n              const cloned = {\n                index: typeof index === 'number' ? index : this.index,\n                name: this.name,\n                mtllib: this.mtllib,\n                smooth: this.smooth,\n                groupStart: 0,\n                groupEnd: -1,\n                groupCount: -1,\n                inherited: false\n              };\n              cloned.clone = this.clone.bind(cloned);\n              return cloned;\n            }\n          };\n          this.materials.push(material);\n          return material;\n        },\n        currentMaterial: function () {\n          if (this.materials.length > 0) {\n            return this.materials[this.materials.length - 1];\n          }\n\n          return undefined;\n        },\n        _finalize: function (end) {\n          const lastMultiMaterial = this.currentMaterial();\n\n          if (lastMultiMaterial && lastMultiMaterial.groupEnd === -1) {\n            lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n            lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n            lastMultiMaterial.inherited = false;\n          } // Ignore objects tail materials if no face declarations followed them before a new o/g started.\n\n\n          if (end && this.materials.length > 1) {\n            for (let mi = this.materials.length - 1; mi >= 0; mi--) {\n              if (this.materials[mi].groupCount <= 0) {\n                this.materials.splice(mi, 1);\n              }\n            }\n          } // Guarantee at least one empty material, this makes the creation later more straight forward.\n\n\n          if (end && this.materials.length === 0) {\n            this.materials.push({\n              name: '',\n              smooth: this.smooth\n            });\n          }\n\n          return lastMultiMaterial;\n        }\n      }; // Inherit previous objects material.\n      // Spec tells us that a declared material must be set to all objects until a new material is declared.\n      // If a usemtl declaration is encountered while this new object is being parsed, it will\n      // overwrite the inherited material. Exception being that there was already face declarations\n      // to the inherited material, then it will be preserved for proper MultiMaterial continuation.\n\n      if (previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function') {\n        const declared = previousMaterial.clone(0);\n        declared.inherited = true;\n        this.object.materials.push(declared);\n      }\n\n      this.objects.push(this.object);\n    },\n    finalize: function () {\n      if (this.object && typeof this.object._finalize === 'function') {\n        this.object._finalize(true);\n      }\n    },\n    parseVertexIndex: function (value, len) {\n      const index = parseInt(value, 10);\n      return (index >= 0 ? index - 1 : index + len / 3) * 3;\n    },\n    parseNormalIndex: function (value, len) {\n      const index = parseInt(value, 10);\n      return (index >= 0 ? index - 1 : index + len / 3) * 3;\n    },\n    parseUVIndex: function (value, len) {\n      const index = parseInt(value, 10);\n      return (index >= 0 ? index - 1 : index + len / 2) * 2;\n    },\n    addVertex: function (a, b, c) {\n      const src = this.vertices;\n      const dst = this.object.geometry.vertices;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      dst.push(src[b + 0], src[b + 1], src[b + 2]);\n      dst.push(src[c + 0], src[c + 1], src[c + 2]);\n    },\n    addVertexPoint: function (a) {\n      const src = this.vertices;\n      const dst = this.object.geometry.vertices;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n    },\n    addVertexLine: function (a) {\n      const src = this.vertices;\n      const dst = this.object.geometry.vertices;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n    },\n    addNormal: function (a, b, c) {\n      const src = this.normals;\n      const dst = this.object.geometry.normals;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      dst.push(src[b + 0], src[b + 1], src[b + 2]);\n      dst.push(src[c + 0], src[c + 1], src[c + 2]);\n    },\n    addFaceNormal: function (a, b, c) {\n      const src = this.vertices;\n      const dst = this.object.geometry.normals;\n\n      _vA.fromArray(src, a);\n\n      _vB.fromArray(src, b);\n\n      _vC.fromArray(src, c);\n\n      _cb.subVectors(_vC, _vB);\n\n      _ab.subVectors(_vA, _vB);\n\n      _cb.cross(_ab);\n\n      _cb.normalize();\n\n      dst.push(_cb.x, _cb.y, _cb.z);\n      dst.push(_cb.x, _cb.y, _cb.z);\n      dst.push(_cb.x, _cb.y, _cb.z);\n    },\n    addColor: function (a, b, c) {\n      const src = this.colors;\n      const dst = this.object.geometry.colors;\n      if (src[a] !== undefined) dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      if (src[b] !== undefined) dst.push(src[b + 0], src[b + 1], src[b + 2]);\n      if (src[c] !== undefined) dst.push(src[c + 0], src[c + 1], src[c + 2]);\n    },\n    addUV: function (a, b, c) {\n      const src = this.uvs;\n      const dst = this.object.geometry.uvs;\n      dst.push(src[a + 0], src[a + 1]);\n      dst.push(src[b + 0], src[b + 1]);\n      dst.push(src[c + 0], src[c + 1]);\n    },\n    addDefaultUV: function () {\n      const dst = this.object.geometry.uvs;\n      dst.push(0, 0);\n      dst.push(0, 0);\n      dst.push(0, 0);\n    },\n    addUVLine: function (a) {\n      const src = this.uvs;\n      const dst = this.object.geometry.uvs;\n      dst.push(src[a + 0], src[a + 1]);\n    },\n    addFace: function (a, b, c, ua, ub, uc, na, nb, nc) {\n      const vLen = this.vertices.length;\n      let ia = this.parseVertexIndex(a, vLen);\n      let ib = this.parseVertexIndex(b, vLen);\n      let ic = this.parseVertexIndex(c, vLen);\n      this.addVertex(ia, ib, ic);\n      this.addColor(ia, ib, ic); // normals\n\n      if (na !== undefined && na !== '') {\n        const nLen = this.normals.length;\n        ia = this.parseNormalIndex(na, nLen);\n        ib = this.parseNormalIndex(nb, nLen);\n        ic = this.parseNormalIndex(nc, nLen);\n        this.addNormal(ia, ib, ic);\n      } else {\n        this.addFaceNormal(ia, ib, ic);\n      } // uvs\n\n\n      if (ua !== undefined && ua !== '') {\n        const uvLen = this.uvs.length;\n        ia = this.parseUVIndex(ua, uvLen);\n        ib = this.parseUVIndex(ub, uvLen);\n        ic = this.parseUVIndex(uc, uvLen);\n        this.addUV(ia, ib, ic);\n        this.object.geometry.hasUVIndices = true;\n      } else {\n        // add placeholder values (for inconsistent face definitions)\n        this.addDefaultUV();\n      }\n    },\n    addPointGeometry: function (vertices) {\n      this.object.geometry.type = 'Points';\n      const vLen = this.vertices.length;\n\n      for (let vi = 0, l = vertices.length; vi < l; vi++) {\n        const index = this.parseVertexIndex(vertices[vi], vLen);\n        this.addVertexPoint(index);\n        this.addColor(index);\n      }\n    },\n    addLineGeometry: function (vertices, uvs) {\n      this.object.geometry.type = 'Line';\n      const vLen = this.vertices.length;\n      const uvLen = this.uvs.length;\n\n      for (let vi = 0, l = vertices.length; vi < l; vi++) {\n        this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));\n      }\n\n      for (let uvi = 0, l = uvs.length; uvi < l; uvi++) {\n        this.addUVLine(this.parseUVIndex(uvs[uvi], uvLen));\n      }\n    }\n  };\n  state.startObject('', false);\n  return state;\n} //\n\n\nclass OBJLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.materials = null;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  setMaterials(materials) {\n    this.materials = materials;\n    return this;\n  }\n\n  parse(text) {\n    const state = new ParserState();\n\n    if (text.indexOf('\\r\\n') !== -1) {\n      // This is faster than String.split with regex that splits on both\n      text = text.replace(/\\r\\n/g, '\\n');\n    }\n\n    if (text.indexOf('\\\\\\n') !== -1) {\n      // join lines separated by a line continuation character (\\)\n      text = text.replace(/\\\\\\n/g, '');\n    }\n\n    const lines = text.split('\\n');\n    let line = '',\n        lineFirstChar = '';\n    let lineLength = 0;\n    let result = []; // Faster to just trim left side of the line. Use if available.\n\n    const trimLeft = typeof ''.trimLeft === 'function';\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      line = lines[i];\n      line = trimLeft ? line.trimLeft() : line.trim();\n      lineLength = line.length;\n      if (lineLength === 0) continue;\n      lineFirstChar = line.charAt(0); // @todo invoke passed in handler if any\n\n      if (lineFirstChar === '#') continue;\n\n      if (lineFirstChar === 'v') {\n        const data = line.split(/\\s+/);\n\n        switch (data[0]) {\n          case 'v':\n            state.vertices.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n\n            if (data.length >= 7) {\n              state.colors.push(parseFloat(data[4]), parseFloat(data[5]), parseFloat(data[6]));\n            } else {\n              // if no colors are defined, add placeholders so color and vertex indices match\n              state.colors.push(undefined, undefined, undefined);\n            }\n\n            break;\n\n          case 'vn':\n            state.normals.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n            break;\n\n          case 'vt':\n            state.uvs.push(parseFloat(data[1]), parseFloat(data[2]));\n            break;\n        }\n      } else if (lineFirstChar === 'f') {\n        const lineData = line.substr(1).trim();\n        const vertexData = lineData.split(/\\s+/);\n        const faceVertices = []; // Parse the face vertex data into an easy to work with format\n\n        for (let j = 0, jl = vertexData.length; j < jl; j++) {\n          const vertex = vertexData[j];\n\n          if (vertex.length > 0) {\n            const vertexParts = vertex.split('/');\n            faceVertices.push(vertexParts);\n          }\n        } // Draw an edge between the first vertex and all subsequent vertices to form an n-gon\n\n\n        const v1 = faceVertices[0];\n\n        for (let j = 1, jl = faceVertices.length - 1; j < jl; j++) {\n          const v2 = faceVertices[j];\n          const v3 = faceVertices[j + 1];\n          state.addFace(v1[0], v2[0], v3[0], v1[1], v2[1], v3[1], v1[2], v2[2], v3[2]);\n        }\n      } else if (lineFirstChar === 'l') {\n        const lineParts = line.substring(1).trim().split(' ');\n        let lineVertices = [];\n        const lineUVs = [];\n\n        if (line.indexOf('/') === -1) {\n          lineVertices = lineParts;\n        } else {\n          for (let li = 0, llen = lineParts.length; li < llen; li++) {\n            const parts = lineParts[li].split('/');\n            if (parts[0] !== '') lineVertices.push(parts[0]);\n            if (parts[1] !== '') lineUVs.push(parts[1]);\n          }\n        }\n\n        state.addLineGeometry(lineVertices, lineUVs);\n      } else if (lineFirstChar === 'p') {\n        const lineData = line.substr(1).trim();\n        const pointData = lineData.split(' ');\n        state.addPointGeometry(pointData);\n      } else if ((result = _object_pattern.exec(line)) !== null) {\n        // o object_name\n        // or\n        // g group_name\n        // WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\n        // let name = result[ 0 ].substr( 1 ).trim();\n        const name = (' ' + result[0].substr(1).trim()).substr(1);\n        state.startObject(name);\n      } else if (_material_use_pattern.test(line)) {\n        // material\n        state.object.startMaterial(line.substring(7).trim(), state.materialLibraries);\n      } else if (_material_library_pattern.test(line)) {\n        // mtl file\n        state.materialLibraries.push(line.substring(7).trim());\n      } else if (_map_use_pattern.test(line)) {\n        // the line is parsed but ignored since the loader assumes textures are defined MTL files\n        // (according to https://www.okino.com/conv/imp_wave.htm, 'usemap' is the old-style Wavefront texture reference method)\n        console.warn('THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.');\n      } else if (lineFirstChar === 's') {\n        result = line.split(' '); // smooth shading\n        // @todo Handle files that have varying smooth values for a set of faces inside one geometry,\n        // but does not define a usemtl for each face set.\n        // This should be detected and a dummy material created (later MultiMaterial and geometry groups).\n        // This requires some care to not create extra material on each smooth value for \"normal\" obj files.\n        // where explicit usemtl defines geometry groups.\n        // Example asset: examples/models/obj/cerberus/Cerberus.obj\n\n        /*\n         * http://paulbourke.net/dataformats/obj/\n         * or\n         * http://www.cs.utah.edu/~boulos/cs3505/obj_spec.pdf\n         *\n         * From chapter \"Grouping\" Syntax explanation \"s group_number\":\n         * \"group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.\n         * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form\n         * surfaces, smoothing groups are either turned on or off; there is no difference between values greater\n         * than 0.\"\n         */\n\n        if (result.length > 1) {\n          const value = result[1].trim().toLowerCase();\n          state.object.smooth = value !== '0' && value !== 'off';\n        } else {\n          // ZBrush can produce \"s\" lines #11707\n          state.object.smooth = true;\n        }\n\n        const material = state.object.currentMaterial();\n        if (material) material.smooth = state.object.smooth;\n      } else {\n        // Handle null terminated files without exception\n        if (line === '\\0') continue;\n        console.warn('THREE.OBJLoader: Unexpected line: \"' + line + '\"');\n      }\n    }\n\n    state.finalize();\n    const container = new Group();\n    container.materialLibraries = [].concat(state.materialLibraries);\n    const hasPrimitives = !(state.objects.length === 1 && state.objects[0].geometry.vertices.length === 0);\n\n    if (hasPrimitives === true) {\n      for (let i = 0, l = state.objects.length; i < l; i++) {\n        const object = state.objects[i];\n        const geometry = object.geometry;\n        const materials = object.materials;\n        const isLine = geometry.type === 'Line';\n        const isPoints = geometry.type === 'Points';\n        let hasVertexColors = false; // Skip o/g line declarations that did not follow with any faces\n\n        if (geometry.vertices.length === 0) continue;\n        const buffergeometry = new BufferGeometry();\n        buffergeometry.setAttribute('position', new Float32BufferAttribute(geometry.vertices, 3));\n\n        if (geometry.normals.length > 0) {\n          buffergeometry.setAttribute('normal', new Float32BufferAttribute(geometry.normals, 3));\n        }\n\n        if (geometry.colors.length > 0) {\n          hasVertexColors = true;\n          buffergeometry.setAttribute('color', new Float32BufferAttribute(geometry.colors, 3));\n        }\n\n        if (geometry.hasUVIndices === true) {\n          buffergeometry.setAttribute('uv', new Float32BufferAttribute(geometry.uvs, 2));\n        } // Create materials\n\n\n        const createdMaterials = [];\n\n        for (let mi = 0, miLen = materials.length; mi < miLen; mi++) {\n          const sourceMaterial = materials[mi];\n          const materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;\n          let material = state.materials[materialHash];\n\n          if (this.materials !== null) {\n            material = this.materials.create(sourceMaterial.name); // mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\n\n            if (isLine && material && !(material instanceof LineBasicMaterial)) {\n              const materialLine = new LineBasicMaterial();\n              Material.prototype.copy.call(materialLine, material);\n              materialLine.color.copy(material.color);\n              material = materialLine;\n            } else if (isPoints && material && !(material instanceof PointsMaterial)) {\n              const materialPoints = new PointsMaterial({\n                size: 10,\n                sizeAttenuation: false\n              });\n              Material.prototype.copy.call(materialPoints, material);\n              materialPoints.color.copy(material.color);\n              materialPoints.map = material.map;\n              material = materialPoints;\n            }\n          }\n\n          if (material === undefined) {\n            if (isLine) {\n              material = new LineBasicMaterial();\n            } else if (isPoints) {\n              material = new PointsMaterial({\n                size: 1,\n                sizeAttenuation: false\n              });\n            } else {\n              material = new MeshPhongMaterial();\n            }\n\n            material.name = sourceMaterial.name;\n            material.flatShading = sourceMaterial.smooth ? false : true;\n            material.vertexColors = hasVertexColors;\n            state.materials[materialHash] = material;\n          }\n\n          createdMaterials.push(material);\n        } // Create mesh\n\n\n        let mesh;\n\n        if (createdMaterials.length > 1) {\n          for (let mi = 0, miLen = materials.length; mi < miLen; mi++) {\n            const sourceMaterial = materials[mi];\n            buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);\n          }\n\n          if (isLine) {\n            mesh = new LineSegments(buffergeometry, createdMaterials);\n          } else if (isPoints) {\n            mesh = new Points(buffergeometry, createdMaterials);\n          } else {\n            mesh = new Mesh(buffergeometry, createdMaterials);\n          }\n        } else {\n          if (isLine) {\n            mesh = new LineSegments(buffergeometry, createdMaterials[0]);\n          } else if (isPoints) {\n            mesh = new Points(buffergeometry, createdMaterials[0]);\n          } else {\n            mesh = new Mesh(buffergeometry, createdMaterials[0]);\n          }\n        }\n\n        mesh.name = object.name;\n        container.add(mesh);\n      }\n    } else {\n      // if there is only the default parser state object with no geometry data, interpret data as point cloud\n      if (state.vertices.length > 0) {\n        const material = new PointsMaterial({\n          size: 1,\n          sizeAttenuation: false\n        });\n        const buffergeometry = new BufferGeometry();\n        buffergeometry.setAttribute('position', new Float32BufferAttribute(state.vertices, 3));\n\n        if (state.colors.length > 0 && state.colors[0] !== undefined) {\n          buffergeometry.setAttribute('color', new Float32BufferAttribute(state.colors, 3));\n          material.vertexColors = true;\n        }\n\n        const points = new Points(buffergeometry, material);\n        container.add(points);\n      }\n    }\n\n    return container;\n  }\n\n}\n\nexport { OBJLoader };","map":{"version":3,"names":["Vector3","Loader","FileLoader","Group","BufferGeometry","Float32BufferAttribute","LineBasicMaterial","Material","PointsMaterial","MeshPhongMaterial","LineSegments","Points","Mesh","_object_pattern","_material_library_pattern","_material_use_pattern","_map_use_pattern","_vA","_vB","_vC","_ab","_cb","ParserState","state","objects","object","vertices","normals","colors","uvs","materials","materialLibraries","startObject","name","fromDeclaration","previousMaterial","currentMaterial","undefined","_finalize","geometry","hasUVIndices","smooth","startMaterial","libraries","previous","inherited","groupCount","splice","index","material","length","mtllib","Array","isArray","groupStart","groupEnd","clone","cloned","bind","push","end","lastMultiMaterial","mi","declared","finalize","parseVertexIndex","value","len","parseInt","parseNormalIndex","parseUVIndex","addVertex","a","b","c","src","dst","addVertexPoint","addVertexLine","addNormal","addFaceNormal","fromArray","subVectors","cross","normalize","x","y","z","addColor","addUV","addDefaultUV","addUVLine","addFace","ua","ub","uc","na","nb","nc","vLen","ia","ib","ic","nLen","uvLen","addPointGeometry","type","vi","l","addLineGeometry","uvi","OBJLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","setMaterials","indexOf","replace","lines","split","line","lineFirstChar","lineLength","result","trimLeft","i","trim","charAt","data","parseFloat","lineData","substr","vertexData","faceVertices","j","jl","vertex","vertexParts","v1","v2","v3","lineParts","substring","lineVertices","lineUVs","li","llen","parts","pointData","exec","test","warn","toLowerCase","container","concat","hasPrimitives","isLine","isPoints","hasVertexColors","buffergeometry","setAttribute","createdMaterials","miLen","sourceMaterial","materialHash","create","materialLine","prototype","copy","call","color","materialPoints","size","sizeAttenuation","map","flatShading","vertexColors","mesh","addGroup","add","points"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/three-stdlib/loaders/OBJLoader.js"],"sourcesContent":["import { Vector3, Loader, FileLoader, Group, BufferGeometry, Float32BufferAttribute, LineBasicMaterial, Material, PointsMaterial, MeshPhongMaterial, LineSegments, Points, Mesh } from 'three';\n\nconst _object_pattern = /^[og]\\s*(.+)?/; // mtllib file_reference\n\nconst _material_library_pattern = /^mtllib /; // usemtl material_name\n\nconst _material_use_pattern = /^usemtl /; // usemap map_name\n\nconst _map_use_pattern = /^usemap /;\n\nconst _vA = new Vector3();\n\nconst _vB = new Vector3();\n\nconst _vC = new Vector3();\n\nconst _ab = new Vector3();\n\nconst _cb = new Vector3();\n\nfunction ParserState() {\n  const state = {\n    objects: [],\n    object: {},\n    vertices: [],\n    normals: [],\n    colors: [],\n    uvs: [],\n    materials: {},\n    materialLibraries: [],\n    startObject: function (name, fromDeclaration) {\n      // If the current object (initial from reset) is not from a g/o declaration in the parsed\n      // file. We need to use it for the first parsed g/o to keep things in sync.\n      if (this.object && this.object.fromDeclaration === false) {\n        this.object.name = name;\n        this.object.fromDeclaration = fromDeclaration !== false;\n        return;\n      }\n\n      const previousMaterial = this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined;\n\n      if (this.object && typeof this.object._finalize === 'function') {\n        this.object._finalize(true);\n      }\n\n      this.object = {\n        name: name || '',\n        fromDeclaration: fromDeclaration !== false,\n        geometry: {\n          vertices: [],\n          normals: [],\n          colors: [],\n          uvs: [],\n          hasUVIndices: false\n        },\n        materials: [],\n        smooth: true,\n        startMaterial: function (name, libraries) {\n          const previous = this._finalize(false); // New usemtl declaration overwrites an inherited material, except if faces were declared\n          // after the material, then it must be preserved for proper MultiMaterial continuation.\n\n\n          if (previous && (previous.inherited || previous.groupCount <= 0)) {\n            this.materials.splice(previous.index, 1);\n          }\n\n          const material = {\n            index: this.materials.length,\n            name: name || '',\n            mtllib: Array.isArray(libraries) && libraries.length > 0 ? libraries[libraries.length - 1] : '',\n            smooth: previous !== undefined ? previous.smooth : this.smooth,\n            groupStart: previous !== undefined ? previous.groupEnd : 0,\n            groupEnd: -1,\n            groupCount: -1,\n            inherited: false,\n            clone: function (index) {\n              const cloned = {\n                index: typeof index === 'number' ? index : this.index,\n                name: this.name,\n                mtllib: this.mtllib,\n                smooth: this.smooth,\n                groupStart: 0,\n                groupEnd: -1,\n                groupCount: -1,\n                inherited: false\n              };\n              cloned.clone = this.clone.bind(cloned);\n              return cloned;\n            }\n          };\n          this.materials.push(material);\n          return material;\n        },\n        currentMaterial: function () {\n          if (this.materials.length > 0) {\n            return this.materials[this.materials.length - 1];\n          }\n\n          return undefined;\n        },\n        _finalize: function (end) {\n          const lastMultiMaterial = this.currentMaterial();\n\n          if (lastMultiMaterial && lastMultiMaterial.groupEnd === -1) {\n            lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n            lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n            lastMultiMaterial.inherited = false;\n          } // Ignore objects tail materials if no face declarations followed them before a new o/g started.\n\n\n          if (end && this.materials.length > 1) {\n            for (let mi = this.materials.length - 1; mi >= 0; mi--) {\n              if (this.materials[mi].groupCount <= 0) {\n                this.materials.splice(mi, 1);\n              }\n            }\n          } // Guarantee at least one empty material, this makes the creation later more straight forward.\n\n\n          if (end && this.materials.length === 0) {\n            this.materials.push({\n              name: '',\n              smooth: this.smooth\n            });\n          }\n\n          return lastMultiMaterial;\n        }\n      }; // Inherit previous objects material.\n      // Spec tells us that a declared material must be set to all objects until a new material is declared.\n      // If a usemtl declaration is encountered while this new object is being parsed, it will\n      // overwrite the inherited material. Exception being that there was already face declarations\n      // to the inherited material, then it will be preserved for proper MultiMaterial continuation.\n\n      if (previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function') {\n        const declared = previousMaterial.clone(0);\n        declared.inherited = true;\n        this.object.materials.push(declared);\n      }\n\n      this.objects.push(this.object);\n    },\n    finalize: function () {\n      if (this.object && typeof this.object._finalize === 'function') {\n        this.object._finalize(true);\n      }\n    },\n    parseVertexIndex: function (value, len) {\n      const index = parseInt(value, 10);\n      return (index >= 0 ? index - 1 : index + len / 3) * 3;\n    },\n    parseNormalIndex: function (value, len) {\n      const index = parseInt(value, 10);\n      return (index >= 0 ? index - 1 : index + len / 3) * 3;\n    },\n    parseUVIndex: function (value, len) {\n      const index = parseInt(value, 10);\n      return (index >= 0 ? index - 1 : index + len / 2) * 2;\n    },\n    addVertex: function (a, b, c) {\n      const src = this.vertices;\n      const dst = this.object.geometry.vertices;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      dst.push(src[b + 0], src[b + 1], src[b + 2]);\n      dst.push(src[c + 0], src[c + 1], src[c + 2]);\n    },\n    addVertexPoint: function (a) {\n      const src = this.vertices;\n      const dst = this.object.geometry.vertices;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n    },\n    addVertexLine: function (a) {\n      const src = this.vertices;\n      const dst = this.object.geometry.vertices;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n    },\n    addNormal: function (a, b, c) {\n      const src = this.normals;\n      const dst = this.object.geometry.normals;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      dst.push(src[b + 0], src[b + 1], src[b + 2]);\n      dst.push(src[c + 0], src[c + 1], src[c + 2]);\n    },\n    addFaceNormal: function (a, b, c) {\n      const src = this.vertices;\n      const dst = this.object.geometry.normals;\n\n      _vA.fromArray(src, a);\n\n      _vB.fromArray(src, b);\n\n      _vC.fromArray(src, c);\n\n      _cb.subVectors(_vC, _vB);\n\n      _ab.subVectors(_vA, _vB);\n\n      _cb.cross(_ab);\n\n      _cb.normalize();\n\n      dst.push(_cb.x, _cb.y, _cb.z);\n      dst.push(_cb.x, _cb.y, _cb.z);\n      dst.push(_cb.x, _cb.y, _cb.z);\n    },\n    addColor: function (a, b, c) {\n      const src = this.colors;\n      const dst = this.object.geometry.colors;\n      if (src[a] !== undefined) dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      if (src[b] !== undefined) dst.push(src[b + 0], src[b + 1], src[b + 2]);\n      if (src[c] !== undefined) dst.push(src[c + 0], src[c + 1], src[c + 2]);\n    },\n    addUV: function (a, b, c) {\n      const src = this.uvs;\n      const dst = this.object.geometry.uvs;\n      dst.push(src[a + 0], src[a + 1]);\n      dst.push(src[b + 0], src[b + 1]);\n      dst.push(src[c + 0], src[c + 1]);\n    },\n    addDefaultUV: function () {\n      const dst = this.object.geometry.uvs;\n      dst.push(0, 0);\n      dst.push(0, 0);\n      dst.push(0, 0);\n    },\n    addUVLine: function (a) {\n      const src = this.uvs;\n      const dst = this.object.geometry.uvs;\n      dst.push(src[a + 0], src[a + 1]);\n    },\n    addFace: function (a, b, c, ua, ub, uc, na, nb, nc) {\n      const vLen = this.vertices.length;\n      let ia = this.parseVertexIndex(a, vLen);\n      let ib = this.parseVertexIndex(b, vLen);\n      let ic = this.parseVertexIndex(c, vLen);\n      this.addVertex(ia, ib, ic);\n      this.addColor(ia, ib, ic); // normals\n\n      if (na !== undefined && na !== '') {\n        const nLen = this.normals.length;\n        ia = this.parseNormalIndex(na, nLen);\n        ib = this.parseNormalIndex(nb, nLen);\n        ic = this.parseNormalIndex(nc, nLen);\n        this.addNormal(ia, ib, ic);\n      } else {\n        this.addFaceNormal(ia, ib, ic);\n      } // uvs\n\n\n      if (ua !== undefined && ua !== '') {\n        const uvLen = this.uvs.length;\n        ia = this.parseUVIndex(ua, uvLen);\n        ib = this.parseUVIndex(ub, uvLen);\n        ic = this.parseUVIndex(uc, uvLen);\n        this.addUV(ia, ib, ic);\n        this.object.geometry.hasUVIndices = true;\n      } else {\n        // add placeholder values (for inconsistent face definitions)\n        this.addDefaultUV();\n      }\n    },\n    addPointGeometry: function (vertices) {\n      this.object.geometry.type = 'Points';\n      const vLen = this.vertices.length;\n\n      for (let vi = 0, l = vertices.length; vi < l; vi++) {\n        const index = this.parseVertexIndex(vertices[vi], vLen);\n        this.addVertexPoint(index);\n        this.addColor(index);\n      }\n    },\n    addLineGeometry: function (vertices, uvs) {\n      this.object.geometry.type = 'Line';\n      const vLen = this.vertices.length;\n      const uvLen = this.uvs.length;\n\n      for (let vi = 0, l = vertices.length; vi < l; vi++) {\n        this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));\n      }\n\n      for (let uvi = 0, l = uvs.length; uvi < l; uvi++) {\n        this.addUVLine(this.parseUVIndex(uvs[uvi], uvLen));\n      }\n    }\n  };\n  state.startObject('', false);\n  return state;\n} //\n\n\nclass OBJLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.materials = null;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  setMaterials(materials) {\n    this.materials = materials;\n    return this;\n  }\n\n  parse(text) {\n    const state = new ParserState();\n\n    if (text.indexOf('\\r\\n') !== -1) {\n      // This is faster than String.split with regex that splits on both\n      text = text.replace(/\\r\\n/g, '\\n');\n    }\n\n    if (text.indexOf('\\\\\\n') !== -1) {\n      // join lines separated by a line continuation character (\\)\n      text = text.replace(/\\\\\\n/g, '');\n    }\n\n    const lines = text.split('\\n');\n    let line = '',\n        lineFirstChar = '';\n    let lineLength = 0;\n    let result = []; // Faster to just trim left side of the line. Use if available.\n\n    const trimLeft = typeof ''.trimLeft === 'function';\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      line = lines[i];\n      line = trimLeft ? line.trimLeft() : line.trim();\n      lineLength = line.length;\n      if (lineLength === 0) continue;\n      lineFirstChar = line.charAt(0); // @todo invoke passed in handler if any\n\n      if (lineFirstChar === '#') continue;\n\n      if (lineFirstChar === 'v') {\n        const data = line.split(/\\s+/);\n\n        switch (data[0]) {\n          case 'v':\n            state.vertices.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n\n            if (data.length >= 7) {\n              state.colors.push(parseFloat(data[4]), parseFloat(data[5]), parseFloat(data[6]));\n            } else {\n              // if no colors are defined, add placeholders so color and vertex indices match\n              state.colors.push(undefined, undefined, undefined);\n            }\n\n            break;\n\n          case 'vn':\n            state.normals.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n            break;\n\n          case 'vt':\n            state.uvs.push(parseFloat(data[1]), parseFloat(data[2]));\n            break;\n        }\n      } else if (lineFirstChar === 'f') {\n        const lineData = line.substr(1).trim();\n        const vertexData = lineData.split(/\\s+/);\n        const faceVertices = []; // Parse the face vertex data into an easy to work with format\n\n        for (let j = 0, jl = vertexData.length; j < jl; j++) {\n          const vertex = vertexData[j];\n\n          if (vertex.length > 0) {\n            const vertexParts = vertex.split('/');\n            faceVertices.push(vertexParts);\n          }\n        } // Draw an edge between the first vertex and all subsequent vertices to form an n-gon\n\n\n        const v1 = faceVertices[0];\n\n        for (let j = 1, jl = faceVertices.length - 1; j < jl; j++) {\n          const v2 = faceVertices[j];\n          const v3 = faceVertices[j + 1];\n          state.addFace(v1[0], v2[0], v3[0], v1[1], v2[1], v3[1], v1[2], v2[2], v3[2]);\n        }\n      } else if (lineFirstChar === 'l') {\n        const lineParts = line.substring(1).trim().split(' ');\n        let lineVertices = [];\n        const lineUVs = [];\n\n        if (line.indexOf('/') === -1) {\n          lineVertices = lineParts;\n        } else {\n          for (let li = 0, llen = lineParts.length; li < llen; li++) {\n            const parts = lineParts[li].split('/');\n            if (parts[0] !== '') lineVertices.push(parts[0]);\n            if (parts[1] !== '') lineUVs.push(parts[1]);\n          }\n        }\n\n        state.addLineGeometry(lineVertices, lineUVs);\n      } else if (lineFirstChar === 'p') {\n        const lineData = line.substr(1).trim();\n        const pointData = lineData.split(' ');\n        state.addPointGeometry(pointData);\n      } else if ((result = _object_pattern.exec(line)) !== null) {\n        // o object_name\n        // or\n        // g group_name\n        // WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\n        // let name = result[ 0 ].substr( 1 ).trim();\n        const name = (' ' + result[0].substr(1).trim()).substr(1);\n        state.startObject(name);\n      } else if (_material_use_pattern.test(line)) {\n        // material\n        state.object.startMaterial(line.substring(7).trim(), state.materialLibraries);\n      } else if (_material_library_pattern.test(line)) {\n        // mtl file\n        state.materialLibraries.push(line.substring(7).trim());\n      } else if (_map_use_pattern.test(line)) {\n        // the line is parsed but ignored since the loader assumes textures are defined MTL files\n        // (according to https://www.okino.com/conv/imp_wave.htm, 'usemap' is the old-style Wavefront texture reference method)\n        console.warn('THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.');\n      } else if (lineFirstChar === 's') {\n        result = line.split(' '); // smooth shading\n        // @todo Handle files that have varying smooth values for a set of faces inside one geometry,\n        // but does not define a usemtl for each face set.\n        // This should be detected and a dummy material created (later MultiMaterial and geometry groups).\n        // This requires some care to not create extra material on each smooth value for \"normal\" obj files.\n        // where explicit usemtl defines geometry groups.\n        // Example asset: examples/models/obj/cerberus/Cerberus.obj\n\n        /*\n         * http://paulbourke.net/dataformats/obj/\n         * or\n         * http://www.cs.utah.edu/~boulos/cs3505/obj_spec.pdf\n         *\n         * From chapter \"Grouping\" Syntax explanation \"s group_number\":\n         * \"group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.\n         * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form\n         * surfaces, smoothing groups are either turned on or off; there is no difference between values greater\n         * than 0.\"\n         */\n\n        if (result.length > 1) {\n          const value = result[1].trim().toLowerCase();\n          state.object.smooth = value !== '0' && value !== 'off';\n        } else {\n          // ZBrush can produce \"s\" lines #11707\n          state.object.smooth = true;\n        }\n\n        const material = state.object.currentMaterial();\n        if (material) material.smooth = state.object.smooth;\n      } else {\n        // Handle null terminated files without exception\n        if (line === '\\0') continue;\n        console.warn('THREE.OBJLoader: Unexpected line: \"' + line + '\"');\n      }\n    }\n\n    state.finalize();\n    const container = new Group();\n    container.materialLibraries = [].concat(state.materialLibraries);\n    const hasPrimitives = !(state.objects.length === 1 && state.objects[0].geometry.vertices.length === 0);\n\n    if (hasPrimitives === true) {\n      for (let i = 0, l = state.objects.length; i < l; i++) {\n        const object = state.objects[i];\n        const geometry = object.geometry;\n        const materials = object.materials;\n        const isLine = geometry.type === 'Line';\n        const isPoints = geometry.type === 'Points';\n        let hasVertexColors = false; // Skip o/g line declarations that did not follow with any faces\n\n        if (geometry.vertices.length === 0) continue;\n        const buffergeometry = new BufferGeometry();\n        buffergeometry.setAttribute('position', new Float32BufferAttribute(geometry.vertices, 3));\n\n        if (geometry.normals.length > 0) {\n          buffergeometry.setAttribute('normal', new Float32BufferAttribute(geometry.normals, 3));\n        }\n\n        if (geometry.colors.length > 0) {\n          hasVertexColors = true;\n          buffergeometry.setAttribute('color', new Float32BufferAttribute(geometry.colors, 3));\n        }\n\n        if (geometry.hasUVIndices === true) {\n          buffergeometry.setAttribute('uv', new Float32BufferAttribute(geometry.uvs, 2));\n        } // Create materials\n\n\n        const createdMaterials = [];\n\n        for (let mi = 0, miLen = materials.length; mi < miLen; mi++) {\n          const sourceMaterial = materials[mi];\n          const materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;\n          let material = state.materials[materialHash];\n\n          if (this.materials !== null) {\n            material = this.materials.create(sourceMaterial.name); // mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\n\n            if (isLine && material && !(material instanceof LineBasicMaterial)) {\n              const materialLine = new LineBasicMaterial();\n              Material.prototype.copy.call(materialLine, material);\n              materialLine.color.copy(material.color);\n              material = materialLine;\n            } else if (isPoints && material && !(material instanceof PointsMaterial)) {\n              const materialPoints = new PointsMaterial({\n                size: 10,\n                sizeAttenuation: false\n              });\n              Material.prototype.copy.call(materialPoints, material);\n              materialPoints.color.copy(material.color);\n              materialPoints.map = material.map;\n              material = materialPoints;\n            }\n          }\n\n          if (material === undefined) {\n            if (isLine) {\n              material = new LineBasicMaterial();\n            } else if (isPoints) {\n              material = new PointsMaterial({\n                size: 1,\n                sizeAttenuation: false\n              });\n            } else {\n              material = new MeshPhongMaterial();\n            }\n\n            material.name = sourceMaterial.name;\n            material.flatShading = sourceMaterial.smooth ? false : true;\n            material.vertexColors = hasVertexColors;\n            state.materials[materialHash] = material;\n          }\n\n          createdMaterials.push(material);\n        } // Create mesh\n\n\n        let mesh;\n\n        if (createdMaterials.length > 1) {\n          for (let mi = 0, miLen = materials.length; mi < miLen; mi++) {\n            const sourceMaterial = materials[mi];\n            buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);\n          }\n\n          if (isLine) {\n            mesh = new LineSegments(buffergeometry, createdMaterials);\n          } else if (isPoints) {\n            mesh = new Points(buffergeometry, createdMaterials);\n          } else {\n            mesh = new Mesh(buffergeometry, createdMaterials);\n          }\n        } else {\n          if (isLine) {\n            mesh = new LineSegments(buffergeometry, createdMaterials[0]);\n          } else if (isPoints) {\n            mesh = new Points(buffergeometry, createdMaterials[0]);\n          } else {\n            mesh = new Mesh(buffergeometry, createdMaterials[0]);\n          }\n        }\n\n        mesh.name = object.name;\n        container.add(mesh);\n      }\n    } else {\n      // if there is only the default parser state object with no geometry data, interpret data as point cloud\n      if (state.vertices.length > 0) {\n        const material = new PointsMaterial({\n          size: 1,\n          sizeAttenuation: false\n        });\n        const buffergeometry = new BufferGeometry();\n        buffergeometry.setAttribute('position', new Float32BufferAttribute(state.vertices, 3));\n\n        if (state.colors.length > 0 && state.colors[0] !== undefined) {\n          buffergeometry.setAttribute('color', new Float32BufferAttribute(state.colors, 3));\n          material.vertexColors = true;\n        }\n\n        const points = new Points(buffergeometry, material);\n        container.add(points);\n      }\n    }\n\n    return container;\n  }\n\n}\n\nexport { OBJLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}