{"ast":null,"code":"import { Matrix4, Vector3, Box3, DirectionalLight, MathUtils, ShaderChunk, Vector2 } from 'three';\nimport Frustum from './Frustum.js';\nimport Shader from './Shader.js';\n\nconst _cameraToLightMatrix = new Matrix4();\n\nconst _lightSpaceFrustum = new Frustum();\n\nconst _center = new Vector3();\n\nconst _bbox = new Box3();\n\nconst _uniformArray = [];\nconst _logArray = [];\n\nclass CSM {\n  constructor(data) {\n    data = data || {};\n    this.camera = data.camera;\n    this.parent = data.parent;\n    this.cascades = data.cascades || 3;\n    this.maxFar = data.maxFar || 100000;\n    this.mode = data.mode || 'practical';\n    this.shadowMapSize = data.shadowMapSize || 2048;\n    this.shadowBias = data.shadowBias || 0.000001;\n    this.lightDirection = data.lightDirection || new Vector3(1, -1, 1).normalize();\n    this.lightIntensity = data.lightIntensity || 1;\n    this.lightNear = data.lightNear || 1;\n    this.lightFar = data.lightFar || 2000;\n    this.lightMargin = data.lightMargin || 200;\n    this.customSplitsCallback = data.customSplitsCallback;\n    this.fade = false;\n    this.mainFrustum = new Frustum();\n    this.frustums = [];\n    this.breaks = [];\n    this.lights = [];\n    this.shaders = new Map();\n    this.createLights();\n    this.updateFrustums();\n    this.injectInclude();\n  }\n\n  createLights() {\n    for (let i = 0; i < this.cascades; i++) {\n      const light = new DirectionalLight(0xffffff, this.lightIntensity);\n      light.castShadow = true;\n      light.shadow.mapSize.width = this.shadowMapSize;\n      light.shadow.mapSize.height = this.shadowMapSize;\n      light.shadow.camera.near = this.lightNear;\n      light.shadow.camera.far = this.lightFar;\n      light.shadow.bias = this.shadowBias;\n      this.parent.add(light);\n      this.parent.add(light.target);\n      this.lights.push(light);\n    }\n  }\n\n  initCascades() {\n    const camera = this.camera;\n    camera.updateProjectionMatrix();\n    this.mainFrustum.setFromProjectionMatrix(camera.projectionMatrix, this.maxFar);\n    this.mainFrustum.split(this.breaks, this.frustums);\n  }\n\n  updateShadowBounds() {\n    const frustums = this.frustums;\n\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i];\n      const shadowCam = light.shadow.camera;\n      const frustum = this.frustums[i]; // Get the two points that represent that furthest points on the frustum assuming\n      // that's either the diagonal across the far plane or the diagonal across the whole\n      // frustum itself.\n\n      const nearVerts = frustum.vertices.near;\n      const farVerts = frustum.vertices.far;\n      const point1 = farVerts[0];\n      let point2;\n\n      if (point1.distanceTo(farVerts[2]) > point1.distanceTo(nearVerts[2])) {\n        point2 = farVerts[2];\n      } else {\n        point2 = nearVerts[2];\n      }\n\n      let squaredBBWidth = point1.distanceTo(point2);\n\n      if (this.fade) {\n        // expand the shadow extents by the fade margin if fade is enabled.\n        const camera = this.camera;\n        const far = Math.max(camera.far, this.maxFar);\n        const linearDepth = frustum.vertices.far[0].z / (far - camera.near);\n        const margin = 0.25 * Math.pow(linearDepth, 2.0) * (far - camera.near);\n        squaredBBWidth += margin;\n      }\n\n      shadowCam.left = -squaredBBWidth / 2;\n      shadowCam.right = squaredBBWidth / 2;\n      shadowCam.top = squaredBBWidth / 2;\n      shadowCam.bottom = -squaredBBWidth / 2;\n      shadowCam.updateProjectionMatrix();\n    }\n  }\n\n  getBreaks() {\n    const camera = this.camera;\n    const far = Math.min(camera.far, this.maxFar);\n    this.breaks.length = 0;\n\n    switch (this.mode) {\n      case 'uniform':\n        uniformSplit(this.cascades, camera.near, far, this.breaks);\n        break;\n\n      case 'logarithmic':\n        logarithmicSplit(this.cascades, camera.near, far, this.breaks);\n        break;\n\n      case 'practical':\n        practicalSplit(this.cascades, camera.near, far, 0.5, this.breaks);\n        break;\n\n      case 'custom':\n        if (this.customSplitsCallback === undefined) console.error('CSM: Custom split scheme callback not defined.');\n        this.customSplitsCallback(this.cascades, camera.near, far, this.breaks);\n        break;\n    }\n\n    function uniformSplit(amount, near, far, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push((near + (far - near) * i / amount) / far);\n      }\n\n      target.push(1);\n    }\n\n    function logarithmicSplit(amount, near, far, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push(near * (far / near) ** (i / amount) / far);\n      }\n\n      target.push(1);\n    }\n\n    function practicalSplit(amount, near, far, lambda, target) {\n      _uniformArray.length = 0;\n      _logArray.length = 0;\n      logarithmicSplit(amount, near, far, _logArray);\n      uniformSplit(amount, near, far, _uniformArray);\n\n      for (let i = 1; i < amount; i++) {\n        target.push(MathUtils.lerp(_uniformArray[i - 1], _logArray[i - 1], lambda));\n      }\n\n      target.push(1);\n    }\n  }\n\n  update() {\n    const camera = this.camera;\n    const frustums = this.frustums;\n\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i];\n      const shadowCam = light.shadow.camera;\n      const texelWidth = (shadowCam.right - shadowCam.left) / this.shadowMapSize;\n      const texelHeight = (shadowCam.top - shadowCam.bottom) / this.shadowMapSize;\n      light.shadow.camera.updateMatrixWorld(true);\n\n      _cameraToLightMatrix.multiplyMatrices(light.shadow.camera.matrixWorldInverse, camera.matrixWorld);\n\n      frustums[i].toSpace(_cameraToLightMatrix, _lightSpaceFrustum);\n      const nearVerts = _lightSpaceFrustum.vertices.near;\n      const farVerts = _lightSpaceFrustum.vertices.far;\n\n      _bbox.makeEmpty();\n\n      for (let j = 0; j < 4; j++) {\n        _bbox.expandByPoint(nearVerts[j]);\n\n        _bbox.expandByPoint(farVerts[j]);\n      }\n\n      _bbox.getCenter(_center);\n\n      _center.z = _bbox.max.z + this.lightMargin;\n      _center.x = Math.floor(_center.x / texelWidth) * texelWidth;\n      _center.y = Math.floor(_center.y / texelHeight) * texelHeight;\n\n      _center.applyMatrix4(light.shadow.camera.matrixWorld);\n\n      light.position.copy(_center);\n      light.target.position.copy(_center);\n      light.target.position.x += this.lightDirection.x;\n      light.target.position.y += this.lightDirection.y;\n      light.target.position.z += this.lightDirection.z;\n    }\n  }\n\n  injectInclude() {\n    ShaderChunk.lights_fragment_begin = Shader.lights_fragment_begin;\n    ShaderChunk.lights_pars_begin = Shader.lights_pars_begin;\n  }\n\n  setupMaterial(material) {\n    material.defines = material.defines || {};\n    material.defines.USE_CSM = 1;\n    material.defines.CSM_CASCADES = this.cascades;\n\n    if (this.fade) {\n      material.defines.CSM_FADE = '';\n    }\n\n    const breaksVec2 = [];\n    const scope = this;\n    const shaders = this.shaders;\n\n    material.onBeforeCompile = shader => {\n      const far = Math.min(scope.camera.far, scope.maxFar);\n      scope.getExtendedBreaks(breaksVec2);\n      shader.uniforms.CSM_cascades = {\n        value: breaksVec2\n      };\n      shader.uniforms.cameraNear = {\n        value: scope.camera.near\n      };\n      shader.uniforms.shadowFar = {\n        value: far\n      };\n      shaders.set(material, shader);\n    };\n\n    shaders.set(material, null);\n  }\n\n  updateUniforms() {\n    const far = Math.min(this.camera.far, this.maxFar);\n    const shaders = this.shaders;\n    shaders.forEach(function (shader, material) {\n      if (shader !== null) {\n        const uniforms = shader.uniforms;\n        this.getExtendedBreaks(uniforms.CSM_cascades.value);\n        uniforms.cameraNear.value = this.camera.near;\n        uniforms.shadowFar.value = far;\n      }\n\n      if (!this.fade && 'CSM_FADE' in material.defines) {\n        delete material.defines.CSM_FADE;\n        material.needsUpdate = true;\n      } else if (this.fade && !('CSM_FADE' in material.defines)) {\n        material.defines.CSM_FADE = '';\n        material.needsUpdate = true;\n      }\n    }, this);\n  }\n\n  getExtendedBreaks(target) {\n    while (target.length < this.breaks.length) {\n      target.push(new Vector2());\n    }\n\n    target.length = this.breaks.length;\n\n    for (let i = 0; i < this.cascades; i++) {\n      const amount = this.breaks[i];\n      const prev = this.breaks[i - 1] || 0;\n      target[i].x = prev;\n      target[i].y = amount;\n    }\n  }\n\n  updateFrustums() {\n    this.getBreaks();\n    this.initCascades();\n    this.updateShadowBounds();\n    this.updateUniforms();\n  }\n\n  remove() {\n    for (let i = 0; i < this.lights.length; i++) {\n      this.parent.remove(this.lights[i]);\n    }\n  }\n\n  dispose() {\n    const shaders = this.shaders;\n    shaders.forEach((shader, material) => {\n      delete material.onBeforeCompile;\n      delete material.defines.USE_CSM;\n      delete material.defines.CSM_CASCADES;\n      delete material.defines.CSM_FADE;\n\n      if (shader !== null) {\n        delete shader.uniforms.CSM_cascades;\n        delete shader.uniforms.cameraNear;\n        delete shader.uniforms.shadowFar;\n      }\n\n      material.needsUpdate = true;\n    });\n    shaders.clear();\n  }\n\n}\n\nexport { CSM };","map":{"version":3,"names":["Matrix4","Vector3","Box3","DirectionalLight","MathUtils","ShaderChunk","Vector2","Frustum","Shader","_cameraToLightMatrix","_lightSpaceFrustum","_center","_bbox","_uniformArray","_logArray","CSM","constructor","data","camera","parent","cascades","maxFar","mode","shadowMapSize","shadowBias","lightDirection","normalize","lightIntensity","lightNear","lightFar","lightMargin","customSplitsCallback","fade","mainFrustum","frustums","breaks","lights","shaders","Map","createLights","updateFrustums","injectInclude","i","light","castShadow","shadow","mapSize","width","height","near","far","bias","add","target","push","initCascades","updateProjectionMatrix","setFromProjectionMatrix","projectionMatrix","split","updateShadowBounds","length","shadowCam","frustum","nearVerts","vertices","farVerts","point1","point2","distanceTo","squaredBBWidth","Math","max","linearDepth","z","margin","pow","left","right","top","bottom","getBreaks","min","uniformSplit","logarithmicSplit","practicalSplit","undefined","console","error","amount","lambda","lerp","update","texelWidth","texelHeight","updateMatrixWorld","multiplyMatrices","matrixWorldInverse","matrixWorld","toSpace","makeEmpty","j","expandByPoint","getCenter","x","floor","y","applyMatrix4","position","copy","lights_fragment_begin","lights_pars_begin","setupMaterial","material","defines","USE_CSM","CSM_CASCADES","CSM_FADE","breaksVec2","scope","onBeforeCompile","shader","getExtendedBreaks","uniforms","CSM_cascades","value","cameraNear","shadowFar","set","updateUniforms","forEach","needsUpdate","prev","remove","dispose","clear"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/three-stdlib/csm/CSM.js"],"sourcesContent":["import { Matrix4, Vector3, Box3, DirectionalLight, MathUtils, ShaderChunk, Vector2 } from 'three';\nimport Frustum from './Frustum.js';\nimport Shader from './Shader.js';\n\nconst _cameraToLightMatrix = new Matrix4();\n\nconst _lightSpaceFrustum = new Frustum();\n\nconst _center = new Vector3();\n\nconst _bbox = new Box3();\n\nconst _uniformArray = [];\nconst _logArray = [];\nclass CSM {\n  constructor(data) {\n    data = data || {};\n    this.camera = data.camera;\n    this.parent = data.parent;\n    this.cascades = data.cascades || 3;\n    this.maxFar = data.maxFar || 100000;\n    this.mode = data.mode || 'practical';\n    this.shadowMapSize = data.shadowMapSize || 2048;\n    this.shadowBias = data.shadowBias || 0.000001;\n    this.lightDirection = data.lightDirection || new Vector3(1, -1, 1).normalize();\n    this.lightIntensity = data.lightIntensity || 1;\n    this.lightNear = data.lightNear || 1;\n    this.lightFar = data.lightFar || 2000;\n    this.lightMargin = data.lightMargin || 200;\n    this.customSplitsCallback = data.customSplitsCallback;\n    this.fade = false;\n    this.mainFrustum = new Frustum();\n    this.frustums = [];\n    this.breaks = [];\n    this.lights = [];\n    this.shaders = new Map();\n    this.createLights();\n    this.updateFrustums();\n    this.injectInclude();\n  }\n\n  createLights() {\n    for (let i = 0; i < this.cascades; i++) {\n      const light = new DirectionalLight(0xffffff, this.lightIntensity);\n      light.castShadow = true;\n      light.shadow.mapSize.width = this.shadowMapSize;\n      light.shadow.mapSize.height = this.shadowMapSize;\n      light.shadow.camera.near = this.lightNear;\n      light.shadow.camera.far = this.lightFar;\n      light.shadow.bias = this.shadowBias;\n      this.parent.add(light);\n      this.parent.add(light.target);\n      this.lights.push(light);\n    }\n  }\n\n  initCascades() {\n    const camera = this.camera;\n    camera.updateProjectionMatrix();\n    this.mainFrustum.setFromProjectionMatrix(camera.projectionMatrix, this.maxFar);\n    this.mainFrustum.split(this.breaks, this.frustums);\n  }\n\n  updateShadowBounds() {\n    const frustums = this.frustums;\n\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i];\n      const shadowCam = light.shadow.camera;\n      const frustum = this.frustums[i]; // Get the two points that represent that furthest points on the frustum assuming\n      // that's either the diagonal across the far plane or the diagonal across the whole\n      // frustum itself.\n\n      const nearVerts = frustum.vertices.near;\n      const farVerts = frustum.vertices.far;\n      const point1 = farVerts[0];\n      let point2;\n\n      if (point1.distanceTo(farVerts[2]) > point1.distanceTo(nearVerts[2])) {\n        point2 = farVerts[2];\n      } else {\n        point2 = nearVerts[2];\n      }\n\n      let squaredBBWidth = point1.distanceTo(point2);\n\n      if (this.fade) {\n        // expand the shadow extents by the fade margin if fade is enabled.\n        const camera = this.camera;\n        const far = Math.max(camera.far, this.maxFar);\n        const linearDepth = frustum.vertices.far[0].z / (far - camera.near);\n        const margin = 0.25 * Math.pow(linearDepth, 2.0) * (far - camera.near);\n        squaredBBWidth += margin;\n      }\n\n      shadowCam.left = -squaredBBWidth / 2;\n      shadowCam.right = squaredBBWidth / 2;\n      shadowCam.top = squaredBBWidth / 2;\n      shadowCam.bottom = -squaredBBWidth / 2;\n      shadowCam.updateProjectionMatrix();\n    }\n  }\n\n  getBreaks() {\n    const camera = this.camera;\n    const far = Math.min(camera.far, this.maxFar);\n    this.breaks.length = 0;\n\n    switch (this.mode) {\n      case 'uniform':\n        uniformSplit(this.cascades, camera.near, far, this.breaks);\n        break;\n\n      case 'logarithmic':\n        logarithmicSplit(this.cascades, camera.near, far, this.breaks);\n        break;\n\n      case 'practical':\n        practicalSplit(this.cascades, camera.near, far, 0.5, this.breaks);\n        break;\n\n      case 'custom':\n        if (this.customSplitsCallback === undefined) console.error('CSM: Custom split scheme callback not defined.');\n        this.customSplitsCallback(this.cascades, camera.near, far, this.breaks);\n        break;\n    }\n\n    function uniformSplit(amount, near, far, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push((near + (far - near) * i / amount) / far);\n      }\n\n      target.push(1);\n    }\n\n    function logarithmicSplit(amount, near, far, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push(near * (far / near) ** (i / amount) / far);\n      }\n\n      target.push(1);\n    }\n\n    function practicalSplit(amount, near, far, lambda, target) {\n      _uniformArray.length = 0;\n      _logArray.length = 0;\n      logarithmicSplit(amount, near, far, _logArray);\n      uniformSplit(amount, near, far, _uniformArray);\n\n      for (let i = 1; i < amount; i++) {\n        target.push(MathUtils.lerp(_uniformArray[i - 1], _logArray[i - 1], lambda));\n      }\n\n      target.push(1);\n    }\n  }\n\n  update() {\n    const camera = this.camera;\n    const frustums = this.frustums;\n\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i];\n      const shadowCam = light.shadow.camera;\n      const texelWidth = (shadowCam.right - shadowCam.left) / this.shadowMapSize;\n      const texelHeight = (shadowCam.top - shadowCam.bottom) / this.shadowMapSize;\n      light.shadow.camera.updateMatrixWorld(true);\n\n      _cameraToLightMatrix.multiplyMatrices(light.shadow.camera.matrixWorldInverse, camera.matrixWorld);\n\n      frustums[i].toSpace(_cameraToLightMatrix, _lightSpaceFrustum);\n      const nearVerts = _lightSpaceFrustum.vertices.near;\n      const farVerts = _lightSpaceFrustum.vertices.far;\n\n      _bbox.makeEmpty();\n\n      for (let j = 0; j < 4; j++) {\n        _bbox.expandByPoint(nearVerts[j]);\n\n        _bbox.expandByPoint(farVerts[j]);\n      }\n\n      _bbox.getCenter(_center);\n\n      _center.z = _bbox.max.z + this.lightMargin;\n      _center.x = Math.floor(_center.x / texelWidth) * texelWidth;\n      _center.y = Math.floor(_center.y / texelHeight) * texelHeight;\n\n      _center.applyMatrix4(light.shadow.camera.matrixWorld);\n\n      light.position.copy(_center);\n      light.target.position.copy(_center);\n      light.target.position.x += this.lightDirection.x;\n      light.target.position.y += this.lightDirection.y;\n      light.target.position.z += this.lightDirection.z;\n    }\n  }\n\n  injectInclude() {\n    ShaderChunk.lights_fragment_begin = Shader.lights_fragment_begin;\n    ShaderChunk.lights_pars_begin = Shader.lights_pars_begin;\n  }\n\n  setupMaterial(material) {\n    material.defines = material.defines || {};\n    material.defines.USE_CSM = 1;\n    material.defines.CSM_CASCADES = this.cascades;\n\n    if (this.fade) {\n      material.defines.CSM_FADE = '';\n    }\n\n    const breaksVec2 = [];\n    const scope = this;\n    const shaders = this.shaders;\n\n    material.onBeforeCompile = shader => {\n      const far = Math.min(scope.camera.far, scope.maxFar);\n      scope.getExtendedBreaks(breaksVec2);\n      shader.uniforms.CSM_cascades = {\n        value: breaksVec2\n      };\n      shader.uniforms.cameraNear = {\n        value: scope.camera.near\n      };\n      shader.uniforms.shadowFar = {\n        value: far\n      };\n      shaders.set(material, shader);\n    };\n\n    shaders.set(material, null);\n  }\n\n  updateUniforms() {\n    const far = Math.min(this.camera.far, this.maxFar);\n    const shaders = this.shaders;\n    shaders.forEach(function (shader, material) {\n      if (shader !== null) {\n        const uniforms = shader.uniforms;\n        this.getExtendedBreaks(uniforms.CSM_cascades.value);\n        uniforms.cameraNear.value = this.camera.near;\n        uniforms.shadowFar.value = far;\n      }\n\n      if (!this.fade && 'CSM_FADE' in material.defines) {\n        delete material.defines.CSM_FADE;\n        material.needsUpdate = true;\n      } else if (this.fade && !('CSM_FADE' in material.defines)) {\n        material.defines.CSM_FADE = '';\n        material.needsUpdate = true;\n      }\n    }, this);\n  }\n\n  getExtendedBreaks(target) {\n    while (target.length < this.breaks.length) {\n      target.push(new Vector2());\n    }\n\n    target.length = this.breaks.length;\n\n    for (let i = 0; i < this.cascades; i++) {\n      const amount = this.breaks[i];\n      const prev = this.breaks[i - 1] || 0;\n      target[i].x = prev;\n      target[i].y = amount;\n    }\n  }\n\n  updateFrustums() {\n    this.getBreaks();\n    this.initCascades();\n    this.updateShadowBounds();\n    this.updateUniforms();\n  }\n\n  remove() {\n    for (let i = 0; i < this.lights.length; i++) {\n      this.parent.remove(this.lights[i]);\n    }\n  }\n\n  dispose() {\n    const shaders = this.shaders;\n    shaders.forEach((shader, material) => {\n      delete material.onBeforeCompile;\n      delete material.defines.USE_CSM;\n      delete material.defines.CSM_CASCADES;\n      delete material.defines.CSM_FADE;\n\n      if (shader !== null) {\n        delete shader.uniforms.CSM_cascades;\n        delete shader.uniforms.cameraNear;\n        delete shader.uniforms.shadowFar;\n      }\n\n      material.needsUpdate = true;\n    });\n    shaders.clear();\n  }\n\n}\n\nexport { CSM };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}