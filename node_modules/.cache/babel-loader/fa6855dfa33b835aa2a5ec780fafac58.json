{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Color, Vector2, Mesh, Line, Points, Matrix3, BufferAttribute } from 'three';\n\nclass OBJExporter {\n  constructor() {\n    _defineProperty(this, \"output\", void 0);\n\n    _defineProperty(this, \"indexVertex\", void 0);\n\n    _defineProperty(this, \"indexVertexUvs\", void 0);\n\n    _defineProperty(this, \"indexNormals\", void 0);\n\n    _defineProperty(this, \"vertex\", void 0);\n\n    _defineProperty(this, \"color\", void 0);\n\n    _defineProperty(this, \"normal\", void 0);\n\n    _defineProperty(this, \"uv\", void 0);\n\n    _defineProperty(this, \"face\", void 0);\n\n    this.output = '';\n    this.indexVertex = 0;\n    this.indexVertexUvs = 0;\n    this.indexNormals = 0;\n    this.vertex = new Vector3();\n    this.color = new Color();\n    this.normal = new Vector3();\n    this.uv = new Vector2();\n    this.face = [];\n  }\n\n  parse(object) {\n    object.traverse(child => {\n      if (child instanceof Mesh && child.isMesh) {\n        this.parseMesh(child);\n      }\n\n      if (child instanceof Line && child.isLine) {\n        this.parseLine(child);\n      }\n\n      if (child instanceof Points && child.isPoints) {\n        this.parsePoints(child);\n      }\n    });\n    return this.output;\n  }\n\n  parseMesh(mesh) {\n    let nbVertex = 0;\n    let nbNormals = 0;\n    let nbVertexUvs = 0;\n    const geometry = mesh.geometry;\n    const normalMatrixWorld = new Matrix3();\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n    } // shortcuts\n\n\n    const vertices = geometry.getAttribute('position');\n    const normals = geometry.getAttribute('normal');\n    const uvs = geometry.getAttribute('uv');\n    const indices = geometry.getIndex(); // name of the mesh object\n\n    this.output += `o ${mesh.name}\\n`; // name of the mesh material\n\n    if (mesh.material && !Array.isArray(mesh.material) && mesh.material.name) {\n      this.output += `usemtl ${mesh.material.name}\\n`;\n    } // vertices\n\n\n    if (vertices !== undefined) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i); // transform the vertex to world space\n\n        this.vertex.applyMatrix4(mesh.matrixWorld); // transform the vertex to export format\n\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\\n`;\n      }\n    } // uvs\n\n\n    if (uvs !== undefined) {\n      for (let i = 0, l = uvs.count; i < l; i++, nbVertexUvs++) {\n        this.uv.x = uvs.getX(i);\n        this.uv.y = uvs.getY(i); // transform the uv to export format\n\n        this.output += `vt ${this.uv.x} ${this.uv.y}\\n`;\n      }\n    } // normals\n\n\n    if (normals !== undefined) {\n      normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n\n      for (let i = 0, l = normals.count; i < l; i++, nbNormals++) {\n        this.normal.x = normals.getX(i);\n        this.normal.y = normals.getY(i);\n        this.normal.z = normals.getZ(i); // transform the normal to world space\n\n        this.normal.applyMatrix3(normalMatrixWorld).normalize(); // transform the normal to export format\n\n        this.output += `vn ${this.normal.x} ${this.normal.y} ${this.normal.z}\\n`;\n      }\n    } // faces\n\n\n    if (indices !== null) {\n      for (let i = 0, l = indices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = indices.getX(i + m) + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : ''}${normals ? `/${this.indexNormals + j}` : ''}` : '');\n        } // transform the face to export format\n\n\n        this.output += `f ${this.face.join(' ')}\\n`;\n      }\n    } else {\n      for (let i = 0, l = vertices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = i + m + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : ''}${normals ? `/${this.indexNormals + j}` : ''}` : '');\n        } // transform the face to export format\n\n\n        this.output += `f ${this.face.join(' ')}\\n`;\n      }\n    } // update index\n\n\n    this.indexVertex += nbVertex;\n    this.indexVertexUvs += nbVertexUvs;\n    this.indexNormals += nbNormals;\n  }\n\n  parseLine(line) {\n    let nbVertex = 0;\n    const geometry = line.geometry;\n    const type = line.type;\n\n    if (geometry.isBufferGeometry) {\n      throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n    } // shortcuts\n\n\n    const vertices = geometry.getAttribute('position'); // name of the line object\n\n    this.output += `o ${line.name}\\n`;\n\n    if (vertices !== undefined) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i); // transform the vertex to world space\n\n        this.vertex.applyMatrix4(line.matrixWorld); // transform the vertex to export format\n\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\\n`;\n      }\n    }\n\n    if (type === 'Line') {\n      this.output += 'l ';\n\n      for (let j = 1, l = vertices.count; j <= l; j++) {\n        this.output += `${this.indexVertex + j} `;\n      }\n\n      this.output += '\\n';\n    }\n\n    if (type === 'LineSegments') {\n      for (let j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1) {\n        this.output += `l ${this.indexVertex + j} ${this.indexVertex + k}\\n`;\n      }\n    } // update index\n\n\n    this.indexVertex += nbVertex;\n  }\n\n  parsePoints(points) {\n    let nbVertex = 0;\n    const geometry = points.geometry;\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n    }\n\n    const vertices = geometry.getAttribute('position');\n    const colors = geometry.getAttribute('color');\n    this.output += `o ${points.name}\\n`;\n\n    if (vertices !== undefined) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.fromBufferAttribute(vertices, i);\n        this.vertex.applyMatrix4(points.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}`;\n\n        if (colors !== undefined && colors instanceof BufferAttribute) {\n          this.color.fromBufferAttribute(colors, i);\n          this.output += ` ${this.color.r} ${this.color.g} ${this.color.b}`;\n        }\n\n        this.output += '\\n';\n      }\n    }\n\n    this.output += 'p ';\n\n    for (let j = 1, l = vertices.count; j <= l; j++) {\n      this.output += `${this.indexVertex + j} `;\n    }\n\n    this.output += '\\n'; // update index\n\n    this.indexVertex += nbVertex;\n  }\n\n}\n\nexport { OBJExporter };","map":{"version":3,"names":["_defineProperty","Vector3","Color","Vector2","Mesh","Line","Points","Matrix3","BufferAttribute","OBJExporter","constructor","output","indexVertex","indexVertexUvs","indexNormals","vertex","color","normal","uv","face","parse","object","traverse","child","isMesh","parseMesh","isLine","parseLine","isPoints","parsePoints","mesh","nbVertex","nbNormals","nbVertexUvs","geometry","normalMatrixWorld","isBufferGeometry","Error","vertices","getAttribute","normals","uvs","indices","getIndex","name","material","Array","isArray","undefined","i","l","count","x","getX","y","getY","z","getZ","applyMatrix4","matrixWorld","getNormalMatrix","applyMatrix3","normalize","m","j","join","line","type","k","points","colors","fromBufferAttribute","r","g","b"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/three-stdlib/exporters/OBJExporter.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Color, Vector2, Mesh, Line, Points, Matrix3, BufferAttribute } from 'three';\n\nclass OBJExporter {\n  constructor() {\n    _defineProperty(this, \"output\", void 0);\n\n    _defineProperty(this, \"indexVertex\", void 0);\n\n    _defineProperty(this, \"indexVertexUvs\", void 0);\n\n    _defineProperty(this, \"indexNormals\", void 0);\n\n    _defineProperty(this, \"vertex\", void 0);\n\n    _defineProperty(this, \"color\", void 0);\n\n    _defineProperty(this, \"normal\", void 0);\n\n    _defineProperty(this, \"uv\", void 0);\n\n    _defineProperty(this, \"face\", void 0);\n\n    this.output = '';\n    this.indexVertex = 0;\n    this.indexVertexUvs = 0;\n    this.indexNormals = 0;\n    this.vertex = new Vector3();\n    this.color = new Color();\n    this.normal = new Vector3();\n    this.uv = new Vector2();\n    this.face = [];\n  }\n\n  parse(object) {\n    object.traverse(child => {\n      if (child instanceof Mesh && child.isMesh) {\n        this.parseMesh(child);\n      }\n\n      if (child instanceof Line && child.isLine) {\n        this.parseLine(child);\n      }\n\n      if (child instanceof Points && child.isPoints) {\n        this.parsePoints(child);\n      }\n    });\n    return this.output;\n  }\n\n  parseMesh(mesh) {\n    let nbVertex = 0;\n    let nbNormals = 0;\n    let nbVertexUvs = 0;\n    const geometry = mesh.geometry;\n    const normalMatrixWorld = new Matrix3();\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n    } // shortcuts\n\n\n    const vertices = geometry.getAttribute('position');\n    const normals = geometry.getAttribute('normal');\n    const uvs = geometry.getAttribute('uv');\n    const indices = geometry.getIndex(); // name of the mesh object\n\n    this.output += `o ${mesh.name}\\n`; // name of the mesh material\n\n    if (mesh.material && !Array.isArray(mesh.material) && mesh.material.name) {\n      this.output += `usemtl ${mesh.material.name}\\n`;\n    } // vertices\n\n\n    if (vertices !== undefined) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i); // transform the vertex to world space\n\n        this.vertex.applyMatrix4(mesh.matrixWorld); // transform the vertex to export format\n\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\\n`;\n      }\n    } // uvs\n\n\n    if (uvs !== undefined) {\n      for (let i = 0, l = uvs.count; i < l; i++, nbVertexUvs++) {\n        this.uv.x = uvs.getX(i);\n        this.uv.y = uvs.getY(i); // transform the uv to export format\n\n        this.output += `vt ${this.uv.x} ${this.uv.y}\\n`;\n      }\n    } // normals\n\n\n    if (normals !== undefined) {\n      normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n\n      for (let i = 0, l = normals.count; i < l; i++, nbNormals++) {\n        this.normal.x = normals.getX(i);\n        this.normal.y = normals.getY(i);\n        this.normal.z = normals.getZ(i); // transform the normal to world space\n\n        this.normal.applyMatrix3(normalMatrixWorld).normalize(); // transform the normal to export format\n\n        this.output += `vn ${this.normal.x} ${this.normal.y} ${this.normal.z}\\n`;\n      }\n    } // faces\n\n\n    if (indices !== null) {\n      for (let i = 0, l = indices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = indices.getX(i + m) + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : ''}${normals ? `/${this.indexNormals + j}` : ''}` : '');\n        } // transform the face to export format\n\n\n        this.output += `f ${this.face.join(' ')}\\n`;\n      }\n    } else {\n      for (let i = 0, l = vertices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = i + m + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : ''}${normals ? `/${this.indexNormals + j}` : ''}` : '');\n        } // transform the face to export format\n\n\n        this.output += `f ${this.face.join(' ')}\\n`;\n      }\n    } // update index\n\n\n    this.indexVertex += nbVertex;\n    this.indexVertexUvs += nbVertexUvs;\n    this.indexNormals += nbNormals;\n  }\n\n  parseLine(line) {\n    let nbVertex = 0;\n    const geometry = line.geometry;\n    const type = line.type;\n\n    if (geometry.isBufferGeometry) {\n      throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n    } // shortcuts\n\n\n    const vertices = geometry.getAttribute('position'); // name of the line object\n\n    this.output += `o ${line.name}\\n`;\n\n    if (vertices !== undefined) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i); // transform the vertex to world space\n\n        this.vertex.applyMatrix4(line.matrixWorld); // transform the vertex to export format\n\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\\n`;\n      }\n    }\n\n    if (type === 'Line') {\n      this.output += 'l ';\n\n      for (let j = 1, l = vertices.count; j <= l; j++) {\n        this.output += `${this.indexVertex + j} `;\n      }\n\n      this.output += '\\n';\n    }\n\n    if (type === 'LineSegments') {\n      for (let j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1) {\n        this.output += `l ${this.indexVertex + j} ${this.indexVertex + k}\\n`;\n      }\n    } // update index\n\n\n    this.indexVertex += nbVertex;\n  }\n\n  parsePoints(points) {\n    let nbVertex = 0;\n    const geometry = points.geometry;\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n    }\n\n    const vertices = geometry.getAttribute('position');\n    const colors = geometry.getAttribute('color');\n    this.output += `o ${points.name}\\n`;\n\n    if (vertices !== undefined) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.fromBufferAttribute(vertices, i);\n        this.vertex.applyMatrix4(points.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}`;\n\n        if (colors !== undefined && colors instanceof BufferAttribute) {\n          this.color.fromBufferAttribute(colors, i);\n          this.output += ` ${this.color.r} ${this.color.g} ${this.color.b}`;\n        }\n\n        this.output += '\\n';\n      }\n    }\n\n    this.output += 'p ';\n\n    for (let j = 1, l = vertices.count; j <= l; j++) {\n      this.output += `${this.indexVertex + j} `;\n    }\n\n    this.output += '\\n'; // update index\n\n    this.indexVertex += nbVertex;\n  }\n\n}\n\nexport { OBJExporter };\n"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,2CAA5B;AACA,SAASC,OAAT,EAAkBC,KAAlB,EAAyBC,OAAzB,EAAkCC,IAAlC,EAAwCC,IAAxC,EAA8CC,MAA9C,EAAsDC,OAAtD,EAA+DC,eAA/D,QAAsF,OAAtF;;AAEA,MAAMC,WAAN,CAAkB;EAChBC,WAAW,GAAG;IACZV,eAAe,CAAC,IAAD,EAAO,QAAP,EAAiB,KAAK,CAAtB,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,aAAP,EAAsB,KAAK,CAA3B,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,gBAAP,EAAyB,KAAK,CAA9B,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,cAAP,EAAuB,KAAK,CAA5B,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,QAAP,EAAiB,KAAK,CAAtB,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,OAAP,EAAgB,KAAK,CAArB,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,QAAP,EAAiB,KAAK,CAAtB,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,KAAK,CAAlB,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,MAAP,EAAe,KAAK,CAApB,CAAf;;IAEA,KAAKW,MAAL,GAAc,EAAd;IACA,KAAKC,WAAL,GAAmB,CAAnB;IACA,KAAKC,cAAL,GAAsB,CAAtB;IACA,KAAKC,YAAL,GAAoB,CAApB;IACA,KAAKC,MAAL,GAAc,IAAId,OAAJ,EAAd;IACA,KAAKe,KAAL,GAAa,IAAId,KAAJ,EAAb;IACA,KAAKe,MAAL,GAAc,IAAIhB,OAAJ,EAAd;IACA,KAAKiB,EAAL,GAAU,IAAIf,OAAJ,EAAV;IACA,KAAKgB,IAAL,GAAY,EAAZ;EACD;;EAEDC,KAAK,CAACC,MAAD,EAAS;IACZA,MAAM,CAACC,QAAP,CAAgBC,KAAK,IAAI;MACvB,IAAIA,KAAK,YAAYnB,IAAjB,IAAyBmB,KAAK,CAACC,MAAnC,EAA2C;QACzC,KAAKC,SAAL,CAAeF,KAAf;MACD;;MAED,IAAIA,KAAK,YAAYlB,IAAjB,IAAyBkB,KAAK,CAACG,MAAnC,EAA2C;QACzC,KAAKC,SAAL,CAAeJ,KAAf;MACD;;MAED,IAAIA,KAAK,YAAYjB,MAAjB,IAA2BiB,KAAK,CAACK,QAArC,EAA+C;QAC7C,KAAKC,WAAL,CAAiBN,KAAjB;MACD;IACF,CAZD;IAaA,OAAO,KAAKZ,MAAZ;EACD;;EAEDc,SAAS,CAACK,IAAD,EAAO;IACd,IAAIC,QAAQ,GAAG,CAAf;IACA,IAAIC,SAAS,GAAG,CAAhB;IACA,IAAIC,WAAW,GAAG,CAAlB;IACA,MAAMC,QAAQ,GAAGJ,IAAI,CAACI,QAAtB;IACA,MAAMC,iBAAiB,GAAG,IAAI5B,OAAJ,EAA1B;;IAEA,IAAI,CAAC2B,QAAQ,CAACE,gBAAd,EAAgC;MAC9B,MAAM,IAAIC,KAAJ,CAAU,kEAAV,CAAN;IACD,CATa,CASZ;;;IAGF,MAAMC,QAAQ,GAAGJ,QAAQ,CAACK,YAAT,CAAsB,UAAtB,CAAjB;IACA,MAAMC,OAAO,GAAGN,QAAQ,CAACK,YAAT,CAAsB,QAAtB,CAAhB;IACA,MAAME,GAAG,GAAGP,QAAQ,CAACK,YAAT,CAAsB,IAAtB,CAAZ;IACA,MAAMG,OAAO,GAAGR,QAAQ,CAACS,QAAT,EAAhB,CAfc,CAeuB;;IAErC,KAAKhC,MAAL,IAAgB,KAAImB,IAAI,CAACc,IAAK,IAA9B,CAjBc,CAiBqB;;IAEnC,IAAId,IAAI,CAACe,QAAL,IAAiB,CAACC,KAAK,CAACC,OAAN,CAAcjB,IAAI,CAACe,QAAnB,CAAlB,IAAkDf,IAAI,CAACe,QAAL,CAAcD,IAApE,EAA0E;MACxE,KAAKjC,MAAL,IAAgB,UAASmB,IAAI,CAACe,QAAL,CAAcD,IAAK,IAA5C;IACD,CArBa,CAqBZ;;;IAGF,IAAIN,QAAQ,KAAKU,SAAjB,EAA4B;MAC1B,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGZ,QAAQ,CAACa,KAA7B,EAAoCF,CAAC,GAAGC,CAAxC,EAA2CD,CAAC,IAAIlB,QAAQ,EAAxD,EAA4D;QAC1D,KAAKhB,MAAL,CAAYqC,CAAZ,GAAgBd,QAAQ,CAACe,IAAT,CAAcJ,CAAd,CAAhB;QACA,KAAKlC,MAAL,CAAYuC,CAAZ,GAAgBhB,QAAQ,CAACiB,IAAT,CAAcN,CAAd,CAAhB;QACA,KAAKlC,MAAL,CAAYyC,CAAZ,GAAgBlB,QAAQ,CAACmB,IAAT,CAAcR,CAAd,CAAhB,CAH0D,CAGxB;;QAElC,KAAKlC,MAAL,CAAY2C,YAAZ,CAAyB5B,IAAI,CAAC6B,WAA9B,EAL0D,CAKd;;QAE5C,KAAKhD,MAAL,IAAgB,KAAI,KAAKI,MAAL,CAAYqC,CAAE,IAAG,KAAKrC,MAAL,CAAYuC,CAAE,IAAG,KAAKvC,MAAL,CAAYyC,CAAE,IAApE;MACD;IACF,CAlCa,CAkCZ;;;IAGF,IAAIf,GAAG,KAAKO,SAAZ,EAAuB;MACrB,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGT,GAAG,CAACU,KAAxB,EAA+BF,CAAC,GAAGC,CAAnC,EAAsCD,CAAC,IAAIhB,WAAW,EAAtD,EAA0D;QACxD,KAAKf,EAAL,CAAQkC,CAAR,GAAYX,GAAG,CAACY,IAAJ,CAASJ,CAAT,CAAZ;QACA,KAAK/B,EAAL,CAAQoC,CAAR,GAAYb,GAAG,CAACc,IAAJ,CAASN,CAAT,CAAZ,CAFwD,CAE/B;;QAEzB,KAAKtC,MAAL,IAAgB,MAAK,KAAKO,EAAL,CAAQkC,CAAE,IAAG,KAAKlC,EAAL,CAAQoC,CAAE,IAA5C;MACD;IACF,CA5Ca,CA4CZ;;;IAGF,IAAId,OAAO,KAAKQ,SAAhB,EAA2B;MACzBb,iBAAiB,CAACyB,eAAlB,CAAkC9B,IAAI,CAAC6B,WAAvC;;MAEA,KAAK,IAAIV,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGV,OAAO,CAACW,KAA5B,EAAmCF,CAAC,GAAGC,CAAvC,EAA0CD,CAAC,IAAIjB,SAAS,EAAxD,EAA4D;QAC1D,KAAKf,MAAL,CAAYmC,CAAZ,GAAgBZ,OAAO,CAACa,IAAR,CAAaJ,CAAb,CAAhB;QACA,KAAKhC,MAAL,CAAYqC,CAAZ,GAAgBd,OAAO,CAACe,IAAR,CAAaN,CAAb,CAAhB;QACA,KAAKhC,MAAL,CAAYuC,CAAZ,GAAgBhB,OAAO,CAACiB,IAAR,CAAaR,CAAb,CAAhB,CAH0D,CAGzB;;QAEjC,KAAKhC,MAAL,CAAY4C,YAAZ,CAAyB1B,iBAAzB,EAA4C2B,SAA5C,GAL0D,CAKD;;QAEzD,KAAKnD,MAAL,IAAgB,MAAK,KAAKM,MAAL,CAAYmC,CAAE,IAAG,KAAKnC,MAAL,CAAYqC,CAAE,IAAG,KAAKrC,MAAL,CAAYuC,CAAE,IAArE;MACD;IACF,CA3Da,CA2DZ;;;IAGF,IAAId,OAAO,KAAK,IAAhB,EAAsB;MACpB,KAAK,IAAIO,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGR,OAAO,CAACS,KAA5B,EAAmCF,CAAC,GAAGC,CAAvC,EAA0CD,CAAC,IAAI,CAA/C,EAAkD;QAChD,KAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;UAC1B,MAAMC,CAAC,GAAGtB,OAAO,CAACW,IAAR,CAAaJ,CAAC,GAAGc,CAAjB,IAAsB,CAAhC;UACA,KAAK5C,IAAL,CAAU4C,CAAV,IAAe,KAAKnD,WAAL,GAAmBoD,CAAnB,IAAwBxB,OAAO,IAAIC,GAAX,GAAkB,IAAGA,GAAG,GAAG,KAAK5B,cAAL,GAAsBmD,CAAzB,GAA6B,EAAG,GAAExB,OAAO,GAAI,IAAG,KAAK1B,YAAL,GAAoBkD,CAAE,EAA7B,GAAiC,EAAG,EAArG,GAAyG,EAAjI,CAAf;QACD,CAJ+C,CAI9C;;;QAGF,KAAKrD,MAAL,IAAgB,KAAI,KAAKQ,IAAL,CAAU8C,IAAV,CAAe,GAAf,CAAoB,IAAxC;MACD;IACF,CAVD,MAUO;MACL,KAAK,IAAIhB,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGZ,QAAQ,CAACa,KAA7B,EAAoCF,CAAC,GAAGC,CAAxC,EAA2CD,CAAC,IAAI,CAAhD,EAAmD;QACjD,KAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;UAC1B,MAAMC,CAAC,GAAGf,CAAC,GAAGc,CAAJ,GAAQ,CAAlB;UACA,KAAK5C,IAAL,CAAU4C,CAAV,IAAe,KAAKnD,WAAL,GAAmBoD,CAAnB,IAAwBxB,OAAO,IAAIC,GAAX,GAAkB,IAAGA,GAAG,GAAG,KAAK5B,cAAL,GAAsBmD,CAAzB,GAA6B,EAAG,GAAExB,OAAO,GAAI,IAAG,KAAK1B,YAAL,GAAoBkD,CAAE,EAA7B,GAAiC,EAAG,EAArG,GAAyG,EAAjI,CAAf;QACD,CAJgD,CAI/C;;;QAGF,KAAKrD,MAAL,IAAgB,KAAI,KAAKQ,IAAL,CAAU8C,IAAV,CAAe,GAAf,CAAoB,IAAxC;MACD;IACF,CAlFa,CAkFZ;;;IAGF,KAAKrD,WAAL,IAAoBmB,QAApB;IACA,KAAKlB,cAAL,IAAuBoB,WAAvB;IACA,KAAKnB,YAAL,IAAqBkB,SAArB;EACD;;EAEDL,SAAS,CAACuC,IAAD,EAAO;IACd,IAAInC,QAAQ,GAAG,CAAf;IACA,MAAMG,QAAQ,GAAGgC,IAAI,CAAChC,QAAtB;IACA,MAAMiC,IAAI,GAAGD,IAAI,CAACC,IAAlB;;IAEA,IAAIjC,QAAQ,CAACE,gBAAb,EAA+B;MAC7B,MAAM,IAAIC,KAAJ,CAAU,kEAAV,CAAN;IACD,CAPa,CAOZ;;;IAGF,MAAMC,QAAQ,GAAGJ,QAAQ,CAACK,YAAT,CAAsB,UAAtB,CAAjB,CAVc,CAUsC;;IAEpD,KAAK5B,MAAL,IAAgB,KAAIuD,IAAI,CAACtB,IAAK,IAA9B;;IAEA,IAAIN,QAAQ,KAAKU,SAAjB,EAA4B;MAC1B,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGZ,QAAQ,CAACa,KAA7B,EAAoCF,CAAC,GAAGC,CAAxC,EAA2CD,CAAC,IAAIlB,QAAQ,EAAxD,EAA4D;QAC1D,KAAKhB,MAAL,CAAYqC,CAAZ,GAAgBd,QAAQ,CAACe,IAAT,CAAcJ,CAAd,CAAhB;QACA,KAAKlC,MAAL,CAAYuC,CAAZ,GAAgBhB,QAAQ,CAACiB,IAAT,CAAcN,CAAd,CAAhB;QACA,KAAKlC,MAAL,CAAYyC,CAAZ,GAAgBlB,QAAQ,CAACmB,IAAT,CAAcR,CAAd,CAAhB,CAH0D,CAGxB;;QAElC,KAAKlC,MAAL,CAAY2C,YAAZ,CAAyBQ,IAAI,CAACP,WAA9B,EAL0D,CAKd;;QAE5C,KAAKhD,MAAL,IAAgB,KAAI,KAAKI,MAAL,CAAYqC,CAAE,IAAG,KAAKrC,MAAL,CAAYuC,CAAE,IAAG,KAAKvC,MAAL,CAAYyC,CAAE,IAApE;MACD;IACF;;IAED,IAAIW,IAAI,KAAK,MAAb,EAAqB;MACnB,KAAKxD,MAAL,IAAe,IAAf;;MAEA,KAAK,IAAIqD,CAAC,GAAG,CAAR,EAAWd,CAAC,GAAGZ,QAAQ,CAACa,KAA7B,EAAoCa,CAAC,IAAId,CAAzC,EAA4Cc,CAAC,EAA7C,EAAiD;QAC/C,KAAKrD,MAAL,IAAgB,GAAE,KAAKC,WAAL,GAAmBoD,CAAE,GAAvC;MACD;;MAED,KAAKrD,MAAL,IAAe,IAAf;IACD;;IAED,IAAIwD,IAAI,KAAK,cAAb,EAA6B;MAC3B,KAAK,IAAIH,CAAC,GAAG,CAAR,EAAWI,CAAC,GAAGJ,CAAC,GAAG,CAAnB,EAAsBd,CAAC,GAAGZ,QAAQ,CAACa,KAAxC,EAA+Ca,CAAC,GAAGd,CAAnD,EAAsDc,CAAC,IAAI,CAAL,EAAQI,CAAC,GAAGJ,CAAC,GAAG,CAAtE,EAAyE;QACvE,KAAKrD,MAAL,IAAgB,KAAI,KAAKC,WAAL,GAAmBoD,CAAE,IAAG,KAAKpD,WAAL,GAAmBwD,CAAE,IAAjE;MACD;IACF,CAxCa,CAwCZ;;;IAGF,KAAKxD,WAAL,IAAoBmB,QAApB;EACD;;EAEDF,WAAW,CAACwC,MAAD,EAAS;IAClB,IAAItC,QAAQ,GAAG,CAAf;IACA,MAAMG,QAAQ,GAAGmC,MAAM,CAACnC,QAAxB;;IAEA,IAAI,CAACA,QAAQ,CAACE,gBAAd,EAAgC;MAC9B,MAAM,IAAIC,KAAJ,CAAU,kEAAV,CAAN;IACD;;IAED,MAAMC,QAAQ,GAAGJ,QAAQ,CAACK,YAAT,CAAsB,UAAtB,CAAjB;IACA,MAAM+B,MAAM,GAAGpC,QAAQ,CAACK,YAAT,CAAsB,OAAtB,CAAf;IACA,KAAK5B,MAAL,IAAgB,KAAI0D,MAAM,CAACzB,IAAK,IAAhC;;IAEA,IAAIN,QAAQ,KAAKU,SAAjB,EAA4B;MAC1B,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGZ,QAAQ,CAACa,KAA7B,EAAoCF,CAAC,GAAGC,CAAxC,EAA2CD,CAAC,IAAIlB,QAAQ,EAAxD,EAA4D;QAC1D,KAAKhB,MAAL,CAAYwD,mBAAZ,CAAgCjC,QAAhC,EAA0CW,CAA1C;QACA,KAAKlC,MAAL,CAAY2C,YAAZ,CAAyBW,MAAM,CAACV,WAAhC;QACA,KAAKhD,MAAL,IAAgB,KAAI,KAAKI,MAAL,CAAYqC,CAAE,IAAG,KAAKrC,MAAL,CAAYuC,CAAE,IAAG,KAAKvC,MAAL,CAAYyC,CAAE,EAApE;;QAEA,IAAIc,MAAM,KAAKtB,SAAX,IAAwBsB,MAAM,YAAY9D,eAA9C,EAA+D;UAC7D,KAAKQ,KAAL,CAAWuD,mBAAX,CAA+BD,MAA/B,EAAuCrB,CAAvC;UACA,KAAKtC,MAAL,IAAgB,IAAG,KAAKK,KAAL,CAAWwD,CAAE,IAAG,KAAKxD,KAAL,CAAWyD,CAAE,IAAG,KAAKzD,KAAL,CAAW0D,CAAE,EAAhE;QACD;;QAED,KAAK/D,MAAL,IAAe,IAAf;MACD;IACF;;IAED,KAAKA,MAAL,IAAe,IAAf;;IAEA,KAAK,IAAIqD,CAAC,GAAG,CAAR,EAAWd,CAAC,GAAGZ,QAAQ,CAACa,KAA7B,EAAoCa,CAAC,IAAId,CAAzC,EAA4Cc,CAAC,EAA7C,EAAiD;MAC/C,KAAKrD,MAAL,IAAgB,GAAE,KAAKC,WAAL,GAAmBoD,CAAE,GAAvC;IACD;;IAED,KAAKrD,MAAL,IAAe,IAAf,CAjCkB,CAiCG;;IAErB,KAAKC,WAAL,IAAoBmB,QAApB;EACD;;AA5Ne;;AAgOlB,SAAStB,WAAT"},"metadata":{},"sourceType":"module"}