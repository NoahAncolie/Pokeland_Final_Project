{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, sRGBEncoding, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from 'three';\nimport { unzlibSync } from 'fflate';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * Binary format specification:\n *\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nlet fbxTree;\nlet connections;\nlet sceneGraph;\n\nclass FBXLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(FBXBuffer, path) {\n    if (isFbxFormatBinary(FBXBuffer)) {\n      fbxTree = new BinaryParser().parse(FBXBuffer);\n    } else {\n      const FBXText = convertArrayBufferToString(FBXBuffer);\n\n      if (!isFbxFormatASCII(FBXText)) {\n        throw new Error('THREE.FBXLoader: Unknown format.');\n      }\n\n      if (getFbxVersion(FBXText) < 7000) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n      }\n\n      fbxTree = new TextParser().parse(FBXText);\n    } // console.log( fbxTree );\n\n\n    const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n  }\n\n} // Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\n\n\nclass FBXTreeParser {\n  constructor(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n\n  parse() {\n    connections = this.parseConnections();\n    const images = this.parseImages();\n    const textures = this.parseTextures(images);\n    const materials = this.parseMaterials(textures);\n    const deformers = this.parseDeformers();\n    const geometryMap = new GeometryParser().parse(deformers);\n    this.parseScene(deformers, geometryMap, materials);\n    return sceneGraph;\n  } // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n\n\n  parseConnections() {\n    const connectionMap = new Map();\n\n    if ('Connections' in fbxTree) {\n      const rawConnections = fbxTree.Connections.connections;\n      rawConnections.forEach(function (rawConnection) {\n        const fromID = rawConnection[0];\n        const toID = rawConnection[1];\n        const relationship = rawConnection[2];\n\n        if (!connectionMap.has(fromID)) {\n          connectionMap.set(fromID, {\n            parents: [],\n            children: []\n          });\n        }\n\n        const parentRelationship = {\n          ID: toID,\n          relationship: relationship\n        };\n        connectionMap.get(fromID).parents.push(parentRelationship);\n\n        if (!connectionMap.has(toID)) {\n          connectionMap.set(toID, {\n            parents: [],\n            children: []\n          });\n        }\n\n        const childRelationship = {\n          ID: fromID,\n          relationship: relationship\n        };\n        connectionMap.get(toID).children.push(childRelationship);\n      });\n    }\n\n    return connectionMap;\n  } // Parse FBXTree.Objects.Video for embedded image data\n  // These images are connected to textures in FBXTree.Objects.Textures\n  // via FBXTree.Connections.\n\n\n  parseImages() {\n    const images = {};\n    const blobs = {};\n\n    if ('Video' in fbxTree.Objects) {\n      const videoNodes = fbxTree.Objects.Video;\n\n      for (const nodeID in videoNodes) {\n        const videoNode = videoNodes[nodeID];\n        const id = parseInt(nodeID);\n        images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n        if ('Content' in videoNode) {\n          const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n          const base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n\n          if (arrayBufferContent || base64Content) {\n            const image = this.parseImage(videoNodes[nodeID]);\n            blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n          }\n        }\n      }\n    }\n\n    for (const id in images) {\n      const filename = images[id];\n      if (blobs[filename] !== undefined) images[id] = blobs[filename];else images[id] = images[id].split('\\\\').pop();\n    }\n\n    return images;\n  } // Parse embedded image data in FBXTree.Video.Content\n\n\n  parseImage(videoNode) {\n    const content = videoNode.Content;\n    const fileName = videoNode.RelativeFilename || videoNode.Filename;\n    const extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n    let type;\n\n    switch (extension) {\n      case 'bmp':\n        type = 'image/bmp';\n        break;\n\n      case 'jpg':\n      case 'jpeg':\n        type = 'image/jpeg';\n        break;\n\n      case 'png':\n        type = 'image/png';\n        break;\n\n      case 'tif':\n        type = 'image/tiff';\n        break;\n\n      case 'tga':\n        if (this.manager.getHandler('.tga') === null) {\n          console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n        }\n\n        type = 'image/tga';\n        break;\n\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n        return;\n    }\n\n    if (typeof content === 'string') {\n      // ASCII format\n      return 'data:' + type + ';base64,' + content;\n    } else {\n      // Binary Format\n      const array = new Uint8Array(content);\n      return window.URL.createObjectURL(new Blob([array], {\n        type: type\n      }));\n    }\n  } // Parse nodes in FBXTree.Objects.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.Video\n\n\n  parseTextures(images) {\n    const textureMap = new Map();\n\n    if ('Texture' in fbxTree.Objects) {\n      const textureNodes = fbxTree.Objects.Texture;\n\n      for (const nodeID in textureNodes) {\n        const texture = this.parseTexture(textureNodes[nodeID], images);\n        textureMap.set(parseInt(nodeID), texture);\n      }\n    }\n\n    return textureMap;\n  } // Parse individual node in FBXTree.Objects.Texture\n\n\n  parseTexture(textureNode, images) {\n    const texture = this.loadTexture(textureNode, images);\n    texture.ID = textureNode.id;\n    texture.name = textureNode.attrName;\n    const wrapModeU = textureNode.WrapModeU;\n    const wrapModeV = textureNode.WrapModeV;\n    const valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n    const valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n    // 0: repeat(default), 1: clamp\n\n    texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\n    if ('Scaling' in textureNode) {\n      const values = textureNode.Scaling.value;\n      texture.repeat.x = values[0];\n      texture.repeat.y = values[1];\n    }\n\n    return texture;\n  } // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n\n\n  loadTexture(textureNode, images) {\n    let fileName;\n    const currentPath = this.textureLoader.path;\n    const children = connections.get(textureNode.id).children;\n\n    if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n      fileName = images[children[0].ID];\n\n      if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n        this.textureLoader.setPath(undefined);\n      }\n    }\n\n    let texture;\n    const extension = textureNode.FileName.slice(-3).toLowerCase();\n\n    if (extension === 'tga') {\n      const loader = this.manager.getHandler('.tga');\n\n      if (loader === null) {\n        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        loader.setPath(this.textureLoader.path);\n        texture = loader.load(fileName);\n      }\n    } else if (extension === 'psd') {\n      console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n      texture = new Texture();\n    } else {\n      texture = this.textureLoader.load(fileName);\n    }\n\n    this.textureLoader.setPath(currentPath);\n    return texture;\n  } // Parse nodes in FBXTree.Objects.Material\n\n\n  parseMaterials(textureMap) {\n    const materialMap = new Map();\n\n    if ('Material' in fbxTree.Objects) {\n      const materialNodes = fbxTree.Objects.Material;\n\n      for (const nodeID in materialNodes) {\n        const material = this.parseMaterial(materialNodes[nodeID], textureMap);\n        if (material !== null) materialMap.set(parseInt(nodeID), material);\n      }\n    }\n\n    return materialMap;\n  } // Parse single node in FBXTree.Objects.Material\n  // Materials are connected to texture maps in FBXTree.Objects.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n\n\n  parseMaterial(materialNode, textureMap) {\n    const ID = materialNode.id;\n    const name = materialNode.attrName;\n    let type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n    if (typeof type === 'object') {\n      type = type.value;\n    } // Ignore unused materials which don't have any connections.\n\n\n    if (!connections.has(ID)) return null;\n    const parameters = this.parseParameters(materialNode, textureMap, ID);\n    let material;\n\n    switch (type.toLowerCase()) {\n      case 'phong':\n        material = new MeshPhongMaterial();\n        break;\n\n      case 'lambert':\n        material = new MeshLambertMaterial();\n        break;\n\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n        material = new MeshPhongMaterial();\n        break;\n    }\n\n    material.setValues(parameters);\n    material.name = name;\n    return material;\n  } // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n\n\n  parseParameters(materialNode, textureMap, ID) {\n    const parameters = {};\n\n    if (materialNode.BumpFactor) {\n      parameters.bumpScale = materialNode.BumpFactor.value;\n    }\n\n    if (materialNode.Diffuse) {\n      parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n    } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n      // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n      parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n    }\n\n    if (materialNode.DisplacementFactor) {\n      parameters.displacementScale = materialNode.DisplacementFactor.value;\n    }\n\n    if (materialNode.Emissive) {\n      parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n    } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n      // The blender exporter exports emissive color here instead of in materialNode.Emissive\n      parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n    }\n\n    if (materialNode.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n    }\n\n    if (materialNode.Opacity) {\n      parameters.opacity = parseFloat(materialNode.Opacity.value);\n    }\n\n    if (parameters.opacity < 1.0) {\n      parameters.transparent = true;\n    }\n\n    if (materialNode.ReflectionFactor) {\n      parameters.reflectivity = materialNode.ReflectionFactor.value;\n    }\n\n    if (materialNode.Shininess) {\n      parameters.shininess = materialNode.Shininess.value;\n    }\n\n    if (materialNode.Specular) {\n      parameters.specular = new Color().fromArray(materialNode.Specular.value);\n    } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n      // The blender exporter exports specular color here instead of in materialNode.Specular\n      parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n    }\n\n    const scope = this;\n    connections.get(ID).children.forEach(function (child) {\n      const type = child.relationship;\n\n      switch (type) {\n        case 'Bump':\n          parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'Maya|TEX_ao_map':\n          parameters.aoMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'DiffuseColor':\n        case 'Maya|TEX_color_map':\n          parameters.map = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.map !== undefined) {\n            parameters.map.encoding = sRGBEncoding;\n          }\n\n          break;\n\n        case 'DisplacementColor':\n          parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'EmissiveColor':\n          parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.emissiveMap !== undefined) {\n            parameters.emissiveMap.encoding = sRGBEncoding;\n          }\n\n          break;\n\n        case 'NormalMap':\n        case 'Maya|TEX_normal_map':\n          parameters.normalMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'ReflectionColor':\n          parameters.envMap = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.envMap !== undefined) {\n            parameters.envMap.mapping = EquirectangularReflectionMapping;\n            parameters.envMap.encoding = sRGBEncoding;\n          }\n\n          break;\n\n        case 'SpecularColor':\n          parameters.specularMap = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.specularMap !== undefined) {\n            parameters.specularMap.encoding = sRGBEncoding;\n          }\n\n          break;\n\n        case 'TransparentColor':\n        case 'TransparencyFactor':\n          parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n          parameters.transparent = true;\n          break;\n\n        case 'AmbientColor':\n        case 'ShininessExponent': // AKA glossiness map\n\n        case 'SpecularFactor': // AKA specularLevel\n\n        case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n        default:\n          console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n          break;\n      }\n    });\n    return parameters;\n  } // get a texture from the textureMap for use by a material.\n\n\n  getTexture(textureMap, id) {\n    // if the texture is a layered texture, just use the first layer and issue a warning\n    if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n      console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n      id = connections.get(id).children[0].ID;\n    }\n\n    return textureMap.get(id);\n  } // Parse nodes in FBXTree.Objects.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\n\n  parseDeformers() {\n    const skeletons = {};\n    const morphTargets = {};\n\n    if ('Deformer' in fbxTree.Objects) {\n      const DeformerNodes = fbxTree.Objects.Deformer;\n\n      for (const nodeID in DeformerNodes) {\n        const deformerNode = DeformerNodes[nodeID];\n        const relationships = connections.get(parseInt(nodeID));\n\n        if (deformerNode.attrType === 'Skin') {\n          const skeleton = this.parseSkeleton(relationships, DeformerNodes);\n          skeleton.ID = nodeID;\n\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n          }\n\n          skeleton.geometryID = relationships.parents[0].ID;\n          skeletons[nodeID] = skeleton;\n        } else if (deformerNode.attrType === 'BlendShape') {\n          const morphTarget = {\n            id: nodeID\n          };\n          morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n          morphTarget.id = nodeID;\n\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n          }\n\n          morphTargets[nodeID] = morphTarget;\n        }\n      }\n    }\n\n    return {\n      skeletons: skeletons,\n      morphTargets: morphTargets\n    };\n  } // Parse single nodes in FBXTree.Objects.Deformer\n  // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n  // Each skin node represents a skeleton and each cluster node represents a bone\n\n\n  parseSkeleton(relationships, deformerNodes) {\n    const rawBones = [];\n    relationships.children.forEach(function (child) {\n      const boneNode = deformerNodes[child.ID];\n      if (boneNode.attrType !== 'Cluster') return;\n      const rawBone = {\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transformLink: new Matrix4().fromArray(boneNode.TransformLink.a) // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n        // linkMode: boneNode.Mode,\n\n      };\n\n      if ('Indexes' in boneNode) {\n        rawBone.indices = boneNode.Indexes.a;\n        rawBone.weights = boneNode.Weights.a;\n      }\n\n      rawBones.push(rawBone);\n    });\n    return {\n      rawBones: rawBones,\n      bones: []\n    };\n  } // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\n\n  parseMorphTargets(relationships, deformerNodes) {\n    const rawMorphTargets = [];\n\n    for (let i = 0; i < relationships.children.length; i++) {\n      const child = relationships.children[i];\n      const morphTargetNode = deformerNodes[child.ID];\n      const rawMorphTarget = {\n        name: morphTargetNode.attrName,\n        initialWeight: morphTargetNode.DeformPercent,\n        id: morphTargetNode.id,\n        fullWeights: morphTargetNode.FullWeights.a\n      };\n      if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n      rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n        return child.relationship === undefined;\n      })[0].ID;\n      rawMorphTargets.push(rawMorphTarget);\n    }\n\n    return rawMorphTargets;\n  } // create the main Group() to be returned by the loader\n\n\n  parseScene(deformers, geometryMap, materialMap) {\n    sceneGraph = new Group();\n    const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n    const modelNodes = fbxTree.Objects.Model;\n    const scope = this;\n    modelMap.forEach(function (model) {\n      const modelNode = modelNodes[model.ID];\n      scope.setLookAtProperties(model, modelNode);\n      const parentConnections = connections.get(model.ID).parents;\n      parentConnections.forEach(function (connection) {\n        const parent = modelMap.get(connection.ID);\n        if (parent !== undefined) parent.add(model);\n      });\n\n      if (model.parent === null) {\n        sceneGraph.add(model);\n      }\n    });\n    this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n    this.createAmbientLight();\n    sceneGraph.traverse(function (node) {\n      if (node.userData.transformData) {\n        if (node.parent) {\n          node.userData.transformData.parentMatrix = node.parent.matrix;\n          node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n        }\n\n        const transform = generateTransform(node.userData.transformData);\n        node.applyMatrix4(transform);\n        node.updateWorldMatrix();\n      }\n    });\n    const animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n    if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n      sceneGraph.children[0].animations = animations;\n      sceneGraph = sceneGraph.children[0];\n    }\n\n    sceneGraph.animations = animations;\n  } // parse nodes in FBXTree.Objects.Model\n\n\n  parseModels(skeletons, geometryMap, materialMap) {\n    const modelMap = new Map();\n    const modelNodes = fbxTree.Objects.Model;\n\n    for (const nodeID in modelNodes) {\n      const id = parseInt(nodeID);\n      const node = modelNodes[nodeID];\n      const relationships = connections.get(id);\n      let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n\n      if (!model) {\n        switch (node.attrType) {\n          case 'Camera':\n            model = this.createCamera(relationships);\n            break;\n\n          case 'Light':\n            model = this.createLight(relationships);\n            break;\n\n          case 'Mesh':\n            model = this.createMesh(relationships, geometryMap, materialMap);\n            break;\n\n          case 'NurbsCurve':\n            model = this.createCurve(relationships, geometryMap);\n            break;\n\n          case 'LimbNode':\n          case 'Root':\n            model = new Bone();\n            break;\n\n          case 'Null':\n          default:\n            model = new Group();\n            break;\n        }\n\n        model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : '';\n        model.ID = id;\n      }\n\n      this.getTransformData(model, node);\n      modelMap.set(id, model);\n    }\n\n    return modelMap;\n  }\n\n  buildSkeleton(relationships, skeletons, id, name) {\n    let bone = null;\n    relationships.parents.forEach(function (parent) {\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID];\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          if (rawBone.ID === parent.ID) {\n            const subBone = bone;\n            bone = new Bone();\n            bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n            bone.name = name ? PropertyBinding.sanitizeNodeName(name) : '';\n            bone.ID = id;\n            skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n            // duplicate the bone here and and it as a child of the first bone\n\n            if (subBone !== null) {\n              bone.add(subBone);\n            }\n          }\n        });\n      }\n    });\n    return bone;\n  } // create a PerspectiveCamera or OrthographicCamera\n\n\n  createCamera(relationships) {\n    let model;\n    let cameraAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n      if (attr !== undefined) {\n        cameraAttribute = attr;\n      }\n    });\n\n    if (cameraAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type = 0;\n\n      if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n        type = 1;\n      }\n\n      let nearClippingPlane = 1;\n\n      if (cameraAttribute.NearPlane !== undefined) {\n        nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n      }\n\n      let farClippingPlane = 1000;\n\n      if (cameraAttribute.FarPlane !== undefined) {\n        farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n      }\n\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n\n      if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n        width = cameraAttribute.AspectWidth.value;\n        height = cameraAttribute.AspectHeight.value;\n      }\n\n      const aspect = width / height;\n      let fov = 45;\n\n      if (cameraAttribute.FieldOfView !== undefined) {\n        fov = cameraAttribute.FieldOfView.value;\n      }\n\n      const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n      switch (type) {\n        case 0:\n          // Perspective\n          model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n          if (focalLength !== null) model.setFocalLength(focalLength);\n          break;\n\n        case 1:\n          // Orthographic\n          model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n          model = new Object3D();\n          break;\n      }\n    }\n\n    return model;\n  } // Create a DirectionalLight, PointLight or SpotLight\n\n\n  createLight(relationships) {\n    let model;\n    let lightAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n      if (attr !== undefined) {\n        lightAttribute = attr;\n      }\n    });\n\n    if (lightAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type; // LightType can be undefined for Point lights\n\n      if (lightAttribute.LightType === undefined) {\n        type = 0;\n      } else {\n        type = lightAttribute.LightType.value;\n      }\n\n      let color = 0xffffff;\n\n      if (lightAttribute.Color !== undefined) {\n        color = new Color().fromArray(lightAttribute.Color.value);\n      }\n\n      let intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n      if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n        intensity = 0;\n      }\n\n      let distance = 0;\n\n      if (lightAttribute.FarAttenuationEnd !== undefined) {\n        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n          distance = 0;\n        } else {\n          distance = lightAttribute.FarAttenuationEnd.value;\n        }\n      } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n\n      const decay = 1;\n\n      switch (type) {\n        case 0:\n          // Point\n          model = new PointLight(color, intensity, distance, decay);\n          break;\n\n        case 1:\n          // Directional\n          model = new DirectionalLight(color, intensity);\n          break;\n\n        case 2:\n          // Spot\n          let angle = Math.PI / 3;\n\n          if (lightAttribute.InnerAngle !== undefined) {\n            angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n          }\n\n          let penumbra = 0;\n\n          if (lightAttribute.OuterAngle !== undefined) {\n            // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n            // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n            // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n            penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n            penumbra = Math.max(penumbra, 1);\n          }\n\n          model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n          model = new PointLight(color, intensity);\n          break;\n      }\n\n      if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n        model.castShadow = true;\n      }\n    }\n\n    return model;\n  }\n\n  createMesh(relationships, geometryMap, materialMap) {\n    let model;\n    let geometry = null;\n    let material = null;\n    const materials = []; // get geometry and materials(s) from connections\n\n    relationships.children.forEach(function (child) {\n      if (geometryMap.has(child.ID)) {\n        geometry = geometryMap.get(child.ID);\n      }\n\n      if (materialMap.has(child.ID)) {\n        materials.push(materialMap.get(child.ID));\n      }\n    });\n\n    if (materials.length > 1) {\n      material = materials;\n    } else if (materials.length > 0) {\n      material = materials[0];\n    } else {\n      material = new MeshPhongMaterial({\n        color: 0xcccccc\n      });\n      materials.push(material);\n    }\n\n    if ('color' in geometry.attributes) {\n      materials.forEach(function (material) {\n        material.vertexColors = true;\n      });\n    }\n\n    if (geometry.FBX_Deformer) {\n      model = new SkinnedMesh(geometry, material);\n      model.normalizeSkinWeights();\n    } else {\n      model = new Mesh(geometry, material);\n    }\n\n    return model;\n  }\n\n  createCurve(relationships, geometryMap) {\n    const geometry = relationships.children.reduce(function (geo, child) {\n      if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n      return geo;\n    }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n    const material = new LineBasicMaterial({\n      color: 0x3300ff,\n      linewidth: 1\n    });\n    return new Line(geometry, material);\n  } // parse the model node for transform data\n\n\n  getTransformData(model, modelNode) {\n    const transformData = {};\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n    if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n    if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n    if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n    if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n    if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n    if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n    if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n    if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n    if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n    model.userData.transformData = transformData;\n  }\n\n  setLookAtProperties(model, modelNode) {\n    if ('LookAtProperty' in modelNode) {\n      const children = connections.get(model.ID).children;\n      children.forEach(function (child) {\n        if (child.relationship === 'LookAtProperty') {\n          const lookAtTarget = fbxTree.Objects.Model[child.ID];\n\n          if ('Lcl_Translation' in lookAtTarget) {\n            const pos = lookAtTarget.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n            if (model.target !== undefined) {\n              model.target.position.fromArray(pos);\n              sceneGraph.add(model.target);\n            } else {\n              // Cameras and other Object3Ds\n              model.lookAt(new Vector3().fromArray(pos));\n            }\n          }\n        }\n      });\n    }\n  }\n\n  bindSkeleton(skeletons, geometryMap, modelMap) {\n    const bindMatrices = this.parsePoseNodes();\n\n    for (const ID in skeletons) {\n      const skeleton = skeletons[ID];\n      const parents = connections.get(parseInt(skeleton.ID)).parents;\n      parents.forEach(function (parent) {\n        if (geometryMap.has(parent.ID)) {\n          const geoID = parent.ID;\n          const geoRelationships = connections.get(geoID);\n          geoRelationships.parents.forEach(function (geoConnParent) {\n            if (modelMap.has(geoConnParent.ID)) {\n              const model = modelMap.get(geoConnParent.ID);\n              model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n            }\n          });\n        }\n      });\n    }\n  }\n\n  parsePoseNodes() {\n    const bindMatrices = {};\n\n    if ('Pose' in fbxTree.Objects) {\n      const BindPoseNode = fbxTree.Objects.Pose;\n\n      for (const nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === 'BindPose' && BindPoseNode[nodeID].NbPoseNodes > 0) {\n          const poseNodes = BindPoseNode[nodeID].PoseNode;\n\n          if (Array.isArray(poseNodes)) {\n            poseNodes.forEach(function (poseNode) {\n              bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n            });\n          } else {\n            bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n          }\n        }\n      }\n    }\n\n    return bindMatrices;\n  } // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\n\n  createAmbientLight() {\n    if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n      const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n      const r = ambientColor[0];\n      const g = ambientColor[1];\n      const b = ambientColor[2];\n\n      if (r !== 0 || g !== 0 || b !== 0) {\n        const color = new Color(r, g, b);\n        sceneGraph.add(new AmbientLight(color, 1));\n      }\n    }\n  }\n\n} // parse Geometry data from FBXTree and return map of BufferGeometries\n\n\nclass GeometryParser {\n  // Parse nodes in FBXTree.Objects.Geometry\n  parse(deformers) {\n    const geometryMap = new Map();\n\n    if ('Geometry' in fbxTree.Objects) {\n      const geoNodes = fbxTree.Objects.Geometry;\n\n      for (const nodeID in geoNodes) {\n        const relationships = connections.get(parseInt(nodeID));\n        const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n        geometryMap.set(parseInt(nodeID), geo);\n      }\n    }\n\n    return geometryMap;\n  } // Parse single node in FBXTree.Objects.Geometry\n\n\n  parseGeometry(relationships, geoNode, deformers) {\n    switch (geoNode.attrType) {\n      case 'Mesh':\n        return this.parseMeshGeometry(relationships, geoNode, deformers);\n\n      case 'NurbsCurve':\n        return this.parseNurbsGeometry(geoNode);\n    }\n  } // Parse single node mesh geometry in FBXTree.Objects.Geometry\n\n\n  parseMeshGeometry(relationships, geoNode, deformers) {\n    const skeletons = deformers.skeletons;\n    const morphTargets = [];\n    const modelNodes = relationships.parents.map(function (parent) {\n      return fbxTree.Objects.Model[parent.ID];\n    }); // don't create geometry if it is not associated with any models\n\n    if (modelNodes.length === 0) return;\n    const skeleton = relationships.children.reduce(function (skeleton, child) {\n      if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n      return skeleton;\n    }, null);\n    relationships.children.forEach(function (child) {\n      if (deformers.morphTargets[child.ID] !== undefined) {\n        morphTargets.push(deformers.morphTargets[child.ID]);\n      }\n    }); // Assume one model and get the preRotation from that\n    // if there is more than one model associated with the geometry this may cause problems\n\n    const modelNode = modelNodes[0];\n    const transformData = {};\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n    if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n    if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n    const transform = generateTransform(transformData);\n    return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n  } // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n\n\n  genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n    const geo = new BufferGeometry();\n    if (geoNode.attrName) geo.name = geoNode.attrName;\n    const geoInfo = this.parseGeoNode(geoNode, skeleton);\n    const buffers = this.genBuffers(geoInfo);\n    const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n    positionAttribute.applyMatrix4(preTransform);\n    geo.setAttribute('position', positionAttribute);\n\n    if (buffers.colors.length > 0) {\n      geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3));\n    }\n\n    if (skeleton) {\n      geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4));\n      geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n      geo.FBX_Deformer = skeleton;\n    }\n\n    if (buffers.normal.length > 0) {\n      const normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n      const normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n      normalAttribute.applyNormalMatrix(normalMatrix);\n      geo.setAttribute('normal', normalAttribute);\n    }\n\n    buffers.uvs.forEach(function (uvBuffer, i) {\n      // subsequent uv buffers are called 'uv1', 'uv2', ...\n      let name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n      if (i === 0) {\n        name = 'uv';\n      }\n\n      geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n    });\n\n    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n      // Convert the material indices of each vertex into rendering groups on the geometry.\n      let prevMaterialIndex = buffers.materialIndex[0];\n      let startIndex = 0;\n      buffers.materialIndex.forEach(function (currentIndex, i) {\n        if (currentIndex !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n          prevMaterialIndex = currentIndex;\n          startIndex = i;\n        }\n      }); // the loop above doesn't add the last group, do that here.\n\n      if (geo.groups.length > 0) {\n        const lastGroup = geo.groups[geo.groups.length - 1];\n        const lastIndex = lastGroup.start + lastGroup.count;\n\n        if (lastIndex !== buffers.materialIndex.length) {\n          geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n        }\n      } // case where there are multiple materials but the whole geometry is only\n      // using one of them\n\n\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n      }\n    }\n\n    this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n    return geo;\n  }\n\n  parseGeoNode(geoNode, skeleton) {\n    const geoInfo = {};\n    geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n    geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n\n    if (geoNode.LayerElementColor) {\n      geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n    }\n\n    if (geoNode.LayerElementMaterial) {\n      geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n    }\n\n    if (geoNode.LayerElementNormal) {\n      geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n    }\n\n    if (geoNode.LayerElementUV) {\n      geoInfo.uv = [];\n      let i = 0;\n\n      while (geoNode.LayerElementUV[i]) {\n        if (geoNode.LayerElementUV[i].UV) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n        }\n\n        i++;\n      }\n    }\n\n    geoInfo.weightTable = {};\n\n    if (skeleton !== null) {\n      geoInfo.skeleton = skeleton;\n      skeleton.rawBones.forEach(function (rawBone, i) {\n        // loop over the bone's vertex indices and weights\n        rawBone.indices.forEach(function (index, j) {\n          if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n          geoInfo.weightTable[index].push({\n            id: i,\n            weight: rawBone.weights[j]\n          });\n        });\n      });\n    }\n\n    return geoInfo;\n  }\n\n  genBuffers(geoInfo) {\n    const buffers = {\n      vertex: [],\n      normal: [],\n      colors: [],\n      uvs: [],\n      materialIndex: [],\n      vertexWeights: [],\n      weightsIndices: []\n    };\n    let polygonIndex = 0;\n    let faceLength = 0;\n    let displayedWeightsWarning = false; // these will hold data for a single face\n\n    let facePositionIndexes = [];\n    let faceNormals = [];\n    let faceColors = [];\n    let faceUVs = [];\n    let faceWeights = [];\n    let faceWeightIndices = [];\n    const scope = this;\n    geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n      let materialIndex;\n      let endOfFace = false; // Face index and vertex index arrays are combined in a single array\n      // A cube with quad faces looks like this:\n      // PolygonVertexIndex: *24 {\n      //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n      //  }\n      // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n      // to find index of last vertex bit shift the index: ^ - 1\n\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n        endOfFace = true;\n      }\n\n      let weightIndices = [];\n      let weights = [];\n      facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n\n      if (geoInfo.color) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n        faceColors.push(data[0], data[1], data[2]);\n      }\n\n      if (geoInfo.skeleton) {\n        if (geoInfo.weightTable[vertexIndex] !== undefined) {\n          geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n            weights.push(wt.weight);\n            weightIndices.push(wt.id);\n          });\n        }\n\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n            displayedWeightsWarning = true;\n          }\n\n          const wIndex = [0, 0, 0, 0];\n          const Weight = [0, 0, 0, 0];\n          weights.forEach(function (weight, weightIndex) {\n            let currentWeight = weight;\n            let currentIndex = weightIndices[weightIndex];\n            Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight;\n                currentWeight = comparedWeight;\n                const tmp = wIndex[comparedWeightIndex];\n                wIndex[comparedWeightIndex] = currentIndex;\n                currentIndex = tmp;\n              }\n            });\n          });\n          weightIndices = wIndex;\n          weights = Weight;\n        } // if the weight array is shorter than 4 pad with 0s\n\n\n        while (weights.length < 4) {\n          weights.push(0);\n          weightIndices.push(0);\n        }\n\n        for (let i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i]);\n          faceWeightIndices.push(weightIndices[i]);\n        }\n      }\n\n      if (geoInfo.normal) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n        faceNormals.push(data[0], data[1], data[2]);\n      }\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n      }\n\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, i) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n\n          if (faceUVs[i] === undefined) {\n            faceUVs[i] = [];\n          }\n\n          faceUVs[i].push(data[0]);\n          faceUVs[i].push(data[1]);\n        });\n      }\n\n      faceLength++;\n\n      if (endOfFace) {\n        scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n        polygonIndex++;\n        faceLength = 0; // reset arrays for the next face\n\n        facePositionIndexes = [];\n        faceNormals = [];\n        faceColors = [];\n        faceUVs = [];\n        faceWeights = [];\n        faceWeightIndices = [];\n      }\n    });\n    return buffers;\n  } // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\n\n  genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n    for (let i = 2; i < faceLength; i++) {\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n\n      if (geoInfo.skeleton) {\n        buffers.vertexWeights.push(faceWeights[0]);\n        buffers.vertexWeights.push(faceWeights[1]);\n        buffers.vertexWeights.push(faceWeights[2]);\n        buffers.vertexWeights.push(faceWeights[3]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n        buffers.vertexWeights.push(faceWeights[i * 4]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[0]);\n        buffers.weightsIndices.push(faceWeightIndices[1]);\n        buffers.weightsIndices.push(faceWeightIndices[2]);\n        buffers.weightsIndices.push(faceWeightIndices[3]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n      }\n\n      if (geoInfo.color) {\n        buffers.colors.push(faceColors[0]);\n        buffers.colors.push(faceColors[1]);\n        buffers.colors.push(faceColors[2]);\n        buffers.colors.push(faceColors[(i - 1) * 3]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n        buffers.colors.push(faceColors[i * 3]);\n        buffers.colors.push(faceColors[i * 3 + 1]);\n        buffers.colors.push(faceColors[i * 3 + 2]);\n      }\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n      }\n\n      if (geoInfo.normal) {\n        buffers.normal.push(faceNormals[0]);\n        buffers.normal.push(faceNormals[1]);\n        buffers.normal.push(faceNormals[2]);\n        buffers.normal.push(faceNormals[(i - 1) * 3]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n        buffers.normal.push(faceNormals[i * 3]);\n        buffers.normal.push(faceNormals[i * 3 + 1]);\n        buffers.normal.push(faceNormals[i * 3 + 2]);\n      }\n\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, j) {\n          if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n          buffers.uvs[j].push(faceUVs[j][0]);\n          buffers.uvs[j].push(faceUVs[j][1]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n          buffers.uvs[j].push(faceUVs[j][i * 2]);\n          buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n        });\n      }\n    }\n  }\n\n  addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n    if (morphTargets.length === 0) return;\n    parentGeo.morphTargetsRelative = true;\n    parentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\n\n    const scope = this;\n    morphTargets.forEach(function (morphTarget) {\n      morphTarget.rawTargets.forEach(function (rawTarget) {\n        const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n\n        if (morphGeoNode !== undefined) {\n          scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n        }\n      });\n    });\n  } // a morph geometry node is similar to a standard  node, and the node is also contained\n  // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n  // and a special attribute Index defining which vertices of the original geometry are affected\n  // Normal and position attributes only have data for the vertices that are affected by the morph\n\n\n  genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n    const vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n    const morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n    const indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n    const length = parentGeo.attributes.position.count * 3;\n    const morphPositions = new Float32Array(length);\n\n    for (let i = 0; i < indices.length; i++) {\n      const morphIndex = indices[i] * 3;\n      morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n      morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n      morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n    } // TODO: add morph normal support\n\n\n    const morphGeoInfo = {\n      vertexIndices: vertexIndices,\n      vertexPositions: morphPositions\n    };\n    const morphBuffers = this.genBuffers(morphGeoInfo);\n    const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n    positionAttribute.name = name || morphGeoNode.attrName;\n    positionAttribute.applyMatrix4(preTransform);\n    parentGeo.morphAttributes.position.push(positionAttribute);\n  } // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\n\n  parseNormals(NormalNode) {\n    const mappingType = NormalNode.MappingInformationType;\n    const referenceType = NormalNode.ReferenceInformationType;\n    const buffer = NormalNode.Normals.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      if ('NormalIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalIndex.a;\n      } else if ('NormalsIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalsIndex.a;\n      }\n    }\n\n    return {\n      dataSize: 3,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\n\n  parseUVs(UVNode) {\n    const mappingType = UVNode.MappingInformationType;\n    const referenceType = UVNode.ReferenceInformationType;\n    const buffer = UVNode.UV.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = UVNode.UVIndex.a;\n    }\n\n    return {\n      dataSize: 2,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\n\n  parseVertexColors(ColorNode) {\n    const mappingType = ColorNode.MappingInformationType;\n    const referenceType = ColorNode.ReferenceInformationType;\n    const buffer = ColorNode.Colors.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = ColorNode.ColorIndex.a;\n    }\n\n    return {\n      dataSize: 4,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\n\n  parseMaterialIndices(MaterialNode) {\n    const mappingType = MaterialNode.MappingInformationType;\n    const referenceType = MaterialNode.ReferenceInformationType;\n\n    if (mappingType === 'NoMappingInformation') {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: 'AllSame',\n        referenceType: referenceType\n      };\n    }\n\n    const materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n    // we expect.So we create an intermediate buffer that points to the index in the buffer,\n    // for conforming with the other functions we've written for other data.\n\n    const materialIndices = [];\n\n    for (let i = 0; i < materialIndexBuffer.length; ++i) {\n      materialIndices.push(i);\n    }\n\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\n\n  parseNurbsGeometry(geoNode) {\n    if (NURBSCurve === undefined) {\n      console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n      return new BufferGeometry();\n    }\n\n    const order = parseInt(geoNode.Order);\n\n    if (isNaN(order)) {\n      console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n      return new BufferGeometry();\n    }\n\n    const degree = order - 1;\n    const knots = geoNode.KnotVector.a;\n    const controlPoints = [];\n    const pointsValues = geoNode.Points.a;\n\n    for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new Vector4().fromArray(pointsValues, i));\n    }\n\n    let startKnot, endKnot;\n\n    if (geoNode.Form === 'Closed') {\n      controlPoints.push(controlPoints[0]);\n    } else if (geoNode.Form === 'Periodic') {\n      startKnot = degree;\n      endKnot = knots.length - 1 - startKnot;\n\n      for (let i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i]);\n      }\n    }\n\n    const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n    const points = curve.getPoints(controlPoints.length * 12);\n    return new BufferGeometry().setFromPoints(points);\n  }\n\n} // parse animation data from FBXTree\n\n\nclass AnimationParser {\n  // take raw animation clips and turn them into three.js animation clips\n  parse() {\n    const animationClips = [];\n    const rawClips = this.parseClips();\n\n    if (rawClips !== undefined) {\n      for (const key in rawClips) {\n        const rawClip = rawClips[key];\n        const clip = this.addClip(rawClip);\n        animationClips.push(clip);\n      }\n    }\n\n    return animationClips;\n  }\n\n  parseClips() {\n    // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n    // if this is undefined we can safely assume there are no animations\n    if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n    const curveNodesMap = this.parseAnimationCurveNodes();\n    this.parseAnimationCurves(curveNodesMap);\n    const layersMap = this.parseAnimationLayers(curveNodesMap);\n    const rawClips = this.parseAnimStacks(layersMap);\n    return rawClips;\n  } // parse nodes in FBXTree.Objects.AnimationCurveNode\n  // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n  // and is referenced by an AnimationLayer\n\n\n  parseAnimationCurveNodes() {\n    const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n    const curveNodesMap = new Map();\n\n    for (const nodeID in rawCurveNodes) {\n      const rawCurveNode = rawCurveNodes[nodeID];\n\n      if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n        const curveNode = {\n          id: rawCurveNode.id,\n          attr: rawCurveNode.attrName,\n          curves: {}\n        };\n        curveNodesMap.set(curveNode.id, curveNode);\n      }\n    }\n\n    return curveNodesMap;\n  } // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n  // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n  // axis ( e.g. times and values of x rotation)\n\n\n  parseAnimationCurves(curveNodesMap) {\n    const rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n    // e.g. position times: [0, 0.4, 0. 8]\n    // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n    // clearly, this should be optimised to\n    // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n    // this shows up in nearly every FBX file, and generally time array is length > 100\n\n    for (const nodeID in rawCurves) {\n      const animationCurve = {\n        id: rawCurves[nodeID].id,\n        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n        values: rawCurves[nodeID].KeyValueFloat.a\n      };\n      const relationships = connections.get(animationCurve.id);\n\n      if (relationships !== undefined) {\n        const animationCurveID = relationships.parents[0].ID;\n        const animationCurveRelationship = relationships.parents[0].relationship;\n\n        if (animationCurveRelationship.match(/X/)) {\n          curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Y/)) {\n          curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Z/)) {\n          curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n          curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n        }\n      }\n    }\n  } // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n  // to various AnimationCurveNodes and is referenced by an AnimationStack node\n  // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\n\n  parseAnimationLayers(curveNodesMap) {\n    const rawLayers = fbxTree.Objects.AnimationLayer;\n    const layersMap = new Map();\n\n    for (const nodeID in rawLayers) {\n      const layerCurveNodes = [];\n      const connection = connections.get(parseInt(nodeID));\n\n      if (connection !== undefined) {\n        // all the animationCurveNodes used in the layer\n        const children = connection.children;\n        children.forEach(function (child, i) {\n          if (curveNodesMap.has(child.ID)) {\n            const curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n            if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const modelID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n\n                if (modelID !== undefined) {\n                  const rawModel = fbxTree.Objects.Model[modelID.toString()];\n\n                  if (rawModel === undefined) {\n                    console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                    return;\n                  }\n\n                  const node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                    ID: rawModel.id,\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1]\n                  };\n                  sceneGraph.traverse(function (child) {\n                    if (child.ID === rawModel.id) {\n                      node.transform = child.matrix;\n                      if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                    }\n                  });\n                  if (!node.transform) node.transform = new Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                  // animation value as well\n\n                  if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                  if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                  layerCurveNodes[i] = node;\n                }\n              }\n\n              if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n            } else if (curveNode.curves.morph !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n                const morpherID = connections.get(deformerID).parents[0].ID;\n                const geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                const modelID = connections.get(geoID).parents[0].ID;\n                const rawModel = fbxTree.Objects.Model[modelID];\n                const node = {\n                  modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                  morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                };\n                layerCurveNodes[i] = node;\n              }\n\n              layerCurveNodes[i][curveNode.attr] = curveNode;\n            }\n          }\n        });\n        layersMap.set(parseInt(nodeID), layerCurveNodes);\n      }\n    }\n\n    return layersMap;\n  } // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n  // hierarchy. Each Stack node will be used to create a AnimationClip\n\n\n  parseAnimStacks(layersMap) {\n    const rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n    const rawClips = {};\n\n    for (const nodeID in rawStacks) {\n      const children = connections.get(parseInt(nodeID)).children;\n\n      if (children.length > 1) {\n        // it seems like stacks will always be associated with a single layer. But just in case there are files\n        // where there are multiple layers per stack, we'll display a warning\n        console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n      }\n\n      const layer = layersMap.get(children[0].ID);\n      rawClips[nodeID] = {\n        name: rawStacks[nodeID].attrName,\n        layer: layer\n      };\n    }\n\n    return rawClips;\n  }\n\n  addClip(rawClip) {\n    let tracks = [];\n    const scope = this;\n    rawClip.layer.forEach(function (rawTracks) {\n      tracks = tracks.concat(scope.generateTracks(rawTracks));\n    });\n    return new AnimationClip(rawClip.name, -1, tracks);\n  }\n\n  generateTracks(rawTracks) {\n    const tracks = [];\n    let initialPosition = new Vector3();\n    let initialRotation = new Quaternion();\n    let initialScale = new Vector3();\n    if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n    initialPosition = initialPosition.toArray();\n    initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n    initialScale = initialScale.toArray();\n\n    if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n      const positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n      if (positionTrack !== undefined) tracks.push(positionTrack);\n    }\n\n    if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n      const rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n      if (rotationTrack !== undefined) tracks.push(rotationTrack);\n    }\n\n    if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n      const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n      if (scaleTrack !== undefined) tracks.push(scaleTrack);\n    }\n\n    if (rawTracks.DeformPercent !== undefined) {\n      const morphTrack = this.generateMorphTrack(rawTracks);\n      if (morphTrack !== undefined) tracks.push(morphTrack);\n    }\n\n    return tracks;\n  }\n\n  generateVectorTrack(modelName, curves, initialValue, type) {\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    return new VectorKeyframeTrack(modelName + '.' + type, times, values);\n  }\n\n  generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n    if (curves.x !== undefined) {\n      this.interpolateRotations(curves.x);\n      curves.x.values = curves.x.values.map(MathUtils.degToRad);\n    }\n\n    if (curves.y !== undefined) {\n      this.interpolateRotations(curves.y);\n      curves.y.values = curves.y.values.map(MathUtils.degToRad);\n    }\n\n    if (curves.z !== undefined) {\n      this.interpolateRotations(curves.z);\n      curves.z.values = curves.z.values.map(MathUtils.degToRad);\n    }\n\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n\n    if (preRotation !== undefined) {\n      preRotation = preRotation.map(MathUtils.degToRad);\n      preRotation.push(eulerOrder);\n      preRotation = new Euler().fromArray(preRotation);\n      preRotation = new Quaternion().setFromEuler(preRotation);\n    }\n\n    if (postRotation !== undefined) {\n      postRotation = postRotation.map(MathUtils.degToRad);\n      postRotation.push(eulerOrder);\n      postRotation = new Euler().fromArray(postRotation);\n      postRotation = new Quaternion().setFromEuler(postRotation).invert();\n    }\n\n    const quaternion = new Quaternion();\n    const euler = new Euler();\n    const quaternionValues = [];\n\n    for (let i = 0; i < values.length; i += 3) {\n      euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n      quaternion.setFromEuler(euler);\n      if (preRotation !== undefined) quaternion.premultiply(preRotation);\n      if (postRotation !== undefined) quaternion.multiply(postRotation);\n      quaternion.toArray(quaternionValues, i / 3 * 4);\n    }\n\n    return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n  }\n\n  generateMorphTrack(rawTracks) {\n    const curves = rawTracks.DeformPercent.curves.morph;\n    const values = curves.values.map(function (val) {\n      return val / 100;\n    });\n    const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n    return new NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n  } // For all animated objects, times are defined separately for each axis\n  // Here we'll combine the times into one sorted array without duplicates\n\n\n  getTimesForAllAxes(curves) {\n    let times = []; // first join together the times for each axis, if defined\n\n    if (curves.x !== undefined) times = times.concat(curves.x.times);\n    if (curves.y !== undefined) times = times.concat(curves.y.times);\n    if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them\n\n    times = times.sort(function (a, b) {\n      return a - b;\n    }); // and remove duplicates\n\n    if (times.length > 1) {\n      let targetIndex = 1;\n      let lastValue = times[0];\n\n      for (let i = 1; i < times.length; i++) {\n        const currentValue = times[i];\n\n        if (currentValue !== lastValue) {\n          times[targetIndex] = currentValue;\n          lastValue = currentValue;\n          targetIndex++;\n        }\n      }\n\n      times = times.slice(0, targetIndex);\n    }\n\n    return times;\n  }\n\n  getKeyframeTrackValues(times, curves, initialValue) {\n    const prevValue = initialValue;\n    const values = [];\n    let xIndex = -1;\n    let yIndex = -1;\n    let zIndex = -1;\n    times.forEach(function (time) {\n      if (curves.x) xIndex = curves.x.times.indexOf(time);\n      if (curves.y) yIndex = curves.y.times.indexOf(time);\n      if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n      if (xIndex !== -1) {\n        const xValue = curves.x.values[xIndex];\n        values.push(xValue);\n        prevValue[0] = xValue;\n      } else {\n        // otherwise use the x value from the previous frame\n        values.push(prevValue[0]);\n      }\n\n      if (yIndex !== -1) {\n        const yValue = curves.y.values[yIndex];\n        values.push(yValue);\n        prevValue[1] = yValue;\n      } else {\n        values.push(prevValue[1]);\n      }\n\n      if (zIndex !== -1) {\n        const zValue = curves.z.values[zIndex];\n        values.push(zValue);\n        prevValue[2] = zValue;\n      } else {\n        values.push(prevValue[2]);\n      }\n    });\n    return values;\n  } // Rotations are defined as Euler angles which can have values  of any size\n  // These will be converted to quaternions which don't support values greater than\n  // PI, so we'll interpolate large rotations\n\n\n  interpolateRotations(curve) {\n    for (let i = 1; i < curve.values.length; i++) {\n      const initialValue = curve.values[i - 1];\n      const valuesSpan = curve.values[i] - initialValue;\n      const absoluteSpan = Math.abs(valuesSpan);\n\n      if (absoluteSpan >= 180) {\n        const numSubIntervals = absoluteSpan / 180;\n        const step = valuesSpan / numSubIntervals;\n        let nextValue = initialValue + step;\n        const initialTime = curve.times[i - 1];\n        const timeSpan = curve.times[i] - initialTime;\n        const interval = timeSpan / numSubIntervals;\n        let nextTime = initialTime + interval;\n        const interpolatedTimes = [];\n        const interpolatedValues = [];\n\n        while (nextTime < curve.times[i]) {\n          interpolatedTimes.push(nextTime);\n          nextTime += interval;\n          interpolatedValues.push(nextValue);\n          nextValue += step;\n        }\n\n        curve.times = inject(curve.times, i, interpolatedTimes);\n        curve.values = inject(curve.values, i, interpolatedValues);\n      }\n    }\n  }\n\n} // parse an FBX file in ASCII format\n\n\nclass TextParser {\n  getPrevNode() {\n    return this.nodeStack[this.currentIndent - 2];\n  }\n\n  getCurrentNode() {\n    return this.nodeStack[this.currentIndent - 1];\n  }\n\n  getCurrentProp() {\n    return this.currentProp;\n  }\n\n  pushStack(node) {\n    this.nodeStack.push(node);\n    this.currentIndent += 1;\n  }\n\n  popStack() {\n    this.nodeStack.pop();\n    this.currentIndent -= 1;\n  }\n\n  setCurrentProp(val, name) {\n    this.currentProp = val;\n    this.currentPropName = name;\n  }\n\n  parse(text) {\n    this.currentIndent = 0;\n    this.allNodes = new FBXTree();\n    this.nodeStack = [];\n    this.currentProp = [];\n    this.currentPropName = '';\n    const scope = this;\n    const split = text.split(/[\\r\\n]+/);\n    split.forEach(function (line, i) {\n      const matchComment = line.match(/^[\\s\\t]*;/);\n      const matchEmpty = line.match(/^[\\s\\t]*$/);\n      if (matchComment || matchEmpty) return;\n      const matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n      const matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n      const matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n\n      if (matchBeginning) {\n        scope.parseNodeBegin(line, matchBeginning);\n      } else if (matchProperty) {\n        scope.parseNodeProperty(line, matchProperty, split[++i]);\n      } else if (matchEnd) {\n        scope.popStack();\n      } else if (line.match(/^[^\\s\\t}]/)) {\n        // large arrays are split over multiple lines terminated with a ',' character\n        // if this is encountered the line needs to be joined to the previous line\n        scope.parseNodePropertyContinued(line);\n      }\n    });\n    return this.allNodes;\n  }\n\n  parseNodeBegin(line, property) {\n    const nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n    const nodeAttrs = property[2].split(',').map(function (attr) {\n      return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n    });\n    const node = {\n      name: nodeName\n    };\n    const attrs = this.parseNodeAttr(nodeAttrs);\n    const currentNode = this.getCurrentNode(); // a top node\n\n    if (this.currentIndent === 0) {\n      this.allNodes.add(nodeName, node);\n    } else {\n      // a subnode\n      // if the subnode already exists, append it\n      if (nodeName in currentNode) {\n        // special case Pose needs PoseNodes as an array\n        if (nodeName === 'PoseNode') {\n          currentNode.PoseNode.push(node);\n        } else if (currentNode[nodeName].id !== undefined) {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n        }\n\n        if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n      } else if (typeof attrs.id === 'number') {\n        currentNode[nodeName] = {};\n        currentNode[nodeName][attrs.id] = node;\n      } else if (nodeName !== 'Properties70') {\n        if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n      }\n    }\n\n    if (typeof attrs.id === 'number') node.id = attrs.id;\n    if (attrs.name !== '') node.attrName = attrs.name;\n    if (attrs.type !== '') node.attrType = attrs.type;\n    this.pushStack(node);\n  }\n\n  parseNodeAttr(attrs) {\n    let id = attrs[0];\n\n    if (attrs[0] !== '') {\n      id = parseInt(attrs[0]);\n\n      if (isNaN(id)) {\n        id = attrs[0];\n      }\n    }\n\n    let name = '',\n        type = '';\n\n    if (attrs.length > 1) {\n      name = attrs[1].replace(/^(\\w+)::/, '');\n      type = attrs[2];\n    }\n\n    return {\n      id: id,\n      name: name,\n      type: type\n    };\n  }\n\n  parseNodeProperty(line, property, contentLine) {\n    let propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n    let propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n    //\tContent: ,\n    //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n    if (propName === 'Content' && propValue === ',') {\n      propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n    }\n\n    const currentNode = this.getCurrentNode();\n    const parentName = currentNode.name;\n\n    if (parentName === 'Properties70') {\n      this.parseNodeSpecialProperty(line, propName, propValue);\n      return;\n    } // Connections\n\n\n    if (propName === 'C') {\n      const connProps = propValue.split(',').slice(1);\n      const from = parseInt(connProps[0]);\n      const to = parseInt(connProps[1]);\n      let rest = propValue.split(',').slice(3);\n      rest = rest.map(function (elem) {\n        return elem.trim().replace(/^\"/, '');\n      });\n      propName = 'connections';\n      propValue = [from, to];\n      append(propValue, rest);\n\n      if (currentNode[propName] === undefined) {\n        currentNode[propName] = [];\n      }\n    } // Node\n\n\n    if (propName === 'Node') currentNode.id = propValue; // connections\n\n    if (propName in currentNode && Array.isArray(currentNode[propName])) {\n      currentNode[propName].push(propValue);\n    } else {\n      if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n    }\n\n    this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n    if (propName === 'a' && propValue.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(propValue);\n    }\n  }\n\n  parseNodePropertyContinued(line) {\n    const currentNode = this.getCurrentNode();\n    currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n    // so convert the string to an array\n\n    if (line.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(currentNode.a);\n    }\n  } // parse \"Property70\"\n\n\n  parseNodeSpecialProperty(line, propName, propValue) {\n    // split this\n    // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n    // into array like below\n    // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n    const props = propValue.split('\",').map(function (prop) {\n      return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n    });\n    const innerPropName = props[0];\n    const innerPropType1 = props[1];\n    const innerPropType2 = props[2];\n    const innerPropFlag = props[3];\n    let innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n    switch (innerPropType1) {\n      case 'int':\n      case 'enum':\n      case 'bool':\n      case 'ULongLong':\n      case 'double':\n      case 'Number':\n      case 'FieldOfView':\n        innerPropValue = parseFloat(innerPropValue);\n        break;\n\n      case 'Color':\n      case 'ColorRGB':\n      case 'Vector3D':\n      case 'Lcl_Translation':\n      case 'Lcl_Rotation':\n      case 'Lcl_Scaling':\n        innerPropValue = parseNumberArray(innerPropValue);\n        break;\n    } // CAUTION: these props must append to parent's parent\n\n\n    this.getPrevNode()[innerPropName] = {\n      type: innerPropType1,\n      type2: innerPropType2,\n      flag: innerPropFlag,\n      value: innerPropValue\n    };\n    this.setCurrentProp(this.getPrevNode(), innerPropName);\n  }\n\n} // Parse an FBX file in Binary format\n\n\nclass BinaryParser {\n  parse(buffer) {\n    const reader = new BinaryReader(buffer);\n    reader.skip(23); // skip magic 23 bytes\n\n    const version = reader.getUint32();\n\n    if (version < 6400) {\n      throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n    }\n\n    const allNodes = new FBXTree();\n\n    while (!this.endOfContent(reader)) {\n      const node = this.parseNode(reader, version);\n      if (node !== null) allNodes.add(node.name, node);\n    }\n\n    return allNodes;\n  } // Check if reader has reached the end of content.\n\n\n  endOfContent(reader) {\n    // footer size: 160bytes + 16-byte alignment padding\n    // - 16bytes: magic\n    // - padding til 16-byte alignment (at least 1byte?)\n    //\t(seems like some exporters embed fixed 15 or 16bytes?)\n    // - 4bytes: magic\n    // - 4bytes: version\n    // - 120bytes: zero\n    // - 16bytes: magic\n    if (reader.size() % 16 === 0) {\n      return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n    } else {\n      return reader.getOffset() + 160 + 16 >= reader.size();\n    }\n  } // recursively parse nodes until the end of the file is reached\n\n\n  parseNode(reader, version) {\n    const node = {}; // The first three data sizes depends on version.\n\n    const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n    const nameLen = reader.getUint8();\n    const name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n    if (endOffset === 0) return null;\n    const propertyList = [];\n\n    for (let i = 0; i < numProperties; i++) {\n      propertyList.push(this.parseProperty(reader));\n    } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n\n    const id = propertyList.length > 0 ? propertyList[0] : '';\n    const attrName = propertyList.length > 1 ? propertyList[1] : '';\n    const attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n    // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n    node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n\n    while (endOffset > reader.getOffset()) {\n      const subNode = this.parseNode(reader, version);\n      if (subNode !== null) this.parseSubNode(name, node, subNode);\n    }\n\n    node.propertyList = propertyList; // raw property list used by parent\n\n    if (typeof id === 'number') node.id = id;\n    if (attrName !== '') node.attrName = attrName;\n    if (attrType !== '') node.attrType = attrType;\n    if (name !== '') node.name = name;\n    return node;\n  }\n\n  parseSubNode(name, node, subNode) {\n    // special case: child node is single property\n    if (subNode.singleProperty === true) {\n      const value = subNode.propertyList[0];\n\n      if (Array.isArray(value)) {\n        node[subNode.name] = subNode;\n        subNode.a = value;\n      } else {\n        node[subNode.name] = value;\n      }\n    } else if (name === 'Connections' && subNode.name === 'C') {\n      const array = [];\n      subNode.propertyList.forEach(function (property, i) {\n        // first Connection is FBX type (OO, OP, etc.). We'll discard these\n        if (i !== 0) array.push(property);\n      });\n\n      if (node.connections === undefined) {\n        node.connections = [];\n      }\n\n      node.connections.push(array);\n    } else if (subNode.name === 'Properties70') {\n      const keys = Object.keys(subNode);\n      keys.forEach(function (key) {\n        node[key] = subNode[key];\n      });\n    } else if (name === 'Properties70' && subNode.name === 'P') {\n      let innerPropName = subNode.propertyList[0];\n      let innerPropType1 = subNode.propertyList[1];\n      const innerPropType2 = subNode.propertyList[2];\n      const innerPropFlag = subNode.propertyList[3];\n      let innerPropValue;\n      if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n      if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n\n      if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n        innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n      } else {\n        innerPropValue = subNode.propertyList[4];\n      } // this will be copied to parent, see above\n\n\n      node[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n    } else if (node[subNode.name] === undefined) {\n      if (typeof subNode.id === 'number') {\n        node[subNode.name] = {};\n        node[subNode.name][subNode.id] = subNode;\n      } else {\n        node[subNode.name] = subNode;\n      }\n    } else {\n      if (subNode.name === 'PoseNode') {\n        if (!Array.isArray(node[subNode.name])) {\n          node[subNode.name] = [node[subNode.name]];\n        }\n\n        node[subNode.name].push(subNode);\n      } else if (node[subNode.name][subNode.id] === undefined) {\n        node[subNode.name][subNode.id] = subNode;\n      }\n    }\n  }\n\n  parseProperty(reader) {\n    const type = reader.getString(1);\n    let length;\n\n    switch (type) {\n      case 'C':\n        return reader.getBoolean();\n\n      case 'D':\n        return reader.getFloat64();\n\n      case 'F':\n        return reader.getFloat32();\n\n      case 'I':\n        return reader.getInt32();\n\n      case 'L':\n        return reader.getInt64();\n\n      case 'R':\n        length = reader.getUint32();\n        return reader.getArrayBuffer(length);\n\n      case 'S':\n        length = reader.getUint32();\n        return reader.getString(length);\n\n      case 'Y':\n        return reader.getInt16();\n\n      case 'b':\n      case 'c':\n      case 'd':\n      case 'f':\n      case 'i':\n      case 'l':\n        const arrayLength = reader.getUint32();\n        const encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n        const compressedLength = reader.getUint32();\n\n        if (encoding === 0) {\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader.getBooleanArray(arrayLength);\n\n            case 'd':\n              return reader.getFloat64Array(arrayLength);\n\n            case 'f':\n              return reader.getFloat32Array(arrayLength);\n\n            case 'i':\n              return reader.getInt32Array(arrayLength);\n\n            case 'l':\n              return reader.getInt64Array(arrayLength);\n          }\n        }\n\n        const data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n        const reader2 = new BinaryReader(data.buffer);\n\n        switch (type) {\n          case 'b':\n          case 'c':\n            return reader2.getBooleanArray(arrayLength);\n\n          case 'd':\n            return reader2.getFloat64Array(arrayLength);\n\n          case 'f':\n            return reader2.getFloat32Array(arrayLength);\n\n          case 'i':\n            return reader2.getInt32Array(arrayLength);\n\n          case 'l':\n            return reader2.getInt64Array(arrayLength);\n        }\n\n      default:\n        throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n    }\n  }\n\n}\n\nclass BinaryReader {\n  constructor(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n\n  getOffset() {\n    return this.offset;\n  }\n\n  size() {\n    return this.dv.buffer.byteLength;\n  }\n\n  skip(length) {\n    this.offset += length;\n  } // seems like true/false representation depends on exporter.\n  // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n  // then sees LSB.\n\n\n  getBoolean() {\n    return (this.getUint8() & 1) === 1;\n  }\n\n  getBooleanArray(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getBoolean());\n    }\n\n    return a;\n  }\n\n  getUint8() {\n    const value = this.dv.getUint8(this.offset);\n    this.offset += 1;\n    return value;\n  }\n\n  getInt16() {\n    const value = this.dv.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  getInt32() {\n    const value = this.dv.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  getInt32Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt32());\n    }\n\n    return a;\n  }\n\n  getUint32() {\n    const value = this.dv.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  } // JavaScript doesn't support 64-bit integer so calculate this here\n  // 1 << 32 will return 1 so using multiply operation instead here.\n  // There's a possibility that this method returns wrong value if the value\n  // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n  // TODO: safely handle 64-bit integer\n\n\n  getInt64() {\n    let low, high;\n\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    } // calculate negative value\n\n\n    if (high & 0x80000000) {\n      high = ~high & 0xffffffff;\n      low = ~low & 0xffffffff;\n      if (low === 0xffffffff) high = high + 1 & 0xffffffff;\n      low = low + 1 & 0xffffffff;\n      return -(high * 0x100000000 + low);\n    }\n\n    return high * 0x100000000 + low;\n  }\n\n  getInt64Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt64());\n    }\n\n    return a;\n  } // Note: see getInt64() comment\n\n\n  getUint64() {\n    let low, high;\n\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n\n    return high * 0x100000000 + low;\n  }\n\n  getFloat32() {\n    const value = this.dv.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  getFloat32Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat32());\n    }\n\n    return a;\n  }\n\n  getFloat64() {\n    const value = this.dv.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n\n  getFloat64Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat64());\n    }\n\n    return a;\n  }\n\n  getArrayBuffer(size) {\n    const value = this.dv.buffer.slice(this.offset, this.offset + size);\n    this.offset += size;\n    return value;\n  }\n\n  getString(size) {\n    // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n    let a = [];\n\n    for (let i = 0; i < size; i++) {\n      a[i] = this.getUint8();\n    }\n\n    const nullByte = a.indexOf(0);\n    if (nullByte >= 0) a = a.slice(0, nullByte);\n    return LoaderUtils.decodeText(new Uint8Array(a));\n  }\n\n} // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\n\n\nclass FBXTree {\n  add(key, val) {\n    this[key] = val;\n  }\n\n} // ************** UTILITY FUNCTIONS **************\n\n\nfunction isFbxFormatBinary(buffer) {\n  const CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\n\nfunction isFbxFormatASCII(text) {\n  const CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n  let cursor = 0;\n\n  function read(offset) {\n    const result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n\n  for (let i = 0; i < CORRECT.length; ++i) {\n    const num = read(1);\n\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getFbxVersion(text) {\n  const versionRegExp = /FBXVersion: (\\d+)/;\n  const match = text.match(versionRegExp);\n\n  if (match) {\n    const version = parseInt(match[1]);\n    return version;\n  }\n\n  throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n} // Converts FBX ticks into real time seconds.\n\n\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158000;\n}\n\nconst dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  let index;\n\n  switch (infoObject.mappingType) {\n    case 'ByPolygonVertex':\n      index = polygonVertexIndex;\n      break;\n\n    case 'ByPolygon':\n      index = polygonIndex;\n      break;\n\n    case 'ByVertice':\n      index = vertexIndex;\n      break;\n\n    case 'AllSame':\n      index = infoObject.indices[0];\n      break;\n\n    default:\n      console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n  }\n\n  if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n  const from = index * infoObject.dataSize;\n  const to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\n\nconst tempEuler = new Euler();\nconst tempVec = new Vector3(); // generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\nfunction generateTransform(transformData) {\n  const lTranslationM = new Matrix4();\n  const lPreRotationM = new Matrix4();\n  const lRotationM = new Matrix4();\n  const lPostRotationM = new Matrix4();\n  const lScalingM = new Matrix4();\n  const lScalingPivotM = new Matrix4();\n  const lScalingOffsetM = new Matrix4();\n  const lRotationOffsetM = new Matrix4();\n  const lRotationPivotM = new Matrix4();\n  const lParentGX = new Matrix4();\n  const lParentLX = new Matrix4();\n  const lGlobalT = new Matrix4();\n  const inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n\n  if (transformData.preRotation) {\n    const array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n\n  if (transformData.rotation) {\n    const array = transformData.rotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n\n  if (transformData.postRotation) {\n    const array = transformData.postRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    lPostRotationM.invert();\n  }\n\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\n\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\n\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n\n  const lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM); // Global Rotation\n\n  const lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX); // Global Shear*Scaling\n\n  const lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  const lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  const lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  const lLSM = lScalingM;\n  const lGlobalRS = new Matrix4();\n\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    const lParentLSM_inv = lParentLSM.clone().invert();\n    const lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n\n  const lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  const lScalingPivotM_inv = lScalingPivotM.clone().invert(); // Calculate the local transform matrix\n\n  let lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  const lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS); // from global to local\n\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n} // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\n\nfunction getEulerOrder(order) {\n  order = order || 0;\n  const enums = ['ZYX', // -> XYZ extrinsic\n  'YZX', // -> XZY extrinsic\n  'XZY', // -> YZX extrinsic\n  'ZXY', // -> YXZ extrinsic\n  'YXZ', // -> ZXY extrinsic\n  'XYZ' // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n\n  if (order === 6) {\n    console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n    return enums[0];\n  }\n\n  return enums[order];\n} // Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\n\n\nfunction parseNumberArray(value) {\n  const array = value.split(',').map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\n\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === undefined) from = 0;\n  if (to === undefined) to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\n\nfunction append(a, b) {\n  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\n\nfunction slice(a, b, from, to) {\n  for (let i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n\n  return a;\n} // inject array a2 into array a1 at index\n\n\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\n\nexport { FBXLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","TextureLoader","RepeatWrapping","ClampToEdgeWrapping","Texture","MeshPhongMaterial","MeshLambertMaterial","Color","sRGBEncoding","EquirectangularReflectionMapping","Matrix4","Group","Bone","PropertyBinding","Object3D","OrthographicCamera","PerspectiveCamera","PointLight","MathUtils","SpotLight","DirectionalLight","SkinnedMesh","Mesh","LineBasicMaterial","Line","Vector3","Skeleton","AmbientLight","BufferGeometry","Float32BufferAttribute","Uint16BufferAttribute","Matrix3","Vector4","AnimationClip","Quaternion","Euler","VectorKeyframeTrack","QuaternionKeyframeTrack","NumberKeyframeTrack","unzlibSync","NURBSCurve","fbxTree","connections","sceneGraph","FBXLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","undefined","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","getHandler","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","value","valueV","wrapS","wrapT","values","Scaling","repeat","x","y","currentPath","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","setValues","BumpFactor","bumpScale","Diffuse","color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","encoding","displacementMap","emissiveMap","normalMap","envMap","mapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","add","bindSkeleton","createAmbientLight","traverse","node","userData","transformData","parentMatrix","matrix","parentMatrixWorld","matrixWorld","transform","generateTransform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","sanitizeNodeName","getTransformData","bone","subBone","copy","cameraAttribute","attr","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","setFocalLength","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","angle","Math","PI","InnerAngle","degToRad","penumbra","OuterAngle","max","CastShadows","castShadow","geometry","attributes","vertexColors","FBX_Deformer","normalizeSkinWeights","reduce","geo","linewidth","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","bind","BindPoseNode","Pose","NbPoseNodes","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","vertex","setAttribute","colors","weightsIndices","vertexWeights","normal","normalMatrix","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","index","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","morphTargetsRelative","morphAttributes","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","startKnot","endKnot","Form","curve","points","getPoints","setFromPoints","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","z","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","decompose","toArray","setFromQuaternion","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","interpolateRotations","setFromEuler","invert","quaternion","euler","quaternionValues","premultiply","multiply","val","morphNum","getObjectByName","morphTargetDictionary","sort","targetIndex","lastValue","currentValue","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","text","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","elem","append","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","type2","flag","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","reader2","littleEndian","dv","DataView","offset","low","high","nullByte","decodeText","CORRECT","cursor","read","result","num","versionRegExp","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","clone","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGRSM","lParentGSM","lLSM","lGlobalRS","lParentLSM","setFromMatrixScale","lParentLSM_inv","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2"],"sources":["/home/odin/Desktop/THP☠/Developpeur/Final_Project/pokeland/node_modules/three-stdlib/loaders/FBXLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, sRGBEncoding, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from 'three';\nimport { unzlibSync } from 'fflate';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * Binary format specification:\n *\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nlet fbxTree;\nlet connections;\nlet sceneGraph;\n\nclass FBXLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(FBXBuffer, path) {\n    if (isFbxFormatBinary(FBXBuffer)) {\n      fbxTree = new BinaryParser().parse(FBXBuffer);\n    } else {\n      const FBXText = convertArrayBufferToString(FBXBuffer);\n\n      if (!isFbxFormatASCII(FBXText)) {\n        throw new Error('THREE.FBXLoader: Unknown format.');\n      }\n\n      if (getFbxVersion(FBXText) < 7000) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n      }\n\n      fbxTree = new TextParser().parse(FBXText);\n    } // console.log( fbxTree );\n\n\n    const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n  }\n\n} // Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\n\n\nclass FBXTreeParser {\n  constructor(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n\n  parse() {\n    connections = this.parseConnections();\n    const images = this.parseImages();\n    const textures = this.parseTextures(images);\n    const materials = this.parseMaterials(textures);\n    const deformers = this.parseDeformers();\n    const geometryMap = new GeometryParser().parse(deformers);\n    this.parseScene(deformers, geometryMap, materials);\n    return sceneGraph;\n  } // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n\n\n  parseConnections() {\n    const connectionMap = new Map();\n\n    if ('Connections' in fbxTree) {\n      const rawConnections = fbxTree.Connections.connections;\n      rawConnections.forEach(function (rawConnection) {\n        const fromID = rawConnection[0];\n        const toID = rawConnection[1];\n        const relationship = rawConnection[2];\n\n        if (!connectionMap.has(fromID)) {\n          connectionMap.set(fromID, {\n            parents: [],\n            children: []\n          });\n        }\n\n        const parentRelationship = {\n          ID: toID,\n          relationship: relationship\n        };\n        connectionMap.get(fromID).parents.push(parentRelationship);\n\n        if (!connectionMap.has(toID)) {\n          connectionMap.set(toID, {\n            parents: [],\n            children: []\n          });\n        }\n\n        const childRelationship = {\n          ID: fromID,\n          relationship: relationship\n        };\n        connectionMap.get(toID).children.push(childRelationship);\n      });\n    }\n\n    return connectionMap;\n  } // Parse FBXTree.Objects.Video for embedded image data\n  // These images are connected to textures in FBXTree.Objects.Textures\n  // via FBXTree.Connections.\n\n\n  parseImages() {\n    const images = {};\n    const blobs = {};\n\n    if ('Video' in fbxTree.Objects) {\n      const videoNodes = fbxTree.Objects.Video;\n\n      for (const nodeID in videoNodes) {\n        const videoNode = videoNodes[nodeID];\n        const id = parseInt(nodeID);\n        images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n        if ('Content' in videoNode) {\n          const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n          const base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n\n          if (arrayBufferContent || base64Content) {\n            const image = this.parseImage(videoNodes[nodeID]);\n            blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n          }\n        }\n      }\n    }\n\n    for (const id in images) {\n      const filename = images[id];\n      if (blobs[filename] !== undefined) images[id] = blobs[filename];else images[id] = images[id].split('\\\\').pop();\n    }\n\n    return images;\n  } // Parse embedded image data in FBXTree.Video.Content\n\n\n  parseImage(videoNode) {\n    const content = videoNode.Content;\n    const fileName = videoNode.RelativeFilename || videoNode.Filename;\n    const extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n    let type;\n\n    switch (extension) {\n      case 'bmp':\n        type = 'image/bmp';\n        break;\n\n      case 'jpg':\n      case 'jpeg':\n        type = 'image/jpeg';\n        break;\n\n      case 'png':\n        type = 'image/png';\n        break;\n\n      case 'tif':\n        type = 'image/tiff';\n        break;\n\n      case 'tga':\n        if (this.manager.getHandler('.tga') === null) {\n          console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n        }\n\n        type = 'image/tga';\n        break;\n\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n        return;\n    }\n\n    if (typeof content === 'string') {\n      // ASCII format\n      return 'data:' + type + ';base64,' + content;\n    } else {\n      // Binary Format\n      const array = new Uint8Array(content);\n      return window.URL.createObjectURL(new Blob([array], {\n        type: type\n      }));\n    }\n  } // Parse nodes in FBXTree.Objects.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.Video\n\n\n  parseTextures(images) {\n    const textureMap = new Map();\n\n    if ('Texture' in fbxTree.Objects) {\n      const textureNodes = fbxTree.Objects.Texture;\n\n      for (const nodeID in textureNodes) {\n        const texture = this.parseTexture(textureNodes[nodeID], images);\n        textureMap.set(parseInt(nodeID), texture);\n      }\n    }\n\n    return textureMap;\n  } // Parse individual node in FBXTree.Objects.Texture\n\n\n  parseTexture(textureNode, images) {\n    const texture = this.loadTexture(textureNode, images);\n    texture.ID = textureNode.id;\n    texture.name = textureNode.attrName;\n    const wrapModeU = textureNode.WrapModeU;\n    const wrapModeV = textureNode.WrapModeV;\n    const valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n    const valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n    // 0: repeat(default), 1: clamp\n\n    texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\n    if ('Scaling' in textureNode) {\n      const values = textureNode.Scaling.value;\n      texture.repeat.x = values[0];\n      texture.repeat.y = values[1];\n    }\n\n    return texture;\n  } // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n\n\n  loadTexture(textureNode, images) {\n    let fileName;\n    const currentPath = this.textureLoader.path;\n    const children = connections.get(textureNode.id).children;\n\n    if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n      fileName = images[children[0].ID];\n\n      if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n        this.textureLoader.setPath(undefined);\n      }\n    }\n\n    let texture;\n    const extension = textureNode.FileName.slice(-3).toLowerCase();\n\n    if (extension === 'tga') {\n      const loader = this.manager.getHandler('.tga');\n\n      if (loader === null) {\n        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        loader.setPath(this.textureLoader.path);\n        texture = loader.load(fileName);\n      }\n    } else if (extension === 'psd') {\n      console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n      texture = new Texture();\n    } else {\n      texture = this.textureLoader.load(fileName);\n    }\n\n    this.textureLoader.setPath(currentPath);\n    return texture;\n  } // Parse nodes in FBXTree.Objects.Material\n\n\n  parseMaterials(textureMap) {\n    const materialMap = new Map();\n\n    if ('Material' in fbxTree.Objects) {\n      const materialNodes = fbxTree.Objects.Material;\n\n      for (const nodeID in materialNodes) {\n        const material = this.parseMaterial(materialNodes[nodeID], textureMap);\n        if (material !== null) materialMap.set(parseInt(nodeID), material);\n      }\n    }\n\n    return materialMap;\n  } // Parse single node in FBXTree.Objects.Material\n  // Materials are connected to texture maps in FBXTree.Objects.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n\n\n  parseMaterial(materialNode, textureMap) {\n    const ID = materialNode.id;\n    const name = materialNode.attrName;\n    let type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n    if (typeof type === 'object') {\n      type = type.value;\n    } // Ignore unused materials which don't have any connections.\n\n\n    if (!connections.has(ID)) return null;\n    const parameters = this.parseParameters(materialNode, textureMap, ID);\n    let material;\n\n    switch (type.toLowerCase()) {\n      case 'phong':\n        material = new MeshPhongMaterial();\n        break;\n\n      case 'lambert':\n        material = new MeshLambertMaterial();\n        break;\n\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n        material = new MeshPhongMaterial();\n        break;\n    }\n\n    material.setValues(parameters);\n    material.name = name;\n    return material;\n  } // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n\n\n  parseParameters(materialNode, textureMap, ID) {\n    const parameters = {};\n\n    if (materialNode.BumpFactor) {\n      parameters.bumpScale = materialNode.BumpFactor.value;\n    }\n\n    if (materialNode.Diffuse) {\n      parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n    } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n      // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n      parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n    }\n\n    if (materialNode.DisplacementFactor) {\n      parameters.displacementScale = materialNode.DisplacementFactor.value;\n    }\n\n    if (materialNode.Emissive) {\n      parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n    } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n      // The blender exporter exports emissive color here instead of in materialNode.Emissive\n      parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n    }\n\n    if (materialNode.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n    }\n\n    if (materialNode.Opacity) {\n      parameters.opacity = parseFloat(materialNode.Opacity.value);\n    }\n\n    if (parameters.opacity < 1.0) {\n      parameters.transparent = true;\n    }\n\n    if (materialNode.ReflectionFactor) {\n      parameters.reflectivity = materialNode.ReflectionFactor.value;\n    }\n\n    if (materialNode.Shininess) {\n      parameters.shininess = materialNode.Shininess.value;\n    }\n\n    if (materialNode.Specular) {\n      parameters.specular = new Color().fromArray(materialNode.Specular.value);\n    } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n      // The blender exporter exports specular color here instead of in materialNode.Specular\n      parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n    }\n\n    const scope = this;\n    connections.get(ID).children.forEach(function (child) {\n      const type = child.relationship;\n\n      switch (type) {\n        case 'Bump':\n          parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'Maya|TEX_ao_map':\n          parameters.aoMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'DiffuseColor':\n        case 'Maya|TEX_color_map':\n          parameters.map = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.map !== undefined) {\n            parameters.map.encoding = sRGBEncoding;\n          }\n\n          break;\n\n        case 'DisplacementColor':\n          parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'EmissiveColor':\n          parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.emissiveMap !== undefined) {\n            parameters.emissiveMap.encoding = sRGBEncoding;\n          }\n\n          break;\n\n        case 'NormalMap':\n        case 'Maya|TEX_normal_map':\n          parameters.normalMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'ReflectionColor':\n          parameters.envMap = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.envMap !== undefined) {\n            parameters.envMap.mapping = EquirectangularReflectionMapping;\n            parameters.envMap.encoding = sRGBEncoding;\n          }\n\n          break;\n\n        case 'SpecularColor':\n          parameters.specularMap = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.specularMap !== undefined) {\n            parameters.specularMap.encoding = sRGBEncoding;\n          }\n\n          break;\n\n        case 'TransparentColor':\n        case 'TransparencyFactor':\n          parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n          parameters.transparent = true;\n          break;\n\n        case 'AmbientColor':\n        case 'ShininessExponent': // AKA glossiness map\n\n        case 'SpecularFactor': // AKA specularLevel\n\n        case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n        default:\n          console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n          break;\n      }\n    });\n    return parameters;\n  } // get a texture from the textureMap for use by a material.\n\n\n  getTexture(textureMap, id) {\n    // if the texture is a layered texture, just use the first layer and issue a warning\n    if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n      console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n      id = connections.get(id).children[0].ID;\n    }\n\n    return textureMap.get(id);\n  } // Parse nodes in FBXTree.Objects.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\n\n  parseDeformers() {\n    const skeletons = {};\n    const morphTargets = {};\n\n    if ('Deformer' in fbxTree.Objects) {\n      const DeformerNodes = fbxTree.Objects.Deformer;\n\n      for (const nodeID in DeformerNodes) {\n        const deformerNode = DeformerNodes[nodeID];\n        const relationships = connections.get(parseInt(nodeID));\n\n        if (deformerNode.attrType === 'Skin') {\n          const skeleton = this.parseSkeleton(relationships, DeformerNodes);\n          skeleton.ID = nodeID;\n\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n          }\n\n          skeleton.geometryID = relationships.parents[0].ID;\n          skeletons[nodeID] = skeleton;\n        } else if (deformerNode.attrType === 'BlendShape') {\n          const morphTarget = {\n            id: nodeID\n          };\n          morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n          morphTarget.id = nodeID;\n\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n          }\n\n          morphTargets[nodeID] = morphTarget;\n        }\n      }\n    }\n\n    return {\n      skeletons: skeletons,\n      morphTargets: morphTargets\n    };\n  } // Parse single nodes in FBXTree.Objects.Deformer\n  // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n  // Each skin node represents a skeleton and each cluster node represents a bone\n\n\n  parseSkeleton(relationships, deformerNodes) {\n    const rawBones = [];\n    relationships.children.forEach(function (child) {\n      const boneNode = deformerNodes[child.ID];\n      if (boneNode.attrType !== 'Cluster') return;\n      const rawBone = {\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transformLink: new Matrix4().fromArray(boneNode.TransformLink.a) // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n        // linkMode: boneNode.Mode,\n\n      };\n\n      if ('Indexes' in boneNode) {\n        rawBone.indices = boneNode.Indexes.a;\n        rawBone.weights = boneNode.Weights.a;\n      }\n\n      rawBones.push(rawBone);\n    });\n    return {\n      rawBones: rawBones,\n      bones: []\n    };\n  } // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\n\n  parseMorphTargets(relationships, deformerNodes) {\n    const rawMorphTargets = [];\n\n    for (let i = 0; i < relationships.children.length; i++) {\n      const child = relationships.children[i];\n      const morphTargetNode = deformerNodes[child.ID];\n      const rawMorphTarget = {\n        name: morphTargetNode.attrName,\n        initialWeight: morphTargetNode.DeformPercent,\n        id: morphTargetNode.id,\n        fullWeights: morphTargetNode.FullWeights.a\n      };\n      if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n      rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n        return child.relationship === undefined;\n      })[0].ID;\n      rawMorphTargets.push(rawMorphTarget);\n    }\n\n    return rawMorphTargets;\n  } // create the main Group() to be returned by the loader\n\n\n  parseScene(deformers, geometryMap, materialMap) {\n    sceneGraph = new Group();\n    const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n    const modelNodes = fbxTree.Objects.Model;\n    const scope = this;\n    modelMap.forEach(function (model) {\n      const modelNode = modelNodes[model.ID];\n      scope.setLookAtProperties(model, modelNode);\n      const parentConnections = connections.get(model.ID).parents;\n      parentConnections.forEach(function (connection) {\n        const parent = modelMap.get(connection.ID);\n        if (parent !== undefined) parent.add(model);\n      });\n\n      if (model.parent === null) {\n        sceneGraph.add(model);\n      }\n    });\n    this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n    this.createAmbientLight();\n    sceneGraph.traverse(function (node) {\n      if (node.userData.transformData) {\n        if (node.parent) {\n          node.userData.transformData.parentMatrix = node.parent.matrix;\n          node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n        }\n\n        const transform = generateTransform(node.userData.transformData);\n        node.applyMatrix4(transform);\n        node.updateWorldMatrix();\n      }\n    });\n    const animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n    if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n      sceneGraph.children[0].animations = animations;\n      sceneGraph = sceneGraph.children[0];\n    }\n\n    sceneGraph.animations = animations;\n  } // parse nodes in FBXTree.Objects.Model\n\n\n  parseModels(skeletons, geometryMap, materialMap) {\n    const modelMap = new Map();\n    const modelNodes = fbxTree.Objects.Model;\n\n    for (const nodeID in modelNodes) {\n      const id = parseInt(nodeID);\n      const node = modelNodes[nodeID];\n      const relationships = connections.get(id);\n      let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n\n      if (!model) {\n        switch (node.attrType) {\n          case 'Camera':\n            model = this.createCamera(relationships);\n            break;\n\n          case 'Light':\n            model = this.createLight(relationships);\n            break;\n\n          case 'Mesh':\n            model = this.createMesh(relationships, geometryMap, materialMap);\n            break;\n\n          case 'NurbsCurve':\n            model = this.createCurve(relationships, geometryMap);\n            break;\n\n          case 'LimbNode':\n          case 'Root':\n            model = new Bone();\n            break;\n\n          case 'Null':\n          default:\n            model = new Group();\n            break;\n        }\n\n        model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : '';\n        model.ID = id;\n      }\n\n      this.getTransformData(model, node);\n      modelMap.set(id, model);\n    }\n\n    return modelMap;\n  }\n\n  buildSkeleton(relationships, skeletons, id, name) {\n    let bone = null;\n    relationships.parents.forEach(function (parent) {\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID];\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          if (rawBone.ID === parent.ID) {\n            const subBone = bone;\n            bone = new Bone();\n            bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n            bone.name = name ? PropertyBinding.sanitizeNodeName(name) : '';\n            bone.ID = id;\n            skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n            // duplicate the bone here and and it as a child of the first bone\n\n            if (subBone !== null) {\n              bone.add(subBone);\n            }\n          }\n        });\n      }\n    });\n    return bone;\n  } // create a PerspectiveCamera or OrthographicCamera\n\n\n  createCamera(relationships) {\n    let model;\n    let cameraAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n      if (attr !== undefined) {\n        cameraAttribute = attr;\n      }\n    });\n\n    if (cameraAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type = 0;\n\n      if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n        type = 1;\n      }\n\n      let nearClippingPlane = 1;\n\n      if (cameraAttribute.NearPlane !== undefined) {\n        nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n      }\n\n      let farClippingPlane = 1000;\n\n      if (cameraAttribute.FarPlane !== undefined) {\n        farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n      }\n\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n\n      if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n        width = cameraAttribute.AspectWidth.value;\n        height = cameraAttribute.AspectHeight.value;\n      }\n\n      const aspect = width / height;\n      let fov = 45;\n\n      if (cameraAttribute.FieldOfView !== undefined) {\n        fov = cameraAttribute.FieldOfView.value;\n      }\n\n      const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n      switch (type) {\n        case 0:\n          // Perspective\n          model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n          if (focalLength !== null) model.setFocalLength(focalLength);\n          break;\n\n        case 1:\n          // Orthographic\n          model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n          model = new Object3D();\n          break;\n      }\n    }\n\n    return model;\n  } // Create a DirectionalLight, PointLight or SpotLight\n\n\n  createLight(relationships) {\n    let model;\n    let lightAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n      if (attr !== undefined) {\n        lightAttribute = attr;\n      }\n    });\n\n    if (lightAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type; // LightType can be undefined for Point lights\n\n      if (lightAttribute.LightType === undefined) {\n        type = 0;\n      } else {\n        type = lightAttribute.LightType.value;\n      }\n\n      let color = 0xffffff;\n\n      if (lightAttribute.Color !== undefined) {\n        color = new Color().fromArray(lightAttribute.Color.value);\n      }\n\n      let intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n      if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n        intensity = 0;\n      }\n\n      let distance = 0;\n\n      if (lightAttribute.FarAttenuationEnd !== undefined) {\n        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n          distance = 0;\n        } else {\n          distance = lightAttribute.FarAttenuationEnd.value;\n        }\n      } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n\n      const decay = 1;\n\n      switch (type) {\n        case 0:\n          // Point\n          model = new PointLight(color, intensity, distance, decay);\n          break;\n\n        case 1:\n          // Directional\n          model = new DirectionalLight(color, intensity);\n          break;\n\n        case 2:\n          // Spot\n          let angle = Math.PI / 3;\n\n          if (lightAttribute.InnerAngle !== undefined) {\n            angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n          }\n\n          let penumbra = 0;\n\n          if (lightAttribute.OuterAngle !== undefined) {\n            // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n            // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n            // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n            penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n            penumbra = Math.max(penumbra, 1);\n          }\n\n          model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n          model = new PointLight(color, intensity);\n          break;\n      }\n\n      if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n        model.castShadow = true;\n      }\n    }\n\n    return model;\n  }\n\n  createMesh(relationships, geometryMap, materialMap) {\n    let model;\n    let geometry = null;\n    let material = null;\n    const materials = []; // get geometry and materials(s) from connections\n\n    relationships.children.forEach(function (child) {\n      if (geometryMap.has(child.ID)) {\n        geometry = geometryMap.get(child.ID);\n      }\n\n      if (materialMap.has(child.ID)) {\n        materials.push(materialMap.get(child.ID));\n      }\n    });\n\n    if (materials.length > 1) {\n      material = materials;\n    } else if (materials.length > 0) {\n      material = materials[0];\n    } else {\n      material = new MeshPhongMaterial({\n        color: 0xcccccc\n      });\n      materials.push(material);\n    }\n\n    if ('color' in geometry.attributes) {\n      materials.forEach(function (material) {\n        material.vertexColors = true;\n      });\n    }\n\n    if (geometry.FBX_Deformer) {\n      model = new SkinnedMesh(geometry, material);\n      model.normalizeSkinWeights();\n    } else {\n      model = new Mesh(geometry, material);\n    }\n\n    return model;\n  }\n\n  createCurve(relationships, geometryMap) {\n    const geometry = relationships.children.reduce(function (geo, child) {\n      if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n      return geo;\n    }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n    const material = new LineBasicMaterial({\n      color: 0x3300ff,\n      linewidth: 1\n    });\n    return new Line(geometry, material);\n  } // parse the model node for transform data\n\n\n  getTransformData(model, modelNode) {\n    const transformData = {};\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n    if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n    if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n    if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n    if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n    if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n    if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n    if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n    if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n    if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n    model.userData.transformData = transformData;\n  }\n\n  setLookAtProperties(model, modelNode) {\n    if ('LookAtProperty' in modelNode) {\n      const children = connections.get(model.ID).children;\n      children.forEach(function (child) {\n        if (child.relationship === 'LookAtProperty') {\n          const lookAtTarget = fbxTree.Objects.Model[child.ID];\n\n          if ('Lcl_Translation' in lookAtTarget) {\n            const pos = lookAtTarget.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n            if (model.target !== undefined) {\n              model.target.position.fromArray(pos);\n              sceneGraph.add(model.target);\n            } else {\n              // Cameras and other Object3Ds\n              model.lookAt(new Vector3().fromArray(pos));\n            }\n          }\n        }\n      });\n    }\n  }\n\n  bindSkeleton(skeletons, geometryMap, modelMap) {\n    const bindMatrices = this.parsePoseNodes();\n\n    for (const ID in skeletons) {\n      const skeleton = skeletons[ID];\n      const parents = connections.get(parseInt(skeleton.ID)).parents;\n      parents.forEach(function (parent) {\n        if (geometryMap.has(parent.ID)) {\n          const geoID = parent.ID;\n          const geoRelationships = connections.get(geoID);\n          geoRelationships.parents.forEach(function (geoConnParent) {\n            if (modelMap.has(geoConnParent.ID)) {\n              const model = modelMap.get(geoConnParent.ID);\n              model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n            }\n          });\n        }\n      });\n    }\n  }\n\n  parsePoseNodes() {\n    const bindMatrices = {};\n\n    if ('Pose' in fbxTree.Objects) {\n      const BindPoseNode = fbxTree.Objects.Pose;\n\n      for (const nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === 'BindPose' && BindPoseNode[nodeID].NbPoseNodes > 0) {\n          const poseNodes = BindPoseNode[nodeID].PoseNode;\n\n          if (Array.isArray(poseNodes)) {\n            poseNodes.forEach(function (poseNode) {\n              bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n            });\n          } else {\n            bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n          }\n        }\n      }\n    }\n\n    return bindMatrices;\n  } // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\n\n  createAmbientLight() {\n    if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n      const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n      const r = ambientColor[0];\n      const g = ambientColor[1];\n      const b = ambientColor[2];\n\n      if (r !== 0 || g !== 0 || b !== 0) {\n        const color = new Color(r, g, b);\n        sceneGraph.add(new AmbientLight(color, 1));\n      }\n    }\n  }\n\n} // parse Geometry data from FBXTree and return map of BufferGeometries\n\n\nclass GeometryParser {\n  // Parse nodes in FBXTree.Objects.Geometry\n  parse(deformers) {\n    const geometryMap = new Map();\n\n    if ('Geometry' in fbxTree.Objects) {\n      const geoNodes = fbxTree.Objects.Geometry;\n\n      for (const nodeID in geoNodes) {\n        const relationships = connections.get(parseInt(nodeID));\n        const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n        geometryMap.set(parseInt(nodeID), geo);\n      }\n    }\n\n    return geometryMap;\n  } // Parse single node in FBXTree.Objects.Geometry\n\n\n  parseGeometry(relationships, geoNode, deformers) {\n    switch (geoNode.attrType) {\n      case 'Mesh':\n        return this.parseMeshGeometry(relationships, geoNode, deformers);\n\n      case 'NurbsCurve':\n        return this.parseNurbsGeometry(geoNode);\n    }\n  } // Parse single node mesh geometry in FBXTree.Objects.Geometry\n\n\n  parseMeshGeometry(relationships, geoNode, deformers) {\n    const skeletons = deformers.skeletons;\n    const morphTargets = [];\n    const modelNodes = relationships.parents.map(function (parent) {\n      return fbxTree.Objects.Model[parent.ID];\n    }); // don't create geometry if it is not associated with any models\n\n    if (modelNodes.length === 0) return;\n    const skeleton = relationships.children.reduce(function (skeleton, child) {\n      if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n      return skeleton;\n    }, null);\n    relationships.children.forEach(function (child) {\n      if (deformers.morphTargets[child.ID] !== undefined) {\n        morphTargets.push(deformers.morphTargets[child.ID]);\n      }\n    }); // Assume one model and get the preRotation from that\n    // if there is more than one model associated with the geometry this may cause problems\n\n    const modelNode = modelNodes[0];\n    const transformData = {};\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n    if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n    if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n    const transform = generateTransform(transformData);\n    return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n  } // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n\n\n  genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n    const geo = new BufferGeometry();\n    if (geoNode.attrName) geo.name = geoNode.attrName;\n    const geoInfo = this.parseGeoNode(geoNode, skeleton);\n    const buffers = this.genBuffers(geoInfo);\n    const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n    positionAttribute.applyMatrix4(preTransform);\n    geo.setAttribute('position', positionAttribute);\n\n    if (buffers.colors.length > 0) {\n      geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3));\n    }\n\n    if (skeleton) {\n      geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4));\n      geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n      geo.FBX_Deformer = skeleton;\n    }\n\n    if (buffers.normal.length > 0) {\n      const normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n      const normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n      normalAttribute.applyNormalMatrix(normalMatrix);\n      geo.setAttribute('normal', normalAttribute);\n    }\n\n    buffers.uvs.forEach(function (uvBuffer, i) {\n      // subsequent uv buffers are called 'uv1', 'uv2', ...\n      let name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n      if (i === 0) {\n        name = 'uv';\n      }\n\n      geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n    });\n\n    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n      // Convert the material indices of each vertex into rendering groups on the geometry.\n      let prevMaterialIndex = buffers.materialIndex[0];\n      let startIndex = 0;\n      buffers.materialIndex.forEach(function (currentIndex, i) {\n        if (currentIndex !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n          prevMaterialIndex = currentIndex;\n          startIndex = i;\n        }\n      }); // the loop above doesn't add the last group, do that here.\n\n      if (geo.groups.length > 0) {\n        const lastGroup = geo.groups[geo.groups.length - 1];\n        const lastIndex = lastGroup.start + lastGroup.count;\n\n        if (lastIndex !== buffers.materialIndex.length) {\n          geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n        }\n      } // case where there are multiple materials but the whole geometry is only\n      // using one of them\n\n\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n      }\n    }\n\n    this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n    return geo;\n  }\n\n  parseGeoNode(geoNode, skeleton) {\n    const geoInfo = {};\n    geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n    geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n\n    if (geoNode.LayerElementColor) {\n      geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n    }\n\n    if (geoNode.LayerElementMaterial) {\n      geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n    }\n\n    if (geoNode.LayerElementNormal) {\n      geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n    }\n\n    if (geoNode.LayerElementUV) {\n      geoInfo.uv = [];\n      let i = 0;\n\n      while (geoNode.LayerElementUV[i]) {\n        if (geoNode.LayerElementUV[i].UV) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n        }\n\n        i++;\n      }\n    }\n\n    geoInfo.weightTable = {};\n\n    if (skeleton !== null) {\n      geoInfo.skeleton = skeleton;\n      skeleton.rawBones.forEach(function (rawBone, i) {\n        // loop over the bone's vertex indices and weights\n        rawBone.indices.forEach(function (index, j) {\n          if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n          geoInfo.weightTable[index].push({\n            id: i,\n            weight: rawBone.weights[j]\n          });\n        });\n      });\n    }\n\n    return geoInfo;\n  }\n\n  genBuffers(geoInfo) {\n    const buffers = {\n      vertex: [],\n      normal: [],\n      colors: [],\n      uvs: [],\n      materialIndex: [],\n      vertexWeights: [],\n      weightsIndices: []\n    };\n    let polygonIndex = 0;\n    let faceLength = 0;\n    let displayedWeightsWarning = false; // these will hold data for a single face\n\n    let facePositionIndexes = [];\n    let faceNormals = [];\n    let faceColors = [];\n    let faceUVs = [];\n    let faceWeights = [];\n    let faceWeightIndices = [];\n    const scope = this;\n    geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n      let materialIndex;\n      let endOfFace = false; // Face index and vertex index arrays are combined in a single array\n      // A cube with quad faces looks like this:\n      // PolygonVertexIndex: *24 {\n      //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n      //  }\n      // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n      // to find index of last vertex bit shift the index: ^ - 1\n\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n        endOfFace = true;\n      }\n\n      let weightIndices = [];\n      let weights = [];\n      facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n\n      if (geoInfo.color) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n        faceColors.push(data[0], data[1], data[2]);\n      }\n\n      if (geoInfo.skeleton) {\n        if (geoInfo.weightTable[vertexIndex] !== undefined) {\n          geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n            weights.push(wt.weight);\n            weightIndices.push(wt.id);\n          });\n        }\n\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n            displayedWeightsWarning = true;\n          }\n\n          const wIndex = [0, 0, 0, 0];\n          const Weight = [0, 0, 0, 0];\n          weights.forEach(function (weight, weightIndex) {\n            let currentWeight = weight;\n            let currentIndex = weightIndices[weightIndex];\n            Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight;\n                currentWeight = comparedWeight;\n                const tmp = wIndex[comparedWeightIndex];\n                wIndex[comparedWeightIndex] = currentIndex;\n                currentIndex = tmp;\n              }\n            });\n          });\n          weightIndices = wIndex;\n          weights = Weight;\n        } // if the weight array is shorter than 4 pad with 0s\n\n\n        while (weights.length < 4) {\n          weights.push(0);\n          weightIndices.push(0);\n        }\n\n        for (let i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i]);\n          faceWeightIndices.push(weightIndices[i]);\n        }\n      }\n\n      if (geoInfo.normal) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n        faceNormals.push(data[0], data[1], data[2]);\n      }\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n      }\n\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, i) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n\n          if (faceUVs[i] === undefined) {\n            faceUVs[i] = [];\n          }\n\n          faceUVs[i].push(data[0]);\n          faceUVs[i].push(data[1]);\n        });\n      }\n\n      faceLength++;\n\n      if (endOfFace) {\n        scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n        polygonIndex++;\n        faceLength = 0; // reset arrays for the next face\n\n        facePositionIndexes = [];\n        faceNormals = [];\n        faceColors = [];\n        faceUVs = [];\n        faceWeights = [];\n        faceWeightIndices = [];\n      }\n    });\n    return buffers;\n  } // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\n\n  genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n    for (let i = 2; i < faceLength; i++) {\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n\n      if (geoInfo.skeleton) {\n        buffers.vertexWeights.push(faceWeights[0]);\n        buffers.vertexWeights.push(faceWeights[1]);\n        buffers.vertexWeights.push(faceWeights[2]);\n        buffers.vertexWeights.push(faceWeights[3]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n        buffers.vertexWeights.push(faceWeights[i * 4]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[0]);\n        buffers.weightsIndices.push(faceWeightIndices[1]);\n        buffers.weightsIndices.push(faceWeightIndices[2]);\n        buffers.weightsIndices.push(faceWeightIndices[3]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n      }\n\n      if (geoInfo.color) {\n        buffers.colors.push(faceColors[0]);\n        buffers.colors.push(faceColors[1]);\n        buffers.colors.push(faceColors[2]);\n        buffers.colors.push(faceColors[(i - 1) * 3]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n        buffers.colors.push(faceColors[i * 3]);\n        buffers.colors.push(faceColors[i * 3 + 1]);\n        buffers.colors.push(faceColors[i * 3 + 2]);\n      }\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n      }\n\n      if (geoInfo.normal) {\n        buffers.normal.push(faceNormals[0]);\n        buffers.normal.push(faceNormals[1]);\n        buffers.normal.push(faceNormals[2]);\n        buffers.normal.push(faceNormals[(i - 1) * 3]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n        buffers.normal.push(faceNormals[i * 3]);\n        buffers.normal.push(faceNormals[i * 3 + 1]);\n        buffers.normal.push(faceNormals[i * 3 + 2]);\n      }\n\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, j) {\n          if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n          buffers.uvs[j].push(faceUVs[j][0]);\n          buffers.uvs[j].push(faceUVs[j][1]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n          buffers.uvs[j].push(faceUVs[j][i * 2]);\n          buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n        });\n      }\n    }\n  }\n\n  addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n    if (morphTargets.length === 0) return;\n    parentGeo.morphTargetsRelative = true;\n    parentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\n\n    const scope = this;\n    morphTargets.forEach(function (morphTarget) {\n      morphTarget.rawTargets.forEach(function (rawTarget) {\n        const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n\n        if (morphGeoNode !== undefined) {\n          scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n        }\n      });\n    });\n  } // a morph geometry node is similar to a standard  node, and the node is also contained\n  // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n  // and a special attribute Index defining which vertices of the original geometry are affected\n  // Normal and position attributes only have data for the vertices that are affected by the morph\n\n\n  genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n    const vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n    const morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n    const indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n    const length = parentGeo.attributes.position.count * 3;\n    const morphPositions = new Float32Array(length);\n\n    for (let i = 0; i < indices.length; i++) {\n      const morphIndex = indices[i] * 3;\n      morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n      morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n      morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n    } // TODO: add morph normal support\n\n\n    const morphGeoInfo = {\n      vertexIndices: vertexIndices,\n      vertexPositions: morphPositions\n    };\n    const morphBuffers = this.genBuffers(morphGeoInfo);\n    const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n    positionAttribute.name = name || morphGeoNode.attrName;\n    positionAttribute.applyMatrix4(preTransform);\n    parentGeo.morphAttributes.position.push(positionAttribute);\n  } // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\n\n  parseNormals(NormalNode) {\n    const mappingType = NormalNode.MappingInformationType;\n    const referenceType = NormalNode.ReferenceInformationType;\n    const buffer = NormalNode.Normals.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      if ('NormalIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalIndex.a;\n      } else if ('NormalsIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalsIndex.a;\n      }\n    }\n\n    return {\n      dataSize: 3,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\n\n  parseUVs(UVNode) {\n    const mappingType = UVNode.MappingInformationType;\n    const referenceType = UVNode.ReferenceInformationType;\n    const buffer = UVNode.UV.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = UVNode.UVIndex.a;\n    }\n\n    return {\n      dataSize: 2,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\n\n  parseVertexColors(ColorNode) {\n    const mappingType = ColorNode.MappingInformationType;\n    const referenceType = ColorNode.ReferenceInformationType;\n    const buffer = ColorNode.Colors.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = ColorNode.ColorIndex.a;\n    }\n\n    return {\n      dataSize: 4,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\n\n  parseMaterialIndices(MaterialNode) {\n    const mappingType = MaterialNode.MappingInformationType;\n    const referenceType = MaterialNode.ReferenceInformationType;\n\n    if (mappingType === 'NoMappingInformation') {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: 'AllSame',\n        referenceType: referenceType\n      };\n    }\n\n    const materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n    // we expect.So we create an intermediate buffer that points to the index in the buffer,\n    // for conforming with the other functions we've written for other data.\n\n    const materialIndices = [];\n\n    for (let i = 0; i < materialIndexBuffer.length; ++i) {\n      materialIndices.push(i);\n    }\n\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\n\n  parseNurbsGeometry(geoNode) {\n    if (NURBSCurve === undefined) {\n      console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n      return new BufferGeometry();\n    }\n\n    const order = parseInt(geoNode.Order);\n\n    if (isNaN(order)) {\n      console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n      return new BufferGeometry();\n    }\n\n    const degree = order - 1;\n    const knots = geoNode.KnotVector.a;\n    const controlPoints = [];\n    const pointsValues = geoNode.Points.a;\n\n    for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new Vector4().fromArray(pointsValues, i));\n    }\n\n    let startKnot, endKnot;\n\n    if (geoNode.Form === 'Closed') {\n      controlPoints.push(controlPoints[0]);\n    } else if (geoNode.Form === 'Periodic') {\n      startKnot = degree;\n      endKnot = knots.length - 1 - startKnot;\n\n      for (let i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i]);\n      }\n    }\n\n    const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n    const points = curve.getPoints(controlPoints.length * 12);\n    return new BufferGeometry().setFromPoints(points);\n  }\n\n} // parse animation data from FBXTree\n\n\nclass AnimationParser {\n  // take raw animation clips and turn them into three.js animation clips\n  parse() {\n    const animationClips = [];\n    const rawClips = this.parseClips();\n\n    if (rawClips !== undefined) {\n      for (const key in rawClips) {\n        const rawClip = rawClips[key];\n        const clip = this.addClip(rawClip);\n        animationClips.push(clip);\n      }\n    }\n\n    return animationClips;\n  }\n\n  parseClips() {\n    // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n    // if this is undefined we can safely assume there are no animations\n    if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n    const curveNodesMap = this.parseAnimationCurveNodes();\n    this.parseAnimationCurves(curveNodesMap);\n    const layersMap = this.parseAnimationLayers(curveNodesMap);\n    const rawClips = this.parseAnimStacks(layersMap);\n    return rawClips;\n  } // parse nodes in FBXTree.Objects.AnimationCurveNode\n  // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n  // and is referenced by an AnimationLayer\n\n\n  parseAnimationCurveNodes() {\n    const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n    const curveNodesMap = new Map();\n\n    for (const nodeID in rawCurveNodes) {\n      const rawCurveNode = rawCurveNodes[nodeID];\n\n      if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n        const curveNode = {\n          id: rawCurveNode.id,\n          attr: rawCurveNode.attrName,\n          curves: {}\n        };\n        curveNodesMap.set(curveNode.id, curveNode);\n      }\n    }\n\n    return curveNodesMap;\n  } // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n  // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n  // axis ( e.g. times and values of x rotation)\n\n\n  parseAnimationCurves(curveNodesMap) {\n    const rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n    // e.g. position times: [0, 0.4, 0. 8]\n    // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n    // clearly, this should be optimised to\n    // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n    // this shows up in nearly every FBX file, and generally time array is length > 100\n\n    for (const nodeID in rawCurves) {\n      const animationCurve = {\n        id: rawCurves[nodeID].id,\n        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n        values: rawCurves[nodeID].KeyValueFloat.a\n      };\n      const relationships = connections.get(animationCurve.id);\n\n      if (relationships !== undefined) {\n        const animationCurveID = relationships.parents[0].ID;\n        const animationCurveRelationship = relationships.parents[0].relationship;\n\n        if (animationCurveRelationship.match(/X/)) {\n          curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Y/)) {\n          curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Z/)) {\n          curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n          curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n        }\n      }\n    }\n  } // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n  // to various AnimationCurveNodes and is referenced by an AnimationStack node\n  // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\n\n  parseAnimationLayers(curveNodesMap) {\n    const rawLayers = fbxTree.Objects.AnimationLayer;\n    const layersMap = new Map();\n\n    for (const nodeID in rawLayers) {\n      const layerCurveNodes = [];\n      const connection = connections.get(parseInt(nodeID));\n\n      if (connection !== undefined) {\n        // all the animationCurveNodes used in the layer\n        const children = connection.children;\n        children.forEach(function (child, i) {\n          if (curveNodesMap.has(child.ID)) {\n            const curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n            if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const modelID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n\n                if (modelID !== undefined) {\n                  const rawModel = fbxTree.Objects.Model[modelID.toString()];\n\n                  if (rawModel === undefined) {\n                    console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                    return;\n                  }\n\n                  const node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                    ID: rawModel.id,\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1]\n                  };\n                  sceneGraph.traverse(function (child) {\n                    if (child.ID === rawModel.id) {\n                      node.transform = child.matrix;\n                      if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                    }\n                  });\n                  if (!node.transform) node.transform = new Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                  // animation value as well\n\n                  if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                  if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                  layerCurveNodes[i] = node;\n                }\n              }\n\n              if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n            } else if (curveNode.curves.morph !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n                const morpherID = connections.get(deformerID).parents[0].ID;\n                const geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                const modelID = connections.get(geoID).parents[0].ID;\n                const rawModel = fbxTree.Objects.Model[modelID];\n                const node = {\n                  modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                  morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                };\n                layerCurveNodes[i] = node;\n              }\n\n              layerCurveNodes[i][curveNode.attr] = curveNode;\n            }\n          }\n        });\n        layersMap.set(parseInt(nodeID), layerCurveNodes);\n      }\n    }\n\n    return layersMap;\n  } // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n  // hierarchy. Each Stack node will be used to create a AnimationClip\n\n\n  parseAnimStacks(layersMap) {\n    const rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n    const rawClips = {};\n\n    for (const nodeID in rawStacks) {\n      const children = connections.get(parseInt(nodeID)).children;\n\n      if (children.length > 1) {\n        // it seems like stacks will always be associated with a single layer. But just in case there are files\n        // where there are multiple layers per stack, we'll display a warning\n        console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n      }\n\n      const layer = layersMap.get(children[0].ID);\n      rawClips[nodeID] = {\n        name: rawStacks[nodeID].attrName,\n        layer: layer\n      };\n    }\n\n    return rawClips;\n  }\n\n  addClip(rawClip) {\n    let tracks = [];\n    const scope = this;\n    rawClip.layer.forEach(function (rawTracks) {\n      tracks = tracks.concat(scope.generateTracks(rawTracks));\n    });\n    return new AnimationClip(rawClip.name, -1, tracks);\n  }\n\n  generateTracks(rawTracks) {\n    const tracks = [];\n    let initialPosition = new Vector3();\n    let initialRotation = new Quaternion();\n    let initialScale = new Vector3();\n    if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n    initialPosition = initialPosition.toArray();\n    initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n    initialScale = initialScale.toArray();\n\n    if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n      const positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n      if (positionTrack !== undefined) tracks.push(positionTrack);\n    }\n\n    if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n      const rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n      if (rotationTrack !== undefined) tracks.push(rotationTrack);\n    }\n\n    if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n      const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n      if (scaleTrack !== undefined) tracks.push(scaleTrack);\n    }\n\n    if (rawTracks.DeformPercent !== undefined) {\n      const morphTrack = this.generateMorphTrack(rawTracks);\n      if (morphTrack !== undefined) tracks.push(morphTrack);\n    }\n\n    return tracks;\n  }\n\n  generateVectorTrack(modelName, curves, initialValue, type) {\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    return new VectorKeyframeTrack(modelName + '.' + type, times, values);\n  }\n\n  generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n    if (curves.x !== undefined) {\n      this.interpolateRotations(curves.x);\n      curves.x.values = curves.x.values.map(MathUtils.degToRad);\n    }\n\n    if (curves.y !== undefined) {\n      this.interpolateRotations(curves.y);\n      curves.y.values = curves.y.values.map(MathUtils.degToRad);\n    }\n\n    if (curves.z !== undefined) {\n      this.interpolateRotations(curves.z);\n      curves.z.values = curves.z.values.map(MathUtils.degToRad);\n    }\n\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n\n    if (preRotation !== undefined) {\n      preRotation = preRotation.map(MathUtils.degToRad);\n      preRotation.push(eulerOrder);\n      preRotation = new Euler().fromArray(preRotation);\n      preRotation = new Quaternion().setFromEuler(preRotation);\n    }\n\n    if (postRotation !== undefined) {\n      postRotation = postRotation.map(MathUtils.degToRad);\n      postRotation.push(eulerOrder);\n      postRotation = new Euler().fromArray(postRotation);\n      postRotation = new Quaternion().setFromEuler(postRotation).invert();\n    }\n\n    const quaternion = new Quaternion();\n    const euler = new Euler();\n    const quaternionValues = [];\n\n    for (let i = 0; i < values.length; i += 3) {\n      euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n      quaternion.setFromEuler(euler);\n      if (preRotation !== undefined) quaternion.premultiply(preRotation);\n      if (postRotation !== undefined) quaternion.multiply(postRotation);\n      quaternion.toArray(quaternionValues, i / 3 * 4);\n    }\n\n    return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n  }\n\n  generateMorphTrack(rawTracks) {\n    const curves = rawTracks.DeformPercent.curves.morph;\n    const values = curves.values.map(function (val) {\n      return val / 100;\n    });\n    const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n    return new NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n  } // For all animated objects, times are defined separately for each axis\n  // Here we'll combine the times into one sorted array without duplicates\n\n\n  getTimesForAllAxes(curves) {\n    let times = []; // first join together the times for each axis, if defined\n\n    if (curves.x !== undefined) times = times.concat(curves.x.times);\n    if (curves.y !== undefined) times = times.concat(curves.y.times);\n    if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them\n\n    times = times.sort(function (a, b) {\n      return a - b;\n    }); // and remove duplicates\n\n    if (times.length > 1) {\n      let targetIndex = 1;\n      let lastValue = times[0];\n\n      for (let i = 1; i < times.length; i++) {\n        const currentValue = times[i];\n\n        if (currentValue !== lastValue) {\n          times[targetIndex] = currentValue;\n          lastValue = currentValue;\n          targetIndex++;\n        }\n      }\n\n      times = times.slice(0, targetIndex);\n    }\n\n    return times;\n  }\n\n  getKeyframeTrackValues(times, curves, initialValue) {\n    const prevValue = initialValue;\n    const values = [];\n    let xIndex = -1;\n    let yIndex = -1;\n    let zIndex = -1;\n    times.forEach(function (time) {\n      if (curves.x) xIndex = curves.x.times.indexOf(time);\n      if (curves.y) yIndex = curves.y.times.indexOf(time);\n      if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n      if (xIndex !== -1) {\n        const xValue = curves.x.values[xIndex];\n        values.push(xValue);\n        prevValue[0] = xValue;\n      } else {\n        // otherwise use the x value from the previous frame\n        values.push(prevValue[0]);\n      }\n\n      if (yIndex !== -1) {\n        const yValue = curves.y.values[yIndex];\n        values.push(yValue);\n        prevValue[1] = yValue;\n      } else {\n        values.push(prevValue[1]);\n      }\n\n      if (zIndex !== -1) {\n        const zValue = curves.z.values[zIndex];\n        values.push(zValue);\n        prevValue[2] = zValue;\n      } else {\n        values.push(prevValue[2]);\n      }\n    });\n    return values;\n  } // Rotations are defined as Euler angles which can have values  of any size\n  // These will be converted to quaternions which don't support values greater than\n  // PI, so we'll interpolate large rotations\n\n\n  interpolateRotations(curve) {\n    for (let i = 1; i < curve.values.length; i++) {\n      const initialValue = curve.values[i - 1];\n      const valuesSpan = curve.values[i] - initialValue;\n      const absoluteSpan = Math.abs(valuesSpan);\n\n      if (absoluteSpan >= 180) {\n        const numSubIntervals = absoluteSpan / 180;\n        const step = valuesSpan / numSubIntervals;\n        let nextValue = initialValue + step;\n        const initialTime = curve.times[i - 1];\n        const timeSpan = curve.times[i] - initialTime;\n        const interval = timeSpan / numSubIntervals;\n        let nextTime = initialTime + interval;\n        const interpolatedTimes = [];\n        const interpolatedValues = [];\n\n        while (nextTime < curve.times[i]) {\n          interpolatedTimes.push(nextTime);\n          nextTime += interval;\n          interpolatedValues.push(nextValue);\n          nextValue += step;\n        }\n\n        curve.times = inject(curve.times, i, interpolatedTimes);\n        curve.values = inject(curve.values, i, interpolatedValues);\n      }\n    }\n  }\n\n} // parse an FBX file in ASCII format\n\n\nclass TextParser {\n  getPrevNode() {\n    return this.nodeStack[this.currentIndent - 2];\n  }\n\n  getCurrentNode() {\n    return this.nodeStack[this.currentIndent - 1];\n  }\n\n  getCurrentProp() {\n    return this.currentProp;\n  }\n\n  pushStack(node) {\n    this.nodeStack.push(node);\n    this.currentIndent += 1;\n  }\n\n  popStack() {\n    this.nodeStack.pop();\n    this.currentIndent -= 1;\n  }\n\n  setCurrentProp(val, name) {\n    this.currentProp = val;\n    this.currentPropName = name;\n  }\n\n  parse(text) {\n    this.currentIndent = 0;\n    this.allNodes = new FBXTree();\n    this.nodeStack = [];\n    this.currentProp = [];\n    this.currentPropName = '';\n    const scope = this;\n    const split = text.split(/[\\r\\n]+/);\n    split.forEach(function (line, i) {\n      const matchComment = line.match(/^[\\s\\t]*;/);\n      const matchEmpty = line.match(/^[\\s\\t]*$/);\n      if (matchComment || matchEmpty) return;\n      const matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n      const matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n      const matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n\n      if (matchBeginning) {\n        scope.parseNodeBegin(line, matchBeginning);\n      } else if (matchProperty) {\n        scope.parseNodeProperty(line, matchProperty, split[++i]);\n      } else if (matchEnd) {\n        scope.popStack();\n      } else if (line.match(/^[^\\s\\t}]/)) {\n        // large arrays are split over multiple lines terminated with a ',' character\n        // if this is encountered the line needs to be joined to the previous line\n        scope.parseNodePropertyContinued(line);\n      }\n    });\n    return this.allNodes;\n  }\n\n  parseNodeBegin(line, property) {\n    const nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n    const nodeAttrs = property[2].split(',').map(function (attr) {\n      return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n    });\n    const node = {\n      name: nodeName\n    };\n    const attrs = this.parseNodeAttr(nodeAttrs);\n    const currentNode = this.getCurrentNode(); // a top node\n\n    if (this.currentIndent === 0) {\n      this.allNodes.add(nodeName, node);\n    } else {\n      // a subnode\n      // if the subnode already exists, append it\n      if (nodeName in currentNode) {\n        // special case Pose needs PoseNodes as an array\n        if (nodeName === 'PoseNode') {\n          currentNode.PoseNode.push(node);\n        } else if (currentNode[nodeName].id !== undefined) {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n        }\n\n        if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n      } else if (typeof attrs.id === 'number') {\n        currentNode[nodeName] = {};\n        currentNode[nodeName][attrs.id] = node;\n      } else if (nodeName !== 'Properties70') {\n        if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n      }\n    }\n\n    if (typeof attrs.id === 'number') node.id = attrs.id;\n    if (attrs.name !== '') node.attrName = attrs.name;\n    if (attrs.type !== '') node.attrType = attrs.type;\n    this.pushStack(node);\n  }\n\n  parseNodeAttr(attrs) {\n    let id = attrs[0];\n\n    if (attrs[0] !== '') {\n      id = parseInt(attrs[0]);\n\n      if (isNaN(id)) {\n        id = attrs[0];\n      }\n    }\n\n    let name = '',\n        type = '';\n\n    if (attrs.length > 1) {\n      name = attrs[1].replace(/^(\\w+)::/, '');\n      type = attrs[2];\n    }\n\n    return {\n      id: id,\n      name: name,\n      type: type\n    };\n  }\n\n  parseNodeProperty(line, property, contentLine) {\n    let propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n    let propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n    //\tContent: ,\n    //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n    if (propName === 'Content' && propValue === ',') {\n      propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n    }\n\n    const currentNode = this.getCurrentNode();\n    const parentName = currentNode.name;\n\n    if (parentName === 'Properties70') {\n      this.parseNodeSpecialProperty(line, propName, propValue);\n      return;\n    } // Connections\n\n\n    if (propName === 'C') {\n      const connProps = propValue.split(',').slice(1);\n      const from = parseInt(connProps[0]);\n      const to = parseInt(connProps[1]);\n      let rest = propValue.split(',').slice(3);\n      rest = rest.map(function (elem) {\n        return elem.trim().replace(/^\"/, '');\n      });\n      propName = 'connections';\n      propValue = [from, to];\n      append(propValue, rest);\n\n      if (currentNode[propName] === undefined) {\n        currentNode[propName] = [];\n      }\n    } // Node\n\n\n    if (propName === 'Node') currentNode.id = propValue; // connections\n\n    if (propName in currentNode && Array.isArray(currentNode[propName])) {\n      currentNode[propName].push(propValue);\n    } else {\n      if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n    }\n\n    this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n    if (propName === 'a' && propValue.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(propValue);\n    }\n  }\n\n  parseNodePropertyContinued(line) {\n    const currentNode = this.getCurrentNode();\n    currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n    // so convert the string to an array\n\n    if (line.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(currentNode.a);\n    }\n  } // parse \"Property70\"\n\n\n  parseNodeSpecialProperty(line, propName, propValue) {\n    // split this\n    // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n    // into array like below\n    // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n    const props = propValue.split('\",').map(function (prop) {\n      return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n    });\n    const innerPropName = props[0];\n    const innerPropType1 = props[1];\n    const innerPropType2 = props[2];\n    const innerPropFlag = props[3];\n    let innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n    switch (innerPropType1) {\n      case 'int':\n      case 'enum':\n      case 'bool':\n      case 'ULongLong':\n      case 'double':\n      case 'Number':\n      case 'FieldOfView':\n        innerPropValue = parseFloat(innerPropValue);\n        break;\n\n      case 'Color':\n      case 'ColorRGB':\n      case 'Vector3D':\n      case 'Lcl_Translation':\n      case 'Lcl_Rotation':\n      case 'Lcl_Scaling':\n        innerPropValue = parseNumberArray(innerPropValue);\n        break;\n    } // CAUTION: these props must append to parent's parent\n\n\n    this.getPrevNode()[innerPropName] = {\n      type: innerPropType1,\n      type2: innerPropType2,\n      flag: innerPropFlag,\n      value: innerPropValue\n    };\n    this.setCurrentProp(this.getPrevNode(), innerPropName);\n  }\n\n} // Parse an FBX file in Binary format\n\n\nclass BinaryParser {\n  parse(buffer) {\n    const reader = new BinaryReader(buffer);\n    reader.skip(23); // skip magic 23 bytes\n\n    const version = reader.getUint32();\n\n    if (version < 6400) {\n      throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n    }\n\n    const allNodes = new FBXTree();\n\n    while (!this.endOfContent(reader)) {\n      const node = this.parseNode(reader, version);\n      if (node !== null) allNodes.add(node.name, node);\n    }\n\n    return allNodes;\n  } // Check if reader has reached the end of content.\n\n\n  endOfContent(reader) {\n    // footer size: 160bytes + 16-byte alignment padding\n    // - 16bytes: magic\n    // - padding til 16-byte alignment (at least 1byte?)\n    //\t(seems like some exporters embed fixed 15 or 16bytes?)\n    // - 4bytes: magic\n    // - 4bytes: version\n    // - 120bytes: zero\n    // - 16bytes: magic\n    if (reader.size() % 16 === 0) {\n      return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n    } else {\n      return reader.getOffset() + 160 + 16 >= reader.size();\n    }\n  } // recursively parse nodes until the end of the file is reached\n\n\n  parseNode(reader, version) {\n    const node = {}; // The first three data sizes depends on version.\n\n    const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n    const nameLen = reader.getUint8();\n    const name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n    if (endOffset === 0) return null;\n    const propertyList = [];\n\n    for (let i = 0; i < numProperties; i++) {\n      propertyList.push(this.parseProperty(reader));\n    } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n\n    const id = propertyList.length > 0 ? propertyList[0] : '';\n    const attrName = propertyList.length > 1 ? propertyList[1] : '';\n    const attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n    // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n    node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n\n    while (endOffset > reader.getOffset()) {\n      const subNode = this.parseNode(reader, version);\n      if (subNode !== null) this.parseSubNode(name, node, subNode);\n    }\n\n    node.propertyList = propertyList; // raw property list used by parent\n\n    if (typeof id === 'number') node.id = id;\n    if (attrName !== '') node.attrName = attrName;\n    if (attrType !== '') node.attrType = attrType;\n    if (name !== '') node.name = name;\n    return node;\n  }\n\n  parseSubNode(name, node, subNode) {\n    // special case: child node is single property\n    if (subNode.singleProperty === true) {\n      const value = subNode.propertyList[0];\n\n      if (Array.isArray(value)) {\n        node[subNode.name] = subNode;\n        subNode.a = value;\n      } else {\n        node[subNode.name] = value;\n      }\n    } else if (name === 'Connections' && subNode.name === 'C') {\n      const array = [];\n      subNode.propertyList.forEach(function (property, i) {\n        // first Connection is FBX type (OO, OP, etc.). We'll discard these\n        if (i !== 0) array.push(property);\n      });\n\n      if (node.connections === undefined) {\n        node.connections = [];\n      }\n\n      node.connections.push(array);\n    } else if (subNode.name === 'Properties70') {\n      const keys = Object.keys(subNode);\n      keys.forEach(function (key) {\n        node[key] = subNode[key];\n      });\n    } else if (name === 'Properties70' && subNode.name === 'P') {\n      let innerPropName = subNode.propertyList[0];\n      let innerPropType1 = subNode.propertyList[1];\n      const innerPropType2 = subNode.propertyList[2];\n      const innerPropFlag = subNode.propertyList[3];\n      let innerPropValue;\n      if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n      if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n\n      if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n        innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n      } else {\n        innerPropValue = subNode.propertyList[4];\n      } // this will be copied to parent, see above\n\n\n      node[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n    } else if (node[subNode.name] === undefined) {\n      if (typeof subNode.id === 'number') {\n        node[subNode.name] = {};\n        node[subNode.name][subNode.id] = subNode;\n      } else {\n        node[subNode.name] = subNode;\n      }\n    } else {\n      if (subNode.name === 'PoseNode') {\n        if (!Array.isArray(node[subNode.name])) {\n          node[subNode.name] = [node[subNode.name]];\n        }\n\n        node[subNode.name].push(subNode);\n      } else if (node[subNode.name][subNode.id] === undefined) {\n        node[subNode.name][subNode.id] = subNode;\n      }\n    }\n  }\n\n  parseProperty(reader) {\n    const type = reader.getString(1);\n    let length;\n\n    switch (type) {\n      case 'C':\n        return reader.getBoolean();\n\n      case 'D':\n        return reader.getFloat64();\n\n      case 'F':\n        return reader.getFloat32();\n\n      case 'I':\n        return reader.getInt32();\n\n      case 'L':\n        return reader.getInt64();\n\n      case 'R':\n        length = reader.getUint32();\n        return reader.getArrayBuffer(length);\n\n      case 'S':\n        length = reader.getUint32();\n        return reader.getString(length);\n\n      case 'Y':\n        return reader.getInt16();\n\n      case 'b':\n      case 'c':\n      case 'd':\n      case 'f':\n      case 'i':\n      case 'l':\n        const arrayLength = reader.getUint32();\n        const encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n        const compressedLength = reader.getUint32();\n\n        if (encoding === 0) {\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader.getBooleanArray(arrayLength);\n\n            case 'd':\n              return reader.getFloat64Array(arrayLength);\n\n            case 'f':\n              return reader.getFloat32Array(arrayLength);\n\n            case 'i':\n              return reader.getInt32Array(arrayLength);\n\n            case 'l':\n              return reader.getInt64Array(arrayLength);\n          }\n        }\n\n        const data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n        const reader2 = new BinaryReader(data.buffer);\n\n        switch (type) {\n          case 'b':\n          case 'c':\n            return reader2.getBooleanArray(arrayLength);\n\n          case 'd':\n            return reader2.getFloat64Array(arrayLength);\n\n          case 'f':\n            return reader2.getFloat32Array(arrayLength);\n\n          case 'i':\n            return reader2.getInt32Array(arrayLength);\n\n          case 'l':\n            return reader2.getInt64Array(arrayLength);\n        }\n\n      default:\n        throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n    }\n  }\n\n}\n\nclass BinaryReader {\n  constructor(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n\n  getOffset() {\n    return this.offset;\n  }\n\n  size() {\n    return this.dv.buffer.byteLength;\n  }\n\n  skip(length) {\n    this.offset += length;\n  } // seems like true/false representation depends on exporter.\n  // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n  // then sees LSB.\n\n\n  getBoolean() {\n    return (this.getUint8() & 1) === 1;\n  }\n\n  getBooleanArray(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getBoolean());\n    }\n\n    return a;\n  }\n\n  getUint8() {\n    const value = this.dv.getUint8(this.offset);\n    this.offset += 1;\n    return value;\n  }\n\n  getInt16() {\n    const value = this.dv.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  getInt32() {\n    const value = this.dv.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  getInt32Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt32());\n    }\n\n    return a;\n  }\n\n  getUint32() {\n    const value = this.dv.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  } // JavaScript doesn't support 64-bit integer so calculate this here\n  // 1 << 32 will return 1 so using multiply operation instead here.\n  // There's a possibility that this method returns wrong value if the value\n  // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n  // TODO: safely handle 64-bit integer\n\n\n  getInt64() {\n    let low, high;\n\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    } // calculate negative value\n\n\n    if (high & 0x80000000) {\n      high = ~high & 0xffffffff;\n      low = ~low & 0xffffffff;\n      if (low === 0xffffffff) high = high + 1 & 0xffffffff;\n      low = low + 1 & 0xffffffff;\n      return -(high * 0x100000000 + low);\n    }\n\n    return high * 0x100000000 + low;\n  }\n\n  getInt64Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt64());\n    }\n\n    return a;\n  } // Note: see getInt64() comment\n\n\n  getUint64() {\n    let low, high;\n\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n\n    return high * 0x100000000 + low;\n  }\n\n  getFloat32() {\n    const value = this.dv.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  getFloat32Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat32());\n    }\n\n    return a;\n  }\n\n  getFloat64() {\n    const value = this.dv.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n\n  getFloat64Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat64());\n    }\n\n    return a;\n  }\n\n  getArrayBuffer(size) {\n    const value = this.dv.buffer.slice(this.offset, this.offset + size);\n    this.offset += size;\n    return value;\n  }\n\n  getString(size) {\n    // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n    let a = [];\n\n    for (let i = 0; i < size; i++) {\n      a[i] = this.getUint8();\n    }\n\n    const nullByte = a.indexOf(0);\n    if (nullByte >= 0) a = a.slice(0, nullByte);\n    return LoaderUtils.decodeText(new Uint8Array(a));\n  }\n\n} // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\n\n\nclass FBXTree {\n  add(key, val) {\n    this[key] = val;\n  }\n\n} // ************** UTILITY FUNCTIONS **************\n\n\nfunction isFbxFormatBinary(buffer) {\n  const CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\n\nfunction isFbxFormatASCII(text) {\n  const CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n  let cursor = 0;\n\n  function read(offset) {\n    const result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n\n  for (let i = 0; i < CORRECT.length; ++i) {\n    const num = read(1);\n\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getFbxVersion(text) {\n  const versionRegExp = /FBXVersion: (\\d+)/;\n  const match = text.match(versionRegExp);\n\n  if (match) {\n    const version = parseInt(match[1]);\n    return version;\n  }\n\n  throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n} // Converts FBX ticks into real time seconds.\n\n\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158000;\n}\n\nconst dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  let index;\n\n  switch (infoObject.mappingType) {\n    case 'ByPolygonVertex':\n      index = polygonVertexIndex;\n      break;\n\n    case 'ByPolygon':\n      index = polygonIndex;\n      break;\n\n    case 'ByVertice':\n      index = vertexIndex;\n      break;\n\n    case 'AllSame':\n      index = infoObject.indices[0];\n      break;\n\n    default:\n      console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n  }\n\n  if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n  const from = index * infoObject.dataSize;\n  const to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\n\nconst tempEuler = new Euler();\nconst tempVec = new Vector3(); // generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\nfunction generateTransform(transformData) {\n  const lTranslationM = new Matrix4();\n  const lPreRotationM = new Matrix4();\n  const lRotationM = new Matrix4();\n  const lPostRotationM = new Matrix4();\n  const lScalingM = new Matrix4();\n  const lScalingPivotM = new Matrix4();\n  const lScalingOffsetM = new Matrix4();\n  const lRotationOffsetM = new Matrix4();\n  const lRotationPivotM = new Matrix4();\n  const lParentGX = new Matrix4();\n  const lParentLX = new Matrix4();\n  const lGlobalT = new Matrix4();\n  const inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n\n  if (transformData.preRotation) {\n    const array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n\n  if (transformData.rotation) {\n    const array = transformData.rotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n\n  if (transformData.postRotation) {\n    const array = transformData.postRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    lPostRotationM.invert();\n  }\n\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\n\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\n\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n\n  const lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM); // Global Rotation\n\n  const lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX); // Global Shear*Scaling\n\n  const lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  const lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  const lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  const lLSM = lScalingM;\n  const lGlobalRS = new Matrix4();\n\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    const lParentLSM_inv = lParentLSM.clone().invert();\n    const lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n\n  const lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  const lScalingPivotM_inv = lScalingPivotM.clone().invert(); // Calculate the local transform matrix\n\n  let lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  const lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS); // from global to local\n\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n} // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\n\nfunction getEulerOrder(order) {\n  order = order || 0;\n  const enums = ['ZYX', // -> XYZ extrinsic\n  'YZX', // -> XZY extrinsic\n  'XZY', // -> YZX extrinsic\n  'ZXY', // -> YXZ extrinsic\n  'YXZ', // -> ZXY extrinsic\n  'XYZ' // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n\n  if (order === 6) {\n    console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n    return enums[0];\n  }\n\n  return enums[order];\n} // Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\n\n\nfunction parseNumberArray(value) {\n  const array = value.split(',').map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\n\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === undefined) from = 0;\n  if (to === undefined) to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\n\nfunction append(a, b) {\n  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\n\nfunction slice(a, b, from, to) {\n  for (let i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n\n  return a;\n} // inject array a2 into array a1 at index\n\n\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\n\nexport { FBXLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}