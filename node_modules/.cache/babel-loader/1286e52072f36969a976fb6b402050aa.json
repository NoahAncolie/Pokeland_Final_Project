{"ast":null,"code":"import { Vector3 } from 'three';\nexport class SeparatingAxisBounds {\n  constructor() {\n    this.min = Infinity;\n    this.max = -Infinity;\n  }\n\n  setFromPointsField(points, field) {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let i = 0, l = points.length; i < l; i++) {\n      const p = points[i];\n      const val = p[field];\n      min = val < min ? val : min;\n      max = val > max ? val : max;\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  setFromPoints(axis, points) {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let i = 0, l = points.length; i < l; i++) {\n      const p = points[i];\n      const val = axis.dot(p);\n      min = val < min ? val : min;\n      max = val > max ? val : max;\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  isSeparated(other) {\n    return this.min > other.max || other.min > this.max;\n  }\n\n}\n\nSeparatingAxisBounds.prototype.setFromBox = function () {\n  const p = new Vector3();\n  return function setFromBox(axis, box) {\n    const boxMin = box.min;\n    const boxMax = box.max;\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let x = 0; x <= 1; x++) {\n      for (let y = 0; y <= 1; y++) {\n        for (let z = 0; z <= 1; z++) {\n          p.x = boxMin.x * x + boxMax.x * (1 - x);\n          p.y = boxMin.y * y + boxMax.y * (1 - y);\n          p.z = boxMin.z * z + boxMax.z * (1 - z);\n          const val = axis.dot(p);\n          min = Math.min(val, min);\n          max = Math.max(val, max);\n        }\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  };\n}();\n\nexport const areIntersecting = function () {\n  const cacheSatBounds = new SeparatingAxisBounds();\n  return function areIntersecting(shape1, shape2) {\n    const points1 = shape1.points;\n    const satAxes1 = shape1.satAxes;\n    const satBounds1 = shape1.satBounds;\n    const points2 = shape2.points;\n    const satAxes2 = shape2.satAxes;\n    const satBounds2 = shape2.satBounds; // check axes of the first shape\n\n    for (let i = 0; i < 3; i++) {\n      const sb = satBounds1[i];\n      const sa = satAxes1[i];\n      cacheSatBounds.setFromPoints(sa, points2);\n      if (sb.isSeparated(cacheSatBounds)) return false;\n    } // check axes of the second shape\n\n\n    for (let i = 0; i < 3; i++) {\n      const sb = satBounds2[i];\n      const sa = satAxes2[i];\n      cacheSatBounds.setFromPoints(sa, points1);\n      if (sb.isSeparated(cacheSatBounds)) return false;\n    }\n  };\n}();","map":{"version":3,"names":["Vector3","SeparatingAxisBounds","constructor","min","Infinity","max","setFromPointsField","points","field","i","l","length","p","val","setFromPoints","axis","dot","isSeparated","other","prototype","setFromBox","box","boxMin","boxMax","x","y","z","Math","areIntersecting","cacheSatBounds","shape1","shape2","points1","satAxes1","satAxes","satBounds1","satBounds","points2","satAxes2","satBounds2","sb","sa"],"sources":["/home/odin/Desktop/THPâ˜ /Developpeur/Final_Project/pokeland/node_modules/three-mesh-bvh/src/math/SeparatingAxisBounds.js"],"sourcesContent":["import { Vector3 } from 'three';\r\n\r\nexport class SeparatingAxisBounds {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.min = Infinity;\r\n\t\tthis.max = - Infinity;\r\n\r\n\t}\r\n\r\n\tsetFromPointsField( points, field ) {\r\n\r\n\t\tlet min = Infinity;\r\n\t\tlet max = - Infinity;\r\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst p = points[ i ];\r\n\t\t\tconst val = p[ field ];\r\n\t\t\tmin = val < min ? val : min;\r\n\t\t\tmax = val > max ? val : max;\r\n\r\n\t\t}\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\t}\r\n\r\n\tsetFromPoints( axis, points ) {\r\n\r\n\t\tlet min = Infinity;\r\n\t\tlet max = - Infinity;\r\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst p = points[ i ];\r\n\t\t\tconst val = axis.dot( p );\r\n\t\t\tmin = val < min ? val : min;\r\n\t\t\tmax = val > max ? val : max;\r\n\r\n\t\t}\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\t}\r\n\r\n\tisSeparated( other ) {\r\n\r\n\t\treturn this.min > other.max || other.min > this.max;\r\n\r\n\t}\r\n\r\n}\r\n\r\nSeparatingAxisBounds.prototype.setFromBox = ( function () {\r\n\r\n\tconst p = new Vector3();\r\n\treturn function setFromBox( axis, box ) {\r\n\r\n\t\tconst boxMin = box.min;\r\n\t\tconst boxMax = box.max;\r\n\t\tlet min = Infinity;\r\n\t\tlet max = - Infinity;\r\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\r\n\r\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\r\n\r\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\r\n\r\n\t\t\t\t\tp.x = boxMin.x * x + boxMax.x * ( 1 - x );\r\n\t\t\t\t\tp.y = boxMin.y * y + boxMax.y * ( 1 - y );\r\n\t\t\t\t\tp.z = boxMin.z * z + boxMax.z * ( 1 - z );\r\n\r\n\t\t\t\t\tconst val = axis.dot( p );\r\n\t\t\t\t\tmin = Math.min( val, min );\r\n\t\t\t\t\tmax = Math.max( val, max );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nexport const areIntersecting = ( function () {\r\n\r\n\tconst cacheSatBounds = new SeparatingAxisBounds();\r\n\treturn function areIntersecting( shape1, shape2 ) {\r\n\r\n\t\tconst points1 = shape1.points;\r\n\t\tconst satAxes1 = shape1.satAxes;\r\n\t\tconst satBounds1 = shape1.satBounds;\r\n\r\n\t\tconst points2 = shape2.points;\r\n\t\tconst satAxes2 = shape2.satAxes;\r\n\t\tconst satBounds2 = shape2.satBounds;\r\n\r\n\t\t// check axes of the first shape\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds1[ i ];\r\n\t\t\tconst sa = satAxes1[ i ];\r\n\t\t\tcacheSatBounds.setFromPoints( sa, points2 );\r\n\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\t// check axes of the second shape\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds2[ i ];\r\n\t\t\tconst sa = satAxes2[ i ];\r\n\t\t\tcacheSatBounds.setFromPoints( sa, points1 );\r\n\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n} )();\r\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,OAAO,MAAMC,oBAAN,CAA2B;EAEjCC,WAAW,GAAG;IAEb,KAAKC,GAAL,GAAWC,QAAX;IACA,KAAKC,GAAL,GAAW,CAAED,QAAb;EAEA;;EAEDE,kBAAkB,CAAEC,MAAF,EAAUC,KAAV,EAAkB;IAEnC,IAAIL,GAAG,GAAGC,QAAV;IACA,IAAIC,GAAG,GAAG,CAAED,QAAZ;;IACA,KAAM,IAAIK,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGH,MAAM,CAACI,MAA5B,EAAoCF,CAAC,GAAGC,CAAxC,EAA2CD,CAAC,EAA5C,EAAkD;MAEjD,MAAMG,CAAC,GAAGL,MAAM,CAAEE,CAAF,CAAhB;MACA,MAAMI,GAAG,GAAGD,CAAC,CAAEJ,KAAF,CAAb;MACAL,GAAG,GAAGU,GAAG,GAAGV,GAAN,GAAYU,GAAZ,GAAkBV,GAAxB;MACAE,GAAG,GAAGQ,GAAG,GAAGR,GAAN,GAAYQ,GAAZ,GAAkBR,GAAxB;IAEA;;IAED,KAAKF,GAAL,GAAWA,GAAX;IACA,KAAKE,GAAL,GAAWA,GAAX;EAEA;;EAEDS,aAAa,CAAEC,IAAF,EAAQR,MAAR,EAAiB;IAE7B,IAAIJ,GAAG,GAAGC,QAAV;IACA,IAAIC,GAAG,GAAG,CAAED,QAAZ;;IACA,KAAM,IAAIK,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGH,MAAM,CAACI,MAA5B,EAAoCF,CAAC,GAAGC,CAAxC,EAA2CD,CAAC,EAA5C,EAAkD;MAEjD,MAAMG,CAAC,GAAGL,MAAM,CAAEE,CAAF,CAAhB;MACA,MAAMI,GAAG,GAAGE,IAAI,CAACC,GAAL,CAAUJ,CAAV,CAAZ;MACAT,GAAG,GAAGU,GAAG,GAAGV,GAAN,GAAYU,GAAZ,GAAkBV,GAAxB;MACAE,GAAG,GAAGQ,GAAG,GAAGR,GAAN,GAAYQ,GAAZ,GAAkBR,GAAxB;IAEA;;IAED,KAAKF,GAAL,GAAWA,GAAX;IACA,KAAKE,GAAL,GAAWA,GAAX;EAEA;;EAEDY,WAAW,CAAEC,KAAF,EAAU;IAEpB,OAAO,KAAKf,GAAL,GAAWe,KAAK,CAACb,GAAjB,IAAwBa,KAAK,CAACf,GAAN,GAAY,KAAKE,GAAhD;EAEA;;AAjDgC;;AAqDlCJ,oBAAoB,CAACkB,SAArB,CAA+BC,UAA/B,GAA8C,YAAY;EAEzD,MAAMR,CAAC,GAAG,IAAIZ,OAAJ,EAAV;EACA,OAAO,SAASoB,UAAT,CAAqBL,IAArB,EAA2BM,GAA3B,EAAiC;IAEvC,MAAMC,MAAM,GAAGD,GAAG,CAAClB,GAAnB;IACA,MAAMoB,MAAM,GAAGF,GAAG,CAAChB,GAAnB;IACA,IAAIF,GAAG,GAAGC,QAAV;IACA,IAAIC,GAAG,GAAG,CAAED,QAAZ;;IACA,KAAM,IAAIoB,CAAC,GAAG,CAAd,EAAiBA,CAAC,IAAI,CAAtB,EAAyBA,CAAC,EAA1B,EAAgC;MAE/B,KAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,IAAI,CAAtB,EAAyBA,CAAC,EAA1B,EAAgC;QAE/B,KAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,IAAI,CAAtB,EAAyBA,CAAC,EAA1B,EAAgC;UAE/Bd,CAAC,CAACY,CAAF,GAAMF,MAAM,CAACE,CAAP,GAAWA,CAAX,GAAeD,MAAM,CAACC,CAAP,IAAa,IAAIA,CAAjB,CAArB;UACAZ,CAAC,CAACa,CAAF,GAAMH,MAAM,CAACG,CAAP,GAAWA,CAAX,GAAeF,MAAM,CAACE,CAAP,IAAa,IAAIA,CAAjB,CAArB;UACAb,CAAC,CAACc,CAAF,GAAMJ,MAAM,CAACI,CAAP,GAAWA,CAAX,GAAeH,MAAM,CAACG,CAAP,IAAa,IAAIA,CAAjB,CAArB;UAEA,MAAMb,GAAG,GAAGE,IAAI,CAACC,GAAL,CAAUJ,CAAV,CAAZ;UACAT,GAAG,GAAGwB,IAAI,CAACxB,GAAL,CAAUU,GAAV,EAAeV,GAAf,CAAN;UACAE,GAAG,GAAGsB,IAAI,CAACtB,GAAL,CAAUQ,GAAV,EAAeR,GAAf,CAAN;QAEA;MAED;IAED;;IAED,KAAKF,GAAL,GAAWA,GAAX;IACA,KAAKE,GAAL,GAAWA,GAAX;EAEA,CA7BD;AA+BA,CAlC2C,EAA5C;;AAoCA,OAAO,MAAMuB,eAAe,GAAK,YAAY;EAE5C,MAAMC,cAAc,GAAG,IAAI5B,oBAAJ,EAAvB;EACA,OAAO,SAAS2B,eAAT,CAA0BE,MAA1B,EAAkCC,MAAlC,EAA2C;IAEjD,MAAMC,OAAO,GAAGF,MAAM,CAACvB,MAAvB;IACA,MAAM0B,QAAQ,GAAGH,MAAM,CAACI,OAAxB;IACA,MAAMC,UAAU,GAAGL,MAAM,CAACM,SAA1B;IAEA,MAAMC,OAAO,GAAGN,MAAM,CAACxB,MAAvB;IACA,MAAM+B,QAAQ,GAAGP,MAAM,CAACG,OAAxB;IACA,MAAMK,UAAU,GAAGR,MAAM,CAACK,SAA1B,CARiD,CAUjD;;IACA,KAAM,IAAI3B,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,CAArB,EAAwBA,CAAC,EAAzB,EAA+B;MAE9B,MAAM+B,EAAE,GAAGL,UAAU,CAAE1B,CAAF,CAArB;MACA,MAAMgC,EAAE,GAAGR,QAAQ,CAAExB,CAAF,CAAnB;MACAoB,cAAc,CAACf,aAAf,CAA8B2B,EAA9B,EAAkCJ,OAAlC;MACA,IAAKG,EAAE,CAACvB,WAAH,CAAgBY,cAAhB,CAAL,EAAwC,OAAO,KAAP;IAExC,CAlBgD,CAoBjD;;;IACA,KAAM,IAAIpB,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,CAArB,EAAwBA,CAAC,EAAzB,EAA+B;MAE9B,MAAM+B,EAAE,GAAGD,UAAU,CAAE9B,CAAF,CAArB;MACA,MAAMgC,EAAE,GAAGH,QAAQ,CAAE7B,CAAF,CAAnB;MACAoB,cAAc,CAACf,aAAf,CAA8B2B,EAA9B,EAAkCT,OAAlC;MACA,IAAKQ,EAAE,CAACvB,WAAH,CAAgBY,cAAhB,CAAL,EAAwC,OAAO,KAAP;IAExC;EAED,CA9BD;AAgCA,CAnC8B,EAAxB"},"metadata":{},"sourceType":"module"}