{"ast":null,"code":"import { QueryClient, QueryObserver, InfiniteQueryObserver, isCancelledError } from 'react-query';\nimport { atom } from 'jotai';\nconst queryClientAtom = atom(new QueryClient());\n\nfunction atomWithQuery(createQuery) {\n  let getQueryClient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : get => get(queryClientAtom);\n  const queryDataAtom = atom(get => {\n    const queryClient = getQueryClient(get);\n    const options = typeof createQuery === \"function\" ? createQuery(get) : createQuery;\n    let settlePromise = null;\n\n    const getInitialData = () => {\n      let data = queryClient.getQueryData(options.queryKey);\n\n      if (data === void 0 && options.initialData) {\n        data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n      }\n\n      return data;\n    };\n\n    const initialData = getInitialData();\n    const dataAtom = atom(initialData === void 0 && options.enabled !== false ? new Promise((resolve, reject) => {\n      settlePromise = (data, err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      };\n    }) : initialData);\n\n    let setData = () => {\n      throw new Error(\"atomWithQuery: setting data without mount\");\n    };\n\n    const listener = result => {\n      if (result.error) {\n        if (settlePromise) {\n          settlePromise(void 0, result.error);\n          settlePromise = null;\n        } else {\n          setData(Promise.reject(result.error));\n        }\n\n        return;\n      }\n\n      if (result.data === void 0) {\n        return;\n      }\n\n      if (settlePromise) {\n        settlePromise(result.data);\n        settlePromise = null;\n      } else {\n        setData(result.data);\n      }\n    };\n\n    const defaultedOptions = queryClient.defaultQueryObserverOptions(options);\n\n    if (initialData === void 0 && options.enabled !== false) {\n      if (typeof defaultedOptions.staleTime !== \"number\") {\n        defaultedOptions.staleTime = 1e3;\n      }\n    }\n\n    const observer = new QueryObserver(queryClient, defaultedOptions);\n\n    if (initialData === void 0 && options.enabled !== false) {\n      observer.fetchOptimistic(defaultedOptions).then(listener).catch(error => listener({\n        error\n      }));\n    }\n\n    dataAtom.onMount = update => {\n      setData = update;\n\n      if (options.enabled !== false) {\n        return observer.subscribe(listener);\n      }\n    };\n\n    return {\n      dataAtom,\n      observer\n    };\n  }, (get, set, action) => {\n    switch (action.type) {\n      case \"refetch\":\n        {\n          const {\n            dataAtom,\n            observer\n          } = get(queryDataAtom);\n          set(dataAtom, new Promise(() => {}));\n          const p = Promise.resolve().then(() => observer.refetch({\n            cancelRefetch: true\n          })).then(() => {});\n          return p;\n        }\n\n      default:\n        throw new Error(\"no action\");\n    }\n  });\n  const queryAtom = atom(get => {\n    const {\n      dataAtom\n    } = get(queryDataAtom);\n    return get(dataAtom);\n  }, (_get, set, action) => set(queryDataAtom, action));\n  return queryAtom;\n}\n\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nfunction atomWithInfiniteQuery(createQuery) {\n  let getQueryClient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : get => get(queryClientAtom);\n  const queryDataAtom = atom(get => {\n    const queryClient = getQueryClient(get);\n    const options = typeof createQuery === \"function\" ? createQuery(get) : createQuery;\n    let settlePromise = null;\n\n    const getInitialData = () => {\n      let data = queryClient.getQueryData(options.queryKey);\n\n      if (data === void 0 && options.initialData) {\n        data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n      }\n\n      return data;\n    };\n\n    const initialData = getInitialData();\n    const dataAtom = atom(initialData === void 0 && options.enabled !== false ? new Promise((resolve, reject) => {\n      settlePromise = (data, err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      };\n    }) : initialData);\n\n    let setData = () => {\n      throw new Error(\"atomWithInfiniteQuery: setting data without mount\");\n    };\n\n    const listener = result => {\n      if (result.error && !isCancelledError(result.error)) {\n        if (settlePromise) {\n          settlePromise(void 0, result.error);\n          settlePromise = null;\n        } else {\n          setData(Promise.reject(result.error));\n        }\n\n        return;\n      }\n\n      if (result.data === void 0) {\n        return;\n      }\n\n      if (settlePromise) {\n        settlePromise(result.data);\n        settlePromise = null;\n      } else {\n        setData(result.data);\n      }\n    };\n\n    const defaultedOptions = queryClient.defaultQueryObserverOptions(options);\n\n    if (initialData === void 0 && options.enabled !== false) {\n      if (typeof defaultedOptions.staleTime !== \"number\") {\n        defaultedOptions.staleTime = 1e3;\n      }\n    }\n\n    const observer = new InfiniteQueryObserver(queryClient, defaultedOptions);\n\n    if (initialData === void 0 && options.enabled !== false) {\n      observer.fetchOptimistic(defaultedOptions).then(listener).catch(error => listener({\n        error\n      }));\n    }\n\n    dataAtom.onMount = update => {\n      setData = update;\n\n      if (options.enabled !== false) {\n        return observer.subscribe(listener);\n      }\n    };\n\n    return {\n      dataAtom,\n      observer,\n      options\n    };\n  }, (get, _set, action) => {\n    const {\n      observer\n    } = get(queryDataAtom);\n\n    switch (action.type) {\n      case \"refetch\":\n        {\n          const _a = action,\n                options = __objRest(_a, [\"type\"]);\n\n          void observer.refetch(options);\n          break;\n        }\n\n      case \"fetchPreviousPage\":\n        {\n          void observer.fetchPreviousPage();\n          break;\n        }\n\n      case \"fetchNextPage\":\n        {\n          void observer.fetchNextPage();\n          break;\n        }\n    }\n  });\n  const queryAtom = atom(get => {\n    const {\n      dataAtom\n    } = get(queryDataAtom);\n    return get(dataAtom);\n  }, (_get, set, action) => set(queryDataAtom, action));\n  return queryAtom;\n}\n\nexport { atomWithInfiniteQuery, atomWithQuery, queryClientAtom };","map":{"version":3,"names":["QueryClient","QueryObserver","InfiniteQueryObserver","isCancelledError","atom","queryClientAtom","atomWithQuery","createQuery","getQueryClient","get","queryDataAtom","queryClient","options","settlePromise","getInitialData","data","getQueryData","queryKey","initialData","dataAtom","enabled","Promise","resolve","reject","err","setData","Error","listener","result","error","defaultedOptions","defaultQueryObserverOptions","staleTime","observer","fetchOptimistic","then","catch","onMount","update","subscribe","set","action","type","p","refetch","cancelRefetch","queryAtom","_get","__getOwnPropSymbols","Object","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__objRest","source","exclude","target","prop","call","indexOf","atomWithInfiniteQuery","_set","_a","fetchPreviousPage","fetchNextPage"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/jotai/esm/query.js"],"sourcesContent":["import { QueryClient, QueryObserver, InfiniteQueryObserver, isCancelledError } from 'react-query';\nimport { atom } from 'jotai';\n\nconst queryClientAtom = atom(new QueryClient());\n\nfunction atomWithQuery(createQuery, getQueryClient = (get) => get(queryClientAtom)) {\n  const queryDataAtom = atom((get) => {\n    const queryClient = getQueryClient(get);\n    const options = typeof createQuery === \"function\" ? createQuery(get) : createQuery;\n    let settlePromise = null;\n    const getInitialData = () => {\n      let data = queryClient.getQueryData(options.queryKey);\n      if (data === void 0 && options.initialData) {\n        data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n      }\n      return data;\n    };\n    const initialData = getInitialData();\n    const dataAtom = atom(initialData === void 0 && options.enabled !== false ? new Promise((resolve, reject) => {\n      settlePromise = (data, err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      };\n    }) : initialData);\n    let setData = () => {\n      throw new Error(\"atomWithQuery: setting data without mount\");\n    };\n    const listener = (result) => {\n      if (result.error) {\n        if (settlePromise) {\n          settlePromise(void 0, result.error);\n          settlePromise = null;\n        } else {\n          setData(Promise.reject(result.error));\n        }\n        return;\n      }\n      if (result.data === void 0) {\n        return;\n      }\n      if (settlePromise) {\n        settlePromise(result.data);\n        settlePromise = null;\n      } else {\n        setData(result.data);\n      }\n    };\n    const defaultedOptions = queryClient.defaultQueryObserverOptions(options);\n    if (initialData === void 0 && options.enabled !== false) {\n      if (typeof defaultedOptions.staleTime !== \"number\") {\n        defaultedOptions.staleTime = 1e3;\n      }\n    }\n    const observer = new QueryObserver(queryClient, defaultedOptions);\n    if (initialData === void 0 && options.enabled !== false) {\n      observer.fetchOptimistic(defaultedOptions).then(listener).catch((error) => listener({ error }));\n    }\n    dataAtom.onMount = (update) => {\n      setData = update;\n      if (options.enabled !== false) {\n        return observer.subscribe(listener);\n      }\n    };\n    return { dataAtom, observer };\n  }, (get, set, action) => {\n    switch (action.type) {\n      case \"refetch\": {\n        const { dataAtom, observer } = get(queryDataAtom);\n        set(dataAtom, new Promise(() => {\n        }));\n        const p = Promise.resolve().then(() => observer.refetch({ cancelRefetch: true })).then(() => {\n        });\n        return p;\n      }\n      default:\n        throw new Error(\"no action\");\n    }\n  });\n  const queryAtom = atom((get) => {\n    const { dataAtom } = get(queryDataAtom);\n    return get(dataAtom);\n  }, (_get, set, action) => set(queryDataAtom, action));\n  return queryAtom;\n}\n\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nfunction atomWithInfiniteQuery(createQuery, getQueryClient = (get) => get(queryClientAtom)) {\n  const queryDataAtom = atom((get) => {\n    const queryClient = getQueryClient(get);\n    const options = typeof createQuery === \"function\" ? createQuery(get) : createQuery;\n    let settlePromise = null;\n    const getInitialData = () => {\n      let data = queryClient.getQueryData(options.queryKey);\n      if (data === void 0 && options.initialData) {\n        data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n      }\n      return data;\n    };\n    const initialData = getInitialData();\n    const dataAtom = atom(initialData === void 0 && options.enabled !== false ? new Promise((resolve, reject) => {\n      settlePromise = (data, err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      };\n    }) : initialData);\n    let setData = () => {\n      throw new Error(\"atomWithInfiniteQuery: setting data without mount\");\n    };\n    const listener = (result) => {\n      if (result.error && !isCancelledError(result.error)) {\n        if (settlePromise) {\n          settlePromise(void 0, result.error);\n          settlePromise = null;\n        } else {\n          setData(Promise.reject(result.error));\n        }\n        return;\n      }\n      if (result.data === void 0) {\n        return;\n      }\n      if (settlePromise) {\n        settlePromise(result.data);\n        settlePromise = null;\n      } else {\n        setData(result.data);\n      }\n    };\n    const defaultedOptions = queryClient.defaultQueryObserverOptions(options);\n    if (initialData === void 0 && options.enabled !== false) {\n      if (typeof defaultedOptions.staleTime !== \"number\") {\n        defaultedOptions.staleTime = 1e3;\n      }\n    }\n    const observer = new InfiniteQueryObserver(queryClient, defaultedOptions);\n    if (initialData === void 0 && options.enabled !== false) {\n      observer.fetchOptimistic(defaultedOptions).then(listener).catch((error) => listener({ error }));\n    }\n    dataAtom.onMount = (update) => {\n      setData = update;\n      if (options.enabled !== false) {\n        return observer.subscribe(listener);\n      }\n    };\n    return { dataAtom, observer, options };\n  }, (get, _set, action) => {\n    const { observer } = get(queryDataAtom);\n    switch (action.type) {\n      case \"refetch\": {\n        const _a = action, options = __objRest(_a, [\"type\"]);\n        void observer.refetch(options);\n        break;\n      }\n      case \"fetchPreviousPage\": {\n        void observer.fetchPreviousPage();\n        break;\n      }\n      case \"fetchNextPage\": {\n        void observer.fetchNextPage();\n        break;\n      }\n    }\n  });\n  const queryAtom = atom((get) => {\n    const { dataAtom } = get(queryDataAtom);\n    return get(dataAtom);\n  }, (_get, set, action) => set(queryDataAtom, action));\n  return queryAtom;\n}\n\nexport { atomWithInfiniteQuery, atomWithQuery, queryClientAtom };\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,aAAtB,EAAqCC,qBAArC,EAA4DC,gBAA5D,QAAoF,aAApF;AACA,SAASC,IAAT,QAAqB,OAArB;AAEA,MAAMC,eAAe,GAAGD,IAAI,CAAC,IAAIJ,WAAJ,EAAD,CAA5B;;AAEA,SAASM,aAAT,CAAuBC,WAAvB,EAAoF;EAAA,IAAhDC,cAAgD,uEAA9BC,GAAD,IAASA,GAAG,CAACJ,eAAD,CAAmB;EAClF,MAAMK,aAAa,GAAGN,IAAI,CAAEK,GAAD,IAAS;IAClC,MAAME,WAAW,GAAGH,cAAc,CAACC,GAAD,CAAlC;IACA,MAAMG,OAAO,GAAG,OAAOL,WAAP,KAAuB,UAAvB,GAAoCA,WAAW,CAACE,GAAD,CAA/C,GAAuDF,WAAvE;IACA,IAAIM,aAAa,GAAG,IAApB;;IACA,MAAMC,cAAc,GAAG,MAAM;MAC3B,IAAIC,IAAI,GAAGJ,WAAW,CAACK,YAAZ,CAAyBJ,OAAO,CAACK,QAAjC,CAAX;;MACA,IAAIF,IAAI,KAAK,KAAK,CAAd,IAAmBH,OAAO,CAACM,WAA/B,EAA4C;QAC1CH,IAAI,GAAG,OAAOH,OAAO,CAACM,WAAf,KAA+B,UAA/B,GAA4CN,OAAO,CAACM,WAAR,EAA5C,GAAoEN,OAAO,CAACM,WAAnF;MACD;;MACD,OAAOH,IAAP;IACD,CAND;;IAOA,MAAMG,WAAW,GAAGJ,cAAc,EAAlC;IACA,MAAMK,QAAQ,GAAGf,IAAI,CAACc,WAAW,KAAK,KAAK,CAArB,IAA0BN,OAAO,CAACQ,OAAR,KAAoB,KAA9C,GAAsD,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MAC3GV,aAAa,GAAG,CAACE,IAAD,EAAOS,GAAP,KAAe;QAC7B,IAAIA,GAAJ,EAAS;UACPD,MAAM,CAACC,GAAD,CAAN;QACD,CAFD,MAEO;UACLF,OAAO,CAACP,IAAD,CAAP;QACD;MACF,CAND;IAOD,CAR2E,CAAtD,GAQjBG,WARgB,CAArB;;IASA,IAAIO,OAAO,GAAG,MAAM;MAClB,MAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;IACD,CAFD;;IAGA,MAAMC,QAAQ,GAAIC,MAAD,IAAY;MAC3B,IAAIA,MAAM,CAACC,KAAX,EAAkB;QAChB,IAAIhB,aAAJ,EAAmB;UACjBA,aAAa,CAAC,KAAK,CAAN,EAASe,MAAM,CAACC,KAAhB,CAAb;UACAhB,aAAa,GAAG,IAAhB;QACD,CAHD,MAGO;UACLY,OAAO,CAACJ,OAAO,CAACE,MAAR,CAAeK,MAAM,CAACC,KAAtB,CAAD,CAAP;QACD;;QACD;MACD;;MACD,IAAID,MAAM,CAACb,IAAP,KAAgB,KAAK,CAAzB,EAA4B;QAC1B;MACD;;MACD,IAAIF,aAAJ,EAAmB;QACjBA,aAAa,CAACe,MAAM,CAACb,IAAR,CAAb;QACAF,aAAa,GAAG,IAAhB;MACD,CAHD,MAGO;QACLY,OAAO,CAACG,MAAM,CAACb,IAAR,CAAP;MACD;IACF,CAnBD;;IAoBA,MAAMe,gBAAgB,GAAGnB,WAAW,CAACoB,2BAAZ,CAAwCnB,OAAxC,CAAzB;;IACA,IAAIM,WAAW,KAAK,KAAK,CAArB,IAA0BN,OAAO,CAACQ,OAAR,KAAoB,KAAlD,EAAyD;MACvD,IAAI,OAAOU,gBAAgB,CAACE,SAAxB,KAAsC,QAA1C,EAAoD;QAClDF,gBAAgB,CAACE,SAAjB,GAA6B,GAA7B;MACD;IACF;;IACD,MAAMC,QAAQ,GAAG,IAAIhC,aAAJ,CAAkBU,WAAlB,EAA+BmB,gBAA/B,CAAjB;;IACA,IAAIZ,WAAW,KAAK,KAAK,CAArB,IAA0BN,OAAO,CAACQ,OAAR,KAAoB,KAAlD,EAAyD;MACvDa,QAAQ,CAACC,eAAT,CAAyBJ,gBAAzB,EAA2CK,IAA3C,CAAgDR,QAAhD,EAA0DS,KAA1D,CAAiEP,KAAD,IAAWF,QAAQ,CAAC;QAAEE;MAAF,CAAD,CAAnF;IACD;;IACDV,QAAQ,CAACkB,OAAT,GAAoBC,MAAD,IAAY;MAC7Bb,OAAO,GAAGa,MAAV;;MACA,IAAI1B,OAAO,CAACQ,OAAR,KAAoB,KAAxB,EAA+B;QAC7B,OAAOa,QAAQ,CAACM,SAAT,CAAmBZ,QAAnB,CAAP;MACD;IACF,CALD;;IAMA,OAAO;MAAER,QAAF;MAAYc;IAAZ,CAAP;EACD,CA7DyB,EA6DvB,CAACxB,GAAD,EAAM+B,GAAN,EAAWC,MAAX,KAAsB;IACvB,QAAQA,MAAM,CAACC,IAAf;MACE,KAAK,SAAL;QAAgB;UACd,MAAM;YAAEvB,QAAF;YAAYc;UAAZ,IAAyBxB,GAAG,CAACC,aAAD,CAAlC;UACA8B,GAAG,CAACrB,QAAD,EAAW,IAAIE,OAAJ,CAAY,MAAM,CAC/B,CADa,CAAX,CAAH;UAEA,MAAMsB,CAAC,GAAGtB,OAAO,CAACC,OAAR,GAAkBa,IAAlB,CAAuB,MAAMF,QAAQ,CAACW,OAAT,CAAiB;YAAEC,aAAa,EAAE;UAAjB,CAAjB,CAA7B,EAAwEV,IAAxE,CAA6E,MAAM,CAC5F,CADS,CAAV;UAEA,OAAOQ,CAAP;QACD;;MACD;QACE,MAAM,IAAIjB,KAAJ,CAAU,WAAV,CAAN;IAVJ;EAYD,CA1EyB,CAA1B;EA2EA,MAAMoB,SAAS,GAAG1C,IAAI,CAAEK,GAAD,IAAS;IAC9B,MAAM;MAAEU;IAAF,IAAeV,GAAG,CAACC,aAAD,CAAxB;IACA,OAAOD,GAAG,CAACU,QAAD,CAAV;EACD,CAHqB,EAGnB,CAAC4B,IAAD,EAAOP,GAAP,EAAYC,MAAZ,KAAuBD,GAAG,CAAC9B,aAAD,EAAgB+B,MAAhB,CAHP,CAAtB;EAIA,OAAOK,SAAP;AACD;;AAED,IAAIE,mBAAmB,GAAGC,MAAM,CAACC,qBAAjC;AACA,IAAIC,YAAY,GAAGF,MAAM,CAACG,SAAP,CAAiBC,cAApC;AACA,IAAIC,YAAY,GAAGL,MAAM,CAACG,SAAP,CAAiBG,oBAApC;;AACA,IAAIC,SAAS,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;EACnC,IAAIC,MAAM,GAAG,EAAb;;EACA,KAAK,IAAIC,IAAT,IAAiBH,MAAjB,EACE,IAAIN,YAAY,CAACU,IAAb,CAAkBJ,MAAlB,EAA0BG,IAA1B,KAAmCF,OAAO,CAACI,OAAR,CAAgBF,IAAhB,IAAwB,CAA/D,EACED,MAAM,CAACC,IAAD,CAAN,GAAeH,MAAM,CAACG,IAAD,CAArB;;EACJ,IAAIH,MAAM,IAAI,IAAV,IAAkBT,mBAAtB,EACE,KAAK,IAAIY,IAAT,IAAiBZ,mBAAmB,CAACS,MAAD,CAApC,EAA8C;IAC5C,IAAIC,OAAO,CAACI,OAAR,CAAgBF,IAAhB,IAAwB,CAAxB,IAA6BN,YAAY,CAACO,IAAb,CAAkBJ,MAAlB,EAA0BG,IAA1B,CAAjC,EACED,MAAM,CAACC,IAAD,CAAN,GAAeH,MAAM,CAACG,IAAD,CAArB;EACH;EACH,OAAOD,MAAP;AACD,CAXD;;AAYA,SAASI,qBAAT,CAA+BxD,WAA/B,EAA4F;EAAA,IAAhDC,cAAgD,uEAA9BC,GAAD,IAASA,GAAG,CAACJ,eAAD,CAAmB;EAC1F,MAAMK,aAAa,GAAGN,IAAI,CAAEK,GAAD,IAAS;IAClC,MAAME,WAAW,GAAGH,cAAc,CAACC,GAAD,CAAlC;IACA,MAAMG,OAAO,GAAG,OAAOL,WAAP,KAAuB,UAAvB,GAAoCA,WAAW,CAACE,GAAD,CAA/C,GAAuDF,WAAvE;IACA,IAAIM,aAAa,GAAG,IAApB;;IACA,MAAMC,cAAc,GAAG,MAAM;MAC3B,IAAIC,IAAI,GAAGJ,WAAW,CAACK,YAAZ,CAAyBJ,OAAO,CAACK,QAAjC,CAAX;;MACA,IAAIF,IAAI,KAAK,KAAK,CAAd,IAAmBH,OAAO,CAACM,WAA/B,EAA4C;QAC1CH,IAAI,GAAG,OAAOH,OAAO,CAACM,WAAf,KAA+B,UAA/B,GAA4CN,OAAO,CAACM,WAAR,EAA5C,GAAoEN,OAAO,CAACM,WAAnF;MACD;;MACD,OAAOH,IAAP;IACD,CAND;;IAOA,MAAMG,WAAW,GAAGJ,cAAc,EAAlC;IACA,MAAMK,QAAQ,GAAGf,IAAI,CAACc,WAAW,KAAK,KAAK,CAArB,IAA0BN,OAAO,CAACQ,OAAR,KAAoB,KAA9C,GAAsD,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MAC3GV,aAAa,GAAG,CAACE,IAAD,EAAOS,GAAP,KAAe;QAC7B,IAAIA,GAAJ,EAAS;UACPD,MAAM,CAACC,GAAD,CAAN;QACD,CAFD,MAEO;UACLF,OAAO,CAACP,IAAD,CAAP;QACD;MACF,CAND;IAOD,CAR2E,CAAtD,GAQjBG,WARgB,CAArB;;IASA,IAAIO,OAAO,GAAG,MAAM;MAClB,MAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;IACD,CAFD;;IAGA,MAAMC,QAAQ,GAAIC,MAAD,IAAY;MAC3B,IAAIA,MAAM,CAACC,KAAP,IAAgB,CAAC1B,gBAAgB,CAACyB,MAAM,CAACC,KAAR,CAArC,EAAqD;QACnD,IAAIhB,aAAJ,EAAmB;UACjBA,aAAa,CAAC,KAAK,CAAN,EAASe,MAAM,CAACC,KAAhB,CAAb;UACAhB,aAAa,GAAG,IAAhB;QACD,CAHD,MAGO;UACLY,OAAO,CAACJ,OAAO,CAACE,MAAR,CAAeK,MAAM,CAACC,KAAtB,CAAD,CAAP;QACD;;QACD;MACD;;MACD,IAAID,MAAM,CAACb,IAAP,KAAgB,KAAK,CAAzB,EAA4B;QAC1B;MACD;;MACD,IAAIF,aAAJ,EAAmB;QACjBA,aAAa,CAACe,MAAM,CAACb,IAAR,CAAb;QACAF,aAAa,GAAG,IAAhB;MACD,CAHD,MAGO;QACLY,OAAO,CAACG,MAAM,CAACb,IAAR,CAAP;MACD;IACF,CAnBD;;IAoBA,MAAMe,gBAAgB,GAAGnB,WAAW,CAACoB,2BAAZ,CAAwCnB,OAAxC,CAAzB;;IACA,IAAIM,WAAW,KAAK,KAAK,CAArB,IAA0BN,OAAO,CAACQ,OAAR,KAAoB,KAAlD,EAAyD;MACvD,IAAI,OAAOU,gBAAgB,CAACE,SAAxB,KAAsC,QAA1C,EAAoD;QAClDF,gBAAgB,CAACE,SAAjB,GAA6B,GAA7B;MACD;IACF;;IACD,MAAMC,QAAQ,GAAG,IAAI/B,qBAAJ,CAA0BS,WAA1B,EAAuCmB,gBAAvC,CAAjB;;IACA,IAAIZ,WAAW,KAAK,KAAK,CAArB,IAA0BN,OAAO,CAACQ,OAAR,KAAoB,KAAlD,EAAyD;MACvDa,QAAQ,CAACC,eAAT,CAAyBJ,gBAAzB,EAA2CK,IAA3C,CAAgDR,QAAhD,EAA0DS,KAA1D,CAAiEP,KAAD,IAAWF,QAAQ,CAAC;QAAEE;MAAF,CAAD,CAAnF;IACD;;IACDV,QAAQ,CAACkB,OAAT,GAAoBC,MAAD,IAAY;MAC7Bb,OAAO,GAAGa,MAAV;;MACA,IAAI1B,OAAO,CAACQ,OAAR,KAAoB,KAAxB,EAA+B;QAC7B,OAAOa,QAAQ,CAACM,SAAT,CAAmBZ,QAAnB,CAAP;MACD;IACF,CALD;;IAMA,OAAO;MAAER,QAAF;MAAYc,QAAZ;MAAsBrB;IAAtB,CAAP;EACD,CA7DyB,EA6DvB,CAACH,GAAD,EAAMuD,IAAN,EAAYvB,MAAZ,KAAuB;IACxB,MAAM;MAAER;IAAF,IAAexB,GAAG,CAACC,aAAD,CAAxB;;IACA,QAAQ+B,MAAM,CAACC,IAAf;MACE,KAAK,SAAL;QAAgB;UACd,MAAMuB,EAAE,GAAGxB,MAAX;UAAA,MAAmB7B,OAAO,GAAG4C,SAAS,CAACS,EAAD,EAAK,CAAC,MAAD,CAAL,CAAtC;;UACA,KAAKhC,QAAQ,CAACW,OAAT,CAAiBhC,OAAjB,CAAL;UACA;QACD;;MACD,KAAK,mBAAL;QAA0B;UACxB,KAAKqB,QAAQ,CAACiC,iBAAT,EAAL;UACA;QACD;;MACD,KAAK,eAAL;QAAsB;UACpB,KAAKjC,QAAQ,CAACkC,aAAT,EAAL;UACA;QACD;IAbH;EAeD,CA9EyB,CAA1B;EA+EA,MAAMrB,SAAS,GAAG1C,IAAI,CAAEK,GAAD,IAAS;IAC9B,MAAM;MAAEU;IAAF,IAAeV,GAAG,CAACC,aAAD,CAAxB;IACA,OAAOD,GAAG,CAACU,QAAD,CAAV;EACD,CAHqB,EAGnB,CAAC4B,IAAD,EAAOP,GAAP,EAAYC,MAAZ,KAAuBD,GAAG,CAAC9B,aAAD,EAAgB+B,MAAhB,CAHP,CAAtB;EAIA,OAAOK,SAAP;AACD;;AAED,SAASiB,qBAAT,EAAgCzD,aAAhC,EAA+CD,eAA/C"},"metadata":{},"sourceType":"module"}