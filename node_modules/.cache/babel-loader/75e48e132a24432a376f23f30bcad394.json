{"ast":null,"code":"import { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format } from 'three';\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\n\nconst _taskCache = new WeakMap();\n\nclass BasisTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n  }\n\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n    };\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    const texture = new CompressedTexture();\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this._createTexture([buffer]).then(function (_texture) {\n        texture.copy(_texture);\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture);\n      }).catch(onError);\n    }, onProgress, onError);\n    return texture;\n  }\n  /** Low-level transcoding API, exposed for use by KTX2Loader. */\n\n\n  parseInternalAsync(options) {\n    const {\n      levels\n    } = options;\n    const buffers = new Set();\n\n    for (let i = 0; i < levels.length; i++) {\n      buffers.add(levels[i].data.buffer);\n    }\n\n    return this._createTexture(Array.from(buffers), { ...options,\n      lowLevel: true\n    });\n  }\n  /**\n   * @param {ArrayBuffer[]} buffers\n   * @param {object?} config\n   * @return {Promise<CompressedTexture>}\n   */\n\n\n  _createTexture(buffers) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let worker;\n    let taskID;\n    const taskConfig = config;\n    let taskCost = 0;\n\n    for (let i = 0; i < buffers.length; i++) {\n      taskCost += buffers[i].byteLength;\n    }\n\n    const texturePending = this._allocateWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'transcode',\n          id: taskID,\n          buffers: buffers,\n          taskConfig: taskConfig\n        }, buffers);\n      });\n    }).then(message => {\n      const {\n        mipmaps,\n        width,\n        height,\n        format\n      } = message;\n      const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      return texture;\n    }); // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n    texturePending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        worker._taskLoad -= taskCost;\n        delete worker._callbacks[taskID];\n      }\n    }); // Cache the task result.\n\n    _taskCache.set(buffers[0], {\n      promise: texturePending\n    });\n\n    return texturePending;\n  }\n\n  _initTranscoder() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load('basis_transcoder.js', resolve, undefined, reject);\n      }); // Load transcoder WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load('basis_transcoder.wasm', resolve, undefined, reject);\n      });\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(_ref => {\n        let [jsContent, binaryContent] = _ref;\n        const fn = BasisTextureLoader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(BasisTextureLoader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(BasisTextureLoader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(BasisTextureLoader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n      });\n    }\n\n    return this.transcoderPending;\n  }\n\n  _allocateWorker(taskCost) {\n    return this._initTranscoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          config: this.workerConfig,\n          transcoderBinary: this.transcoderBinary\n        });\n\n        worker.onmessage = function (e) {\n          const message = e.data;\n\n          switch (message.type) {\n            case 'transcode':\n              worker._callbacks[message.id].resolve(message);\n\n              break;\n\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n\n              break;\n\n            default:\n              console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; i++) {\n      this.workerPool[i].terminate();\n    }\n\n    this.workerPool.length = 0;\n    return this;\n  }\n\n}\n/* CONSTANTS */\n\n\nBasisTextureLoader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nBasisTextureLoader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nBasisTextureLoader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  onmessage = function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            } = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]);\n            const buffers = [];\n\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  };\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n    });\n  }\n\n  function transcodeLowLevel(taskConfig) {\n    const {\n      basisFormat,\n      width,\n      height,\n      hasAlpha\n    } = taskConfig;\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), 'THREE.BasisTextureLoader: Unsupported format.');\n    const mipmaps = [];\n\n    if (basisFormat === BasisFormat.ETC1S) {\n      const transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      const {\n        endpointCount,\n        endpointsData,\n        selectorCount,\n        selectorsData,\n        tablesData\n      } = taskConfig.globalData;\n\n      try {\n        let ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, 'THREE.BasisTextureLoader: decodePalettes() failed.');\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, 'THREE.BasisTextureLoader: decodeTables() failed.');\n\n        for (let i = 0; i < taskConfig.levels.length; i++) {\n          const level = taskConfig.levels[i];\n          const imageDesc = taskConfig.globalData.imageDescs[i];\n          const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          const dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, imageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength, imageDesc.alphaSliceByteOffset, imageDesc.alphaSliceByteLength, imageDesc.imageFlags, hasAlpha, false, 0, 0);\n          assert(ok, 'THREE.BasisTextureLoader: transcodeImage() failed for level ' + level.index + '.');\n          mipmaps.push({\n            data: dst,\n            width: level.width,\n            height: level.height\n          });\n        }\n      } finally {\n        transcoder.delete();\n      }\n    } else {\n      for (let i = 0; i < taskConfig.levels.length; i++) {\n        const level = taskConfig.levels[i];\n        const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n        const dst = new Uint8Array(dstByteLength);\n        const ok = BasisModule.transcodeUASTCImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, 0, level.data.byteLength, 0, hasAlpha, false, 0, 0, -1, -1);\n        assert(ok, 'THREE.BasisTextureLoader: transcodeUASTCImage() failed for level ' + level.index + '.');\n        mipmaps.push({\n          data: dst,\n          width: level.width,\n          height: level.height\n        });\n      }\n    }\n\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  }\n\n  function transcode(buffer) {\n    const basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    const basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = basisFile.getImageWidth(0, 0);\n    const height = basisFile.getImageHeight(0, 0);\n    const levels = basisFile.getNumLevels(0);\n    const hasAlpha = basisFile.getHasAlpha();\n\n    function cleanup() {\n      basisFile.close();\n      basisFile.delete();\n    }\n\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader:\tInvalid texture');\n    }\n\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader: .startTranscoding failed');\n    }\n\n    const mipmaps = [];\n\n    for (let mip = 0; mip < levels; mip++) {\n      const mipWidth = basisFile.getImageWidth(0, mip);\n      const mipHeight = basisFile.getImageHeight(0, mip);\n      const dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      const status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.BasisTextureLoader: .transcodeImage failed.');\n      }\n\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n\n    console.warn('THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n\n  function assert(ok, message) {\n    if (!ok) throw new Error(message);\n  }\n\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      // GL requires extra padding for very small textures:\n      // https://www.khronos.org/registry/OpenGL/extensions/IMG/IMG_texture_compression_pvrtc.txt\n      const paddedWidth = width + 3 & ~3;\n      const paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n};\n\nexport { BasisTextureLoader };","map":{"version":3,"names":["Loader","FileLoader","CompressedTexture","UnsignedByteType","LinearFilter","LinearMipmapLinearFilter","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","_taskCache","WeakMap","BasisTextureLoader","constructor","manager","transcoderPath","transcoderBinary","transcoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","setTranscoderPath","path","setWorkerLimit","detectSupport","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","load","url","onLoad","onProgress","onError","loader","setResponseType","setWithCredentials","withCredentials","texture","buffer","cachedTask","get","promise","then","catch","_createTexture","_texture","copy","needsUpdate","parseInternalAsync","options","levels","buffers","Set","i","length","add","data","Array","from","lowLevel","config","worker","taskID","taskConfig","taskCost","byteLength","texturePending","_allocateWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","mipmaps","width","height","format","minFilter","magFilter","generateMipmaps","_taskLoad","set","_initTranscoder","jsLoader","setPath","jsContent","undefined","binaryLoader","binaryContent","all","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","onmessage","e","console","error","push","sort","a","b","dispose","terminate","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","init","hasAlpha","transcodeLowLevel","transcode","self","wasmBinary","onRuntimeInitialized","BASIS","initializeBasis","basisFormat","transcoderFormat","engineFormat","getTranscoderFormat","blockByteLength","getBytesPerBlockOrPixel","assert","isFormatSupported","transcoder","LowLevelETC1SImageTranscoder","endpointCount","endpointsData","selectorCount","selectorsData","tablesData","globalData","ok","decodePalettes","decodeTables","level","imageDesc","imageDescs","dstByteLength","getTranscodedImageByteLength","dst","Uint8Array","transcodeImage","getWidthInBlocks","getHeightInBlocks","index","rgbSliceByteOffset","rgbSliceByteLength","alphaSliceByteOffset","alphaSliceByteLength","imageFlags","delete","transcodeUASTCImage","basisFile","BasisFile","isUASTC","getImageWidth","getImageHeight","getNumLevels","getHasAlpha","cleanup","close","Error","startTranscoding","mip","mipWidth","mipHeight","getImageTranscodedSizeInBytes","status","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","UASTC_OPTIONS","opt","includes","isPowerOfTwo","warn","Math","ceil","getFormatBlockWidth","getFormatBlockHeight","formatIsUncompressed","paddedWidth","paddedHeight","max","value"],"sources":["/home/odin/Desktop/THP☠/Developpeur/Final_Project/pokeland/node_modules/three-stdlib/loaders/BasisTextureLoader.js"],"sourcesContent":["import { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format } from 'three';\n\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\n\nconst _taskCache = new WeakMap();\n\nclass BasisTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n  }\n\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n    };\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    const texture = new CompressedTexture();\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this._createTexture([buffer]).then(function (_texture) {\n        texture.copy(_texture);\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture);\n      }).catch(onError);\n    }, onProgress, onError);\n    return texture;\n  }\n  /** Low-level transcoding API, exposed for use by KTX2Loader. */\n\n\n  parseInternalAsync(options) {\n    const {\n      levels\n    } = options;\n    const buffers = new Set();\n\n    for (let i = 0; i < levels.length; i++) {\n      buffers.add(levels[i].data.buffer);\n    }\n\n    return this._createTexture(Array.from(buffers), { ...options,\n      lowLevel: true\n    });\n  }\n  /**\n   * @param {ArrayBuffer[]} buffers\n   * @param {object?} config\n   * @return {Promise<CompressedTexture>}\n   */\n\n\n  _createTexture(buffers, config = {}) {\n    let worker;\n    let taskID;\n    const taskConfig = config;\n    let taskCost = 0;\n\n    for (let i = 0; i < buffers.length; i++) {\n      taskCost += buffers[i].byteLength;\n    }\n\n    const texturePending = this._allocateWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'transcode',\n          id: taskID,\n          buffers: buffers,\n          taskConfig: taskConfig\n        }, buffers);\n      });\n    }).then(message => {\n      const {\n        mipmaps,\n        width,\n        height,\n        format\n      } = message;\n      const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      return texture;\n    }); // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n    texturePending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        worker._taskLoad -= taskCost;\n        delete worker._callbacks[taskID];\n      }\n    }); // Cache the task result.\n\n    _taskCache.set(buffers[0], {\n      promise: texturePending\n    });\n\n    return texturePending;\n  }\n\n  _initTranscoder() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load('basis_transcoder.js', resolve, undefined, reject);\n      }); // Load transcoder WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load('basis_transcoder.wasm', resolve, undefined, reject);\n      });\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        const fn = BasisTextureLoader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(BasisTextureLoader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(BasisTextureLoader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(BasisTextureLoader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n      });\n    }\n\n    return this.transcoderPending;\n  }\n\n  _allocateWorker(taskCost) {\n    return this._initTranscoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          config: this.workerConfig,\n          transcoderBinary: this.transcoderBinary\n        });\n\n        worker.onmessage = function (e) {\n          const message = e.data;\n\n          switch (message.type) {\n            case 'transcode':\n              worker._callbacks[message.id].resolve(message);\n\n              break;\n\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n\n              break;\n\n            default:\n              console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; i++) {\n      this.workerPool[i].terminate();\n    }\n\n    this.workerPool.length = 0;\n    return this;\n  }\n\n}\n/* CONSTANTS */\n\n\nBasisTextureLoader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nBasisTextureLoader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nBasisTextureLoader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  onmessage = function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            } = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]);\n            const buffers = [];\n\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  };\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n    });\n  }\n\n  function transcodeLowLevel(taskConfig) {\n    const {\n      basisFormat,\n      width,\n      height,\n      hasAlpha\n    } = taskConfig;\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), 'THREE.BasisTextureLoader: Unsupported format.');\n    const mipmaps = [];\n\n    if (basisFormat === BasisFormat.ETC1S) {\n      const transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      const {\n        endpointCount,\n        endpointsData,\n        selectorCount,\n        selectorsData,\n        tablesData\n      } = taskConfig.globalData;\n\n      try {\n        let ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, 'THREE.BasisTextureLoader: decodePalettes() failed.');\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, 'THREE.BasisTextureLoader: decodeTables() failed.');\n\n        for (let i = 0; i < taskConfig.levels.length; i++) {\n          const level = taskConfig.levels[i];\n          const imageDesc = taskConfig.globalData.imageDescs[i];\n          const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          const dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, imageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength, imageDesc.alphaSliceByteOffset, imageDesc.alphaSliceByteLength, imageDesc.imageFlags, hasAlpha, false, 0, 0);\n          assert(ok, 'THREE.BasisTextureLoader: transcodeImage() failed for level ' + level.index + '.');\n          mipmaps.push({\n            data: dst,\n            width: level.width,\n            height: level.height\n          });\n        }\n      } finally {\n        transcoder.delete();\n      }\n    } else {\n      for (let i = 0; i < taskConfig.levels.length; i++) {\n        const level = taskConfig.levels[i];\n        const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n        const dst = new Uint8Array(dstByteLength);\n        const ok = BasisModule.transcodeUASTCImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, 0, level.data.byteLength, 0, hasAlpha, false, 0, 0, -1, -1);\n        assert(ok, 'THREE.BasisTextureLoader: transcodeUASTCImage() failed for level ' + level.index + '.');\n        mipmaps.push({\n          data: dst,\n          width: level.width,\n          height: level.height\n        });\n      }\n    }\n\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  }\n\n  function transcode(buffer) {\n    const basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    const basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = basisFile.getImageWidth(0, 0);\n    const height = basisFile.getImageHeight(0, 0);\n    const levels = basisFile.getNumLevels(0);\n    const hasAlpha = basisFile.getHasAlpha();\n\n    function cleanup() {\n      basisFile.close();\n      basisFile.delete();\n    }\n\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader:\tInvalid texture');\n    }\n\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader: .startTranscoding failed');\n    }\n\n    const mipmaps = [];\n\n    for (let mip = 0; mip < levels; mip++) {\n      const mipWidth = basisFile.getImageWidth(0, mip);\n      const mipHeight = basisFile.getImageHeight(0, mip);\n      const dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      const status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.BasisTextureLoader: .transcodeImage failed.');\n      }\n\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n\n    console.warn('THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n\n  function assert(ok, message) {\n    if (!ok) throw new Error(message);\n  }\n\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      // GL requires extra padding for very small textures:\n      // https://www.khronos.org/registry/OpenGL/extensions/IMG/IMG_texture_compression_pvrtc.txt\n      const paddedWidth = width + 3 & ~3;\n      const paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n};\n\nexport { BasisTextureLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}