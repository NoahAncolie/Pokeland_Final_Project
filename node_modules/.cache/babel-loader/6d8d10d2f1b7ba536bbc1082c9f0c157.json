{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { DataTexture, RGBAFormat, FloatType, RepeatWrapping, NearestFilter, Mesh, InstancedMesh, Matrix4, DynamicDrawUsage } from 'three'; // Original src: https://github.com/zz85/threejs-path-flow\n\nconst CHANNELS = 4;\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 4;\n/**\n * Make a new DataTexture to store the descriptions of the curves.\n *\n * @param { number } numberOfCurves the number of curves needed to be described by this texture.\n */\n\nconst initSplineTexture = function () {\n  let numberOfCurves = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  const dataArray = new Float32Array(TEXTURE_WIDTH * TEXTURE_HEIGHT * numberOfCurves * CHANNELS);\n  const dataTexture = new DataTexture(dataArray, TEXTURE_WIDTH, TEXTURE_HEIGHT * numberOfCurves, RGBAFormat, FloatType);\n  dataTexture.wrapS = RepeatWrapping;\n  dataTexture.wrapT = RepeatWrapping;\n  dataTexture.magFilter = NearestFilter;\n  dataTexture.needsUpdate = true;\n  return dataTexture;\n};\n/**\n * Write the curve description to the data texture\n *\n * @param { DataTexture } texture The DataTexture to write to\n * @param { Curve } splineCurve The curve to describe\n * @param { number } offset Which curve slot to write to\n */\n\n\nconst updateSplineTexture = function (texture, splineCurve) {\n  let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const numberOfPoints = Math.floor(TEXTURE_WIDTH * (TEXTURE_HEIGHT / 4));\n  splineCurve.arcLengthDivisions = numberOfPoints / 2;\n  splineCurve.updateArcLengths();\n  const points = splineCurve.getSpacedPoints(numberOfPoints);\n  const frenetFrames = splineCurve.computeFrenetFrames(numberOfPoints, true);\n\n  for (let i = 0; i < numberOfPoints; i++) {\n    const rowOffset = Math.floor(i / TEXTURE_WIDTH);\n    const rowIndex = i % TEXTURE_WIDTH;\n    let pt = points[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 0 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.tangents[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 1 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.normals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 2 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.binormals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 3 + rowOffset + TEXTURE_HEIGHT * offset);\n  }\n\n  texture.needsUpdate = true;\n};\n\nconst setTextureValue = (texture, index, x, y, z, o) => {\n  const image = texture.image;\n  const {\n    data\n  } = image;\n  const i = CHANNELS * TEXTURE_WIDTH * o; // Row Offset\n\n  data[index * CHANNELS + i + 0] = x;\n  data[index * CHANNELS + i + 1] = y;\n  data[index * CHANNELS + i + 2] = z;\n  data[index * CHANNELS + i + 3] = 1;\n};\n/**\n * Create a new set of uniforms for describing the curve modifier\n *\n * @param { DataTexture } Texture which holds the curve description\n */\n\n\nconst getUniforms = splineTexture => ({\n  spineTexture: {\n    value: splineTexture\n  },\n  pathOffset: {\n    type: 'f',\n    value: 0\n  },\n  // time of path curve\n  pathSegment: {\n    type: 'f',\n    value: 1\n  },\n  // fractional length of path\n  spineOffset: {\n    type: 'f',\n    value: 161\n  },\n  spineLength: {\n    type: 'f',\n    value: 400\n  },\n  flow: {\n    type: 'i',\n    value: 1\n  }\n});\n\nfunction modifyShader(material, uniforms) {\n  let numberOfCurves = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (material.__ok) return;\n  material.__ok = true;\n\n  material.onBeforeCompile = shader => {\n    if (shader.__modified) return;\n    shader.__modified = true;\n    Object.assign(shader.uniforms, uniforms);\n    const vertexShader =\n    /* glsl */\n    `\n\t\tuniform sampler2D spineTexture;\n\t\tuniform float pathOffset;\n\t\tuniform float pathSegment;\n\t\tuniform float spineOffset;\n\t\tuniform float spineLength;\n\t\tuniform int flow;\n\n\t\tfloat textureLayers = ${TEXTURE_HEIGHT * numberOfCurves}.;\n\t\tfloat textureStacks = ${TEXTURE_HEIGHT / 4}.;\n\n\t\t${shader.vertexShader}\n\t\t` // chunk import moved in front of modified shader below\n    .replace('#include <beginnormal_vertex>', '') // vec3 transformedNormal declaration overriden below\n    .replace('#include <defaultnormal_vertex>', '') // vec3 transformed declaration overriden below\n    .replace('#include <begin_vertex>', '') // shader override\n    .replace(/void\\s*main\\s*\\(\\)\\s*\\{/,\n    /* glsl */\n    `\n        void main() {\n        #include <beginnormal_vertex>\n\n        vec4 worldPos = modelMatrix * vec4(position, 1.);\n\n        bool bend = flow > 0;\n        float xWeight = bend ? 0. : 1.;\n\n        #ifdef USE_INSTANCING\n        float pathOffsetFromInstanceMatrix = instanceMatrix[3][2];\n        float spineLengthFromInstanceMatrix = instanceMatrix[3][0];\n        float spinePortion = bend ? (worldPos.x + spineOffset) / spineLengthFromInstanceMatrix : 0.;\n        float mt = (spinePortion * pathSegment + pathOffset + pathOffsetFromInstanceMatrix)*textureStacks;\n        #else\n        float spinePortion = bend ? (worldPos.x + spineOffset) / spineLength : 0.;\n        float mt = (spinePortion * pathSegment + pathOffset)*textureStacks;\n        #endif\n\n        mt = mod(mt, textureStacks);\n        float rowOffset = floor(mt);\n\n        #ifdef USE_INSTANCING\n        rowOffset += instanceMatrix[3][1] * ${TEXTURE_HEIGHT}.;\n        #endif\n\n        vec3 spinePos = texture2D(spineTexture, vec2(mt, (0. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 a =        texture2D(spineTexture, vec2(mt, (1. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 b =        texture2D(spineTexture, vec2(mt, (2. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 c =        texture2D(spineTexture, vec2(mt, (3. + rowOffset + 0.5) / textureLayers)).xyz;\n        mat3 basis = mat3(a, b, c);\n\n        vec3 transformed = basis\n          * vec3(worldPos.x * xWeight, worldPos.y * 1., worldPos.z * 1.)\n          + spinePos;\n\n        vec3 transformedNormal = normalMatrix * (basis * objectNormal);\n\t\t\t`).replace('#include <project_vertex>',\n    /* glsl */\n    `vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;`);\n    shader.vertexShader = vertexShader;\n  };\n}\n/**\n * A helper class for making meshes bend aroudn curves\n */\n\n\nclass Flow {\n  /**\n   * @param {Mesh} mesh The mesh to clone and modify to bend around the curve\n   * @param {number} numberOfCurves The amount of space that should preallocated for additional curves\n   */\n  constructor(mesh) {\n    let numberOfCurves = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n    _defineProperty(this, \"curveArray\", void 0);\n\n    _defineProperty(this, \"curveLengthArray\", void 0);\n\n    _defineProperty(this, \"object3D\", void 0);\n\n    _defineProperty(this, \"splineTexure\", void 0);\n\n    _defineProperty(this, \"uniforms\", void 0);\n\n    const obj3D = mesh.clone();\n    const splineTexure = initSplineTexture(numberOfCurves);\n    const uniforms = getUniforms(splineTexure);\n    obj3D.traverse(child => {\n      if (child instanceof Mesh || child instanceof InstancedMesh) {\n        child.material = child.material.clone();\n        modifyShader(child.material, uniforms, numberOfCurves);\n      }\n    });\n    this.curveArray = new Array(numberOfCurves);\n    this.curveLengthArray = new Array(numberOfCurves);\n    this.object3D = obj3D;\n    this.splineTexure = splineTexure;\n    this.uniforms = uniforms;\n  }\n\n  updateCurve(index, curve) {\n    if (index >= this.curveArray.length) throw Error('Index out of range for Flow');\n    const curveLength = curve.getLength();\n    this.uniforms.spineLength.value = curveLength;\n    this.curveLengthArray[index] = curveLength;\n    this.curveArray[index] = curve;\n    updateSplineTexture(this.splineTexure, curve, index);\n  }\n\n  moveAlongCurve(amount) {\n    this.uniforms.pathOffset.value += amount;\n  }\n\n}\n\nconst matrix = new Matrix4();\n/**\n * A helper class for creating instanced versions of flow, where the instances are placed on the curve.\n */\n\nclass InstancedFlow extends Flow {\n  /**\n   *\n   * @param {number} count The number of instanced elements\n   * @param {number} curveCount The number of curves to preallocate for\n   * @param {Geometry} geometry The geometry to use for the instanced mesh\n   * @param {Material} material The material to use for the instanced mesh\n   */\n  constructor(count, curveCount, geometry, material) {\n    const mesh = new InstancedMesh(geometry, material, count);\n    mesh.instanceMatrix.setUsage(DynamicDrawUsage);\n    super(mesh, curveCount);\n\n    _defineProperty(this, \"offsets\", void 0);\n\n    _defineProperty(this, \"whichCurve\", void 0);\n\n    this.offsets = new Array(count).fill(0);\n    this.whichCurve = new Array(count).fill(0);\n  }\n  /**\n   * The extra information about which curve and curve position is stored in the translation components of the matrix for the instanced objects\n   * This writes that information to the matrix and marks it as needing update.\n   *\n   * @param {number} index of the instanced element to update\n   */\n\n\n  writeChanges(index) {\n    matrix.makeTranslation(this.curveLengthArray[this.whichCurve[index]], this.whichCurve[index], this.offsets[index]);\n    this.object3D.setMatrixAt(index, matrix);\n    this.object3D.instanceMatrix.needsUpdate = true;\n  }\n  /**\n   * Move an individual element along the curve by a specific amount\n   *\n   * @param {number} index Which element to update\n   * @param {number} offset Move by how much\n   */\n\n\n  moveIndividualAlongCurve(index, offset) {\n    this.offsets[index] += offset;\n    this.writeChanges(index);\n  }\n  /**\n   * Select which curve to use for an element\n   *\n   * @param {number} index the index of the instanced element to update\n   * @param {number} curveNo the index of the curve it should use\n   */\n\n\n  setCurve(index, curveNo) {\n    if (isNaN(curveNo)) throw Error('curve index being set is Not a Number (NaN)');\n    this.whichCurve[index] = curveNo;\n    this.writeChanges(index);\n  }\n\n}\n\nexport { Flow, InstancedFlow, getUniforms, initSplineTexture, modifyShader, updateSplineTexture };","map":{"version":3,"names":["_defineProperty","DataTexture","RGBAFormat","FloatType","RepeatWrapping","NearestFilter","Mesh","InstancedMesh","Matrix4","DynamicDrawUsage","CHANNELS","TEXTURE_WIDTH","TEXTURE_HEIGHT","initSplineTexture","numberOfCurves","dataArray","Float32Array","dataTexture","wrapS","wrapT","magFilter","needsUpdate","updateSplineTexture","texture","splineCurve","offset","numberOfPoints","Math","floor","arcLengthDivisions","updateArcLengths","points","getSpacedPoints","frenetFrames","computeFrenetFrames","i","rowOffset","rowIndex","pt","setTextureValue","x","y","z","tangents","normals","binormals","index","o","image","data","getUniforms","splineTexture","spineTexture","value","pathOffset","type","pathSegment","spineOffset","spineLength","flow","modifyShader","material","uniforms","__ok","onBeforeCompile","shader","__modified","Object","assign","vertexShader","replace","Flow","constructor","mesh","obj3D","clone","splineTexure","traverse","child","curveArray","Array","curveLengthArray","object3D","updateCurve","curve","length","Error","curveLength","getLength","moveAlongCurve","amount","matrix","InstancedFlow","count","curveCount","geometry","instanceMatrix","setUsage","offsets","fill","whichCurve","writeChanges","makeTranslation","setMatrixAt","moveIndividualAlongCurve","setCurve","curveNo","isNaN"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/three-stdlib/modifiers/CurveModifier.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { DataTexture, RGBAFormat, FloatType, RepeatWrapping, NearestFilter, Mesh, InstancedMesh, Matrix4, DynamicDrawUsage } from 'three';\n\n// Original src: https://github.com/zz85/threejs-path-flow\nconst CHANNELS = 4;\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 4;\n\n/**\n * Make a new DataTexture to store the descriptions of the curves.\n *\n * @param { number } numberOfCurves the number of curves needed to be described by this texture.\n */\nconst initSplineTexture = (numberOfCurves = 1) => {\n  const dataArray = new Float32Array(TEXTURE_WIDTH * TEXTURE_HEIGHT * numberOfCurves * CHANNELS);\n  const dataTexture = new DataTexture(dataArray, TEXTURE_WIDTH, TEXTURE_HEIGHT * numberOfCurves, RGBAFormat, FloatType);\n  dataTexture.wrapS = RepeatWrapping;\n  dataTexture.wrapT = RepeatWrapping;\n  dataTexture.magFilter = NearestFilter;\n  dataTexture.needsUpdate = true;\n  return dataTexture;\n};\n/**\n * Write the curve description to the data texture\n *\n * @param { DataTexture } texture The DataTexture to write to\n * @param { Curve } splineCurve The curve to describe\n * @param { number } offset Which curve slot to write to\n */\n\nconst updateSplineTexture = (texture, splineCurve, offset = 0) => {\n  const numberOfPoints = Math.floor(TEXTURE_WIDTH * (TEXTURE_HEIGHT / 4));\n  splineCurve.arcLengthDivisions = numberOfPoints / 2;\n  splineCurve.updateArcLengths();\n  const points = splineCurve.getSpacedPoints(numberOfPoints);\n  const frenetFrames = splineCurve.computeFrenetFrames(numberOfPoints, true);\n\n  for (let i = 0; i < numberOfPoints; i++) {\n    const rowOffset = Math.floor(i / TEXTURE_WIDTH);\n    const rowIndex = i % TEXTURE_WIDTH;\n    let pt = points[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 0 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.tangents[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 1 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.normals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 2 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.binormals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 3 + rowOffset + TEXTURE_HEIGHT * offset);\n  }\n\n  texture.needsUpdate = true;\n};\n\nconst setTextureValue = (texture, index, x, y, z, o) => {\n  const image = texture.image;\n  const {\n    data\n  } = image;\n  const i = CHANNELS * TEXTURE_WIDTH * o; // Row Offset\n\n  data[index * CHANNELS + i + 0] = x;\n  data[index * CHANNELS + i + 1] = y;\n  data[index * CHANNELS + i + 2] = z;\n  data[index * CHANNELS + i + 3] = 1;\n};\n\n/**\n * Create a new set of uniforms for describing the curve modifier\n *\n * @param { DataTexture } Texture which holds the curve description\n */\nconst getUniforms = splineTexture => ({\n  spineTexture: {\n    value: splineTexture\n  },\n  pathOffset: {\n    type: 'f',\n    value: 0\n  },\n  // time of path curve\n  pathSegment: {\n    type: 'f',\n    value: 1\n  },\n  // fractional length of path\n  spineOffset: {\n    type: 'f',\n    value: 161\n  },\n  spineLength: {\n    type: 'f',\n    value: 400\n  },\n  flow: {\n    type: 'i',\n    value: 1\n  }\n});\nfunction modifyShader(material, uniforms, numberOfCurves = 1) {\n  if (material.__ok) return;\n  material.__ok = true;\n\n  material.onBeforeCompile = shader => {\n    if (shader.__modified) return;\n    shader.__modified = true;\n    Object.assign(shader.uniforms, uniforms);\n    const vertexShader =\n    /* glsl */\n    `\n\t\tuniform sampler2D spineTexture;\n\t\tuniform float pathOffset;\n\t\tuniform float pathSegment;\n\t\tuniform float spineOffset;\n\t\tuniform float spineLength;\n\t\tuniform int flow;\n\n\t\tfloat textureLayers = ${TEXTURE_HEIGHT * numberOfCurves}.;\n\t\tfloat textureStacks = ${TEXTURE_HEIGHT / 4}.;\n\n\t\t${shader.vertexShader}\n\t\t` // chunk import moved in front of modified shader below\n    .replace('#include <beginnormal_vertex>', '') // vec3 transformedNormal declaration overriden below\n    .replace('#include <defaultnormal_vertex>', '') // vec3 transformed declaration overriden below\n    .replace('#include <begin_vertex>', '') // shader override\n    .replace(/void\\s*main\\s*\\(\\)\\s*\\{/,\n    /* glsl */\n    `\n        void main() {\n        #include <beginnormal_vertex>\n\n        vec4 worldPos = modelMatrix * vec4(position, 1.);\n\n        bool bend = flow > 0;\n        float xWeight = bend ? 0. : 1.;\n\n        #ifdef USE_INSTANCING\n        float pathOffsetFromInstanceMatrix = instanceMatrix[3][2];\n        float spineLengthFromInstanceMatrix = instanceMatrix[3][0];\n        float spinePortion = bend ? (worldPos.x + spineOffset) / spineLengthFromInstanceMatrix : 0.;\n        float mt = (spinePortion * pathSegment + pathOffset + pathOffsetFromInstanceMatrix)*textureStacks;\n        #else\n        float spinePortion = bend ? (worldPos.x + spineOffset) / spineLength : 0.;\n        float mt = (spinePortion * pathSegment + pathOffset)*textureStacks;\n        #endif\n\n        mt = mod(mt, textureStacks);\n        float rowOffset = floor(mt);\n\n        #ifdef USE_INSTANCING\n        rowOffset += instanceMatrix[3][1] * ${TEXTURE_HEIGHT}.;\n        #endif\n\n        vec3 spinePos = texture2D(spineTexture, vec2(mt, (0. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 a =        texture2D(spineTexture, vec2(mt, (1. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 b =        texture2D(spineTexture, vec2(mt, (2. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 c =        texture2D(spineTexture, vec2(mt, (3. + rowOffset + 0.5) / textureLayers)).xyz;\n        mat3 basis = mat3(a, b, c);\n\n        vec3 transformed = basis\n          * vec3(worldPos.x * xWeight, worldPos.y * 1., worldPos.z * 1.)\n          + spinePos;\n\n        vec3 transformedNormal = normalMatrix * (basis * objectNormal);\n\t\t\t`).replace('#include <project_vertex>',\n    /* glsl */\n    `vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;`);\n    shader.vertexShader = vertexShader;\n  };\n}\n/**\n * A helper class for making meshes bend aroudn curves\n */\n\nclass Flow {\n  /**\n   * @param {Mesh} mesh The mesh to clone and modify to bend around the curve\n   * @param {number} numberOfCurves The amount of space that should preallocated for additional curves\n   */\n  constructor(mesh, numberOfCurves = 1) {\n    _defineProperty(this, \"curveArray\", void 0);\n\n    _defineProperty(this, \"curveLengthArray\", void 0);\n\n    _defineProperty(this, \"object3D\", void 0);\n\n    _defineProperty(this, \"splineTexure\", void 0);\n\n    _defineProperty(this, \"uniforms\", void 0);\n\n    const obj3D = mesh.clone();\n    const splineTexure = initSplineTexture(numberOfCurves);\n    const uniforms = getUniforms(splineTexure);\n    obj3D.traverse(child => {\n      if (child instanceof Mesh || child instanceof InstancedMesh) {\n        child.material = child.material.clone();\n        modifyShader(child.material, uniforms, numberOfCurves);\n      }\n    });\n    this.curveArray = new Array(numberOfCurves);\n    this.curveLengthArray = new Array(numberOfCurves);\n    this.object3D = obj3D;\n    this.splineTexure = splineTexure;\n    this.uniforms = uniforms;\n  }\n\n  updateCurve(index, curve) {\n    if (index >= this.curveArray.length) throw Error('Index out of range for Flow');\n    const curveLength = curve.getLength();\n    this.uniforms.spineLength.value = curveLength;\n    this.curveLengthArray[index] = curveLength;\n    this.curveArray[index] = curve;\n    updateSplineTexture(this.splineTexure, curve, index);\n  }\n\n  moveAlongCurve(amount) {\n    this.uniforms.pathOffset.value += amount;\n  }\n\n}\nconst matrix = new Matrix4();\n/**\n * A helper class for creating instanced versions of flow, where the instances are placed on the curve.\n */\n\nclass InstancedFlow extends Flow {\n  /**\n   *\n   * @param {number} count The number of instanced elements\n   * @param {number} curveCount The number of curves to preallocate for\n   * @param {Geometry} geometry The geometry to use for the instanced mesh\n   * @param {Material} material The material to use for the instanced mesh\n   */\n  constructor(count, curveCount, geometry, material) {\n    const mesh = new InstancedMesh(geometry, material, count);\n    mesh.instanceMatrix.setUsage(DynamicDrawUsage);\n    super(mesh, curveCount);\n\n    _defineProperty(this, \"offsets\", void 0);\n\n    _defineProperty(this, \"whichCurve\", void 0);\n\n    this.offsets = new Array(count).fill(0);\n    this.whichCurve = new Array(count).fill(0);\n  }\n  /**\n   * The extra information about which curve and curve position is stored in the translation components of the matrix for the instanced objects\n   * This writes that information to the matrix and marks it as needing update.\n   *\n   * @param {number} index of the instanced element to update\n   */\n\n\n  writeChanges(index) {\n    matrix.makeTranslation(this.curveLengthArray[this.whichCurve[index]], this.whichCurve[index], this.offsets[index]);\n    this.object3D.setMatrixAt(index, matrix);\n    this.object3D.instanceMatrix.needsUpdate = true;\n  }\n  /**\n   * Move an individual element along the curve by a specific amount\n   *\n   * @param {number} index Which element to update\n   * @param {number} offset Move by how much\n   */\n\n\n  moveIndividualAlongCurve(index, offset) {\n    this.offsets[index] += offset;\n    this.writeChanges(index);\n  }\n  /**\n   * Select which curve to use for an element\n   *\n   * @param {number} index the index of the instanced element to update\n   * @param {number} curveNo the index of the curve it should use\n   */\n\n\n  setCurve(index, curveNo) {\n    if (isNaN(curveNo)) throw Error('curve index being set is Not a Number (NaN)');\n    this.whichCurve[index] = curveNo;\n    this.writeChanges(index);\n  }\n\n}\n\nexport { Flow, InstancedFlow, getUniforms, initSplineTexture, modifyShader, updateSplineTexture };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}