{"ast":null,"code":"import { Loader, FileLoader, LoaderUtils, BufferGeometry, Float32BufferAttribute, PointsMaterial, Points } from 'three';\n\nclass PCDLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.littleEndian = true;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data, url));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data, url) {\n    // from https://gitlab.com/taketwo/three-pcd-loader/blob/master/decompress-lzf.js\n    function decompressLZF(inData, outLength) {\n      const inLength = inData.length;\n      const outData = new Uint8Array(outLength);\n      let inPtr = 0;\n      let outPtr = 0;\n      let ctrl;\n      let len;\n      let ref;\n\n      do {\n        ctrl = inData[inPtr++];\n\n        if (ctrl < 1 << 5) {\n          ctrl++;\n          if (outPtr + ctrl > outLength) throw new Error('Output buffer is not large enough');\n          if (inPtr + ctrl > inLength) throw new Error('Invalid compressed data');\n\n          do {\n            outData[outPtr++] = inData[inPtr++];\n          } while (--ctrl);\n        } else {\n          len = ctrl >> 5;\n          ref = outPtr - ((ctrl & 0x1f) << 8) - 1;\n          if (inPtr >= inLength) throw new Error('Invalid compressed data');\n\n          if (len === 7) {\n            len += inData[inPtr++];\n            if (inPtr >= inLength) throw new Error('Invalid compressed data');\n          }\n\n          ref -= inData[inPtr++];\n          if (outPtr + len + 2 > outLength) throw new Error('Output buffer is not large enough');\n          if (ref < 0) throw new Error('Invalid compressed data');\n          if (ref >= outPtr) throw new Error('Invalid compressed data');\n\n          do {\n            outData[outPtr++] = outData[ref++];\n          } while (--len + 2);\n        }\n      } while (inPtr < inLength);\n\n      return outData;\n    }\n\n    function parseHeader(data) {\n      const PCDheader = {};\n      const result1 = data.search(/[\\r\\n]DATA\\s(\\S*)\\s/i);\n      const result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec(data.substr(result1 - 1));\n      PCDheader.data = result2[1];\n      PCDheader.headerLen = result2[0].length + result1;\n      PCDheader.str = data.substr(0, PCDheader.headerLen); // remove comments\n\n      PCDheader.str = PCDheader.str.replace(/\\#.*/gi, ''); // parse\n\n      PCDheader.version = /VERSION (.*)/i.exec(PCDheader.str);\n      PCDheader.fields = /FIELDS (.*)/i.exec(PCDheader.str);\n      PCDheader.size = /SIZE (.*)/i.exec(PCDheader.str);\n      PCDheader.type = /TYPE (.*)/i.exec(PCDheader.str);\n      PCDheader.count = /COUNT (.*)/i.exec(PCDheader.str);\n      PCDheader.width = /WIDTH (.*)/i.exec(PCDheader.str);\n      PCDheader.height = /HEIGHT (.*)/i.exec(PCDheader.str);\n      PCDheader.viewpoint = /VIEWPOINT (.*)/i.exec(PCDheader.str);\n      PCDheader.points = /POINTS (.*)/i.exec(PCDheader.str); // evaluate\n\n      if (PCDheader.version !== null) PCDheader.version = parseFloat(PCDheader.version[1]);\n      if (PCDheader.fields !== null) PCDheader.fields = PCDheader.fields[1].split(' ');\n      if (PCDheader.type !== null) PCDheader.type = PCDheader.type[1].split(' ');\n      if (PCDheader.width !== null) PCDheader.width = parseInt(PCDheader.width[1]);\n      if (PCDheader.height !== null) PCDheader.height = parseInt(PCDheader.height[1]);\n      if (PCDheader.viewpoint !== null) PCDheader.viewpoint = PCDheader.viewpoint[1];\n      if (PCDheader.points !== null) PCDheader.points = parseInt(PCDheader.points[1], 10);\n      if (PCDheader.points === null) PCDheader.points = PCDheader.width * PCDheader.height;\n\n      if (PCDheader.size !== null) {\n        PCDheader.size = PCDheader.size[1].split(' ').map(function (x) {\n          return parseInt(x, 10);\n        });\n      }\n\n      if (PCDheader.count !== null) {\n        PCDheader.count = PCDheader.count[1].split(' ').map(function (x) {\n          return parseInt(x, 10);\n        });\n      } else {\n        PCDheader.count = [];\n\n        for (let i = 0, l = PCDheader.fields.length; i < l; i++) {\n          PCDheader.count.push(1);\n        }\n      }\n\n      PCDheader.offset = {};\n      let sizeSum = 0;\n\n      for (let i = 0, l = PCDheader.fields.length; i < l; i++) {\n        if (PCDheader.data === 'ascii') {\n          PCDheader.offset[PCDheader.fields[i]] = i;\n        } else {\n          PCDheader.offset[PCDheader.fields[i]] = sizeSum;\n          sizeSum += PCDheader.size[i] * PCDheader.count[i];\n        }\n      } // for binary only\n\n\n      PCDheader.rowSize = sizeSum;\n      return PCDheader;\n    }\n\n    const textData = LoaderUtils.decodeText(new Uint8Array(data)); // parse header (always ascii format)\n\n    const PCDheader = parseHeader(textData); // parse data\n\n    const position = [];\n    const normal = [];\n    const color = []; // ascii\n\n    if (PCDheader.data === 'ascii') {\n      const offset = PCDheader.offset;\n      const pcdData = textData.substr(PCDheader.headerLen);\n      const lines = pcdData.split('\\n');\n\n      for (let i = 0, l = lines.length; i < l; i++) {\n        if (lines[i] === '') continue;\n        const line = lines[i].split(' ');\n\n        if (offset.x !== undefined) {\n          position.push(parseFloat(line[offset.x]));\n          position.push(parseFloat(line[offset.y]));\n          position.push(parseFloat(line[offset.z]));\n        }\n\n        if (offset.rgb !== undefined) {\n          const rgb = parseFloat(line[offset.rgb]);\n          const r = rgb >> 16 & 0x0000ff;\n          const g = rgb >> 8 & 0x0000ff;\n          const b = rgb >> 0 & 0x0000ff;\n          color.push(r / 255, g / 255, b / 255);\n        }\n\n        if (offset.normal_x !== undefined) {\n          normal.push(parseFloat(line[offset.normal_x]));\n          normal.push(parseFloat(line[offset.normal_y]));\n          normal.push(parseFloat(line[offset.normal_z]));\n        }\n      }\n    } // binary-compressed\n    // normally data in PCD files are organized as array of structures: XYZRGBXYZRGB\n    // binary compressed PCD files organize their data as structure of arrays: XXYYZZRGBRGB\n    // that requires a totally different parsing approach compared to non-compressed data\n\n\n    if (PCDheader.data === 'binary_compressed') {\n      const sizes = new Uint32Array(data.slice(PCDheader.headerLen, PCDheader.headerLen + 8));\n      const compressedSize = sizes[0];\n      const decompressedSize = sizes[1];\n      const decompressed = decompressLZF(new Uint8Array(data, PCDheader.headerLen + 8, compressedSize), decompressedSize);\n      const dataview = new DataView(decompressed.buffer);\n      const offset = PCDheader.offset;\n\n      for (let i = 0; i < PCDheader.points; i++) {\n        if (offset.x !== undefined) {\n          position.push(dataview.getFloat32(PCDheader.points * offset.x + PCDheader.size[0] * i, this.littleEndian));\n          position.push(dataview.getFloat32(PCDheader.points * offset.y + PCDheader.size[1] * i, this.littleEndian));\n          position.push(dataview.getFloat32(PCDheader.points * offset.z + PCDheader.size[2] * i, this.littleEndian));\n        }\n\n        if (offset.rgb !== undefined) {\n          color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 2) / 255.0);\n          color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 1) / 255.0);\n          color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 0) / 255.0);\n        }\n\n        if (offset.normal_x !== undefined) {\n          normal.push(dataview.getFloat32(PCDheader.points * offset.normal_x + PCDheader.size[4] * i, this.littleEndian));\n          normal.push(dataview.getFloat32(PCDheader.points * offset.normal_y + PCDheader.size[5] * i, this.littleEndian));\n          normal.push(dataview.getFloat32(PCDheader.points * offset.normal_z + PCDheader.size[6] * i, this.littleEndian));\n        }\n      }\n    } // binary\n\n\n    if (PCDheader.data === 'binary') {\n      const dataview = new DataView(data, PCDheader.headerLen);\n      const offset = PCDheader.offset;\n\n      for (let i = 0, row = 0; i < PCDheader.points; i++, row += PCDheader.rowSize) {\n        if (offset.x !== undefined) {\n          position.push(dataview.getFloat32(row + offset.x, this.littleEndian));\n          position.push(dataview.getFloat32(row + offset.y, this.littleEndian));\n          position.push(dataview.getFloat32(row + offset.z, this.littleEndian));\n        }\n\n        if (offset.rgb !== undefined) {\n          color.push(dataview.getUint8(row + offset.rgb + 2) / 255.0);\n          color.push(dataview.getUint8(row + offset.rgb + 1) / 255.0);\n          color.push(dataview.getUint8(row + offset.rgb + 0) / 255.0);\n        }\n\n        if (offset.normal_x !== undefined) {\n          normal.push(dataview.getFloat32(row + offset.normal_x, this.littleEndian));\n          normal.push(dataview.getFloat32(row + offset.normal_y, this.littleEndian));\n          normal.push(dataview.getFloat32(row + offset.normal_z, this.littleEndian));\n        }\n      }\n    } // build geometry\n\n\n    const geometry = new BufferGeometry();\n    if (position.length > 0) geometry.setAttribute('position', new Float32BufferAttribute(position, 3));\n    if (normal.length > 0) geometry.setAttribute('normal', new Float32BufferAttribute(normal, 3));\n    if (color.length > 0) geometry.setAttribute('color', new Float32BufferAttribute(color, 3));\n    geometry.computeBoundingSphere(); // build material\n\n    const material = new PointsMaterial({\n      size: 0.005\n    });\n\n    if (color.length > 0) {\n      material.vertexColors = true;\n    } else {\n      material.color.setHex(Math.random() * 0xffffff);\n    } // build point cloud\n\n\n    const mesh = new Points(geometry, material);\n    let name = url.split('').reverse().join('');\n    name = /([^\\/]*)/.exec(name);\n    name = name[1].split('').reverse().join('');\n    mesh.name = name;\n    return mesh;\n  }\n\n}\n\nexport { PCDLoader };","map":{"version":3,"names":["Loader","FileLoader","LoaderUtils","BufferGeometry","Float32BufferAttribute","PointsMaterial","Points","PCDLoader","constructor","manager","littleEndian","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","data","parse","e","console","error","itemError","decompressLZF","inData","outLength","inLength","length","outData","Uint8Array","inPtr","outPtr","ctrl","len","ref","Error","parseHeader","PCDheader","result1","search","result2","exec","substr","headerLen","str","replace","version","fields","size","type","count","width","height","viewpoint","points","parseFloat","split","parseInt","map","x","i","l","push","offset","sizeSum","rowSize","textData","decodeText","position","normal","color","pcdData","lines","line","undefined","y","z","rgb","r","g","b","normal_x","normal_y","normal_z","sizes","Uint32Array","slice","compressedSize","decompressedSize","decompressed","dataview","DataView","buffer","getFloat32","getUint8","row","geometry","setAttribute","computeBoundingSphere","material","vertexColors","setHex","Math","random","mesh","name","reverse","join"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/three-stdlib/loaders/PCDLoader.js"],"sourcesContent":["import { Loader, FileLoader, LoaderUtils, BufferGeometry, Float32BufferAttribute, PointsMaterial, Points } from 'three';\n\nclass PCDLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.littleEndian = true;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data, url));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data, url) {\n    // from https://gitlab.com/taketwo/three-pcd-loader/blob/master/decompress-lzf.js\n    function decompressLZF(inData, outLength) {\n      const inLength = inData.length;\n      const outData = new Uint8Array(outLength);\n      let inPtr = 0;\n      let outPtr = 0;\n      let ctrl;\n      let len;\n      let ref;\n\n      do {\n        ctrl = inData[inPtr++];\n\n        if (ctrl < 1 << 5) {\n          ctrl++;\n          if (outPtr + ctrl > outLength) throw new Error('Output buffer is not large enough');\n          if (inPtr + ctrl > inLength) throw new Error('Invalid compressed data');\n\n          do {\n            outData[outPtr++] = inData[inPtr++];\n          } while (--ctrl);\n        } else {\n          len = ctrl >> 5;\n          ref = outPtr - ((ctrl & 0x1f) << 8) - 1;\n          if (inPtr >= inLength) throw new Error('Invalid compressed data');\n\n          if (len === 7) {\n            len += inData[inPtr++];\n            if (inPtr >= inLength) throw new Error('Invalid compressed data');\n          }\n\n          ref -= inData[inPtr++];\n          if (outPtr + len + 2 > outLength) throw new Error('Output buffer is not large enough');\n          if (ref < 0) throw new Error('Invalid compressed data');\n          if (ref >= outPtr) throw new Error('Invalid compressed data');\n\n          do {\n            outData[outPtr++] = outData[ref++];\n          } while (--len + 2);\n        }\n      } while (inPtr < inLength);\n\n      return outData;\n    }\n\n    function parseHeader(data) {\n      const PCDheader = {};\n      const result1 = data.search(/[\\r\\n]DATA\\s(\\S*)\\s/i);\n      const result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec(data.substr(result1 - 1));\n      PCDheader.data = result2[1];\n      PCDheader.headerLen = result2[0].length + result1;\n      PCDheader.str = data.substr(0, PCDheader.headerLen); // remove comments\n\n      PCDheader.str = PCDheader.str.replace(/\\#.*/gi, ''); // parse\n\n      PCDheader.version = /VERSION (.*)/i.exec(PCDheader.str);\n      PCDheader.fields = /FIELDS (.*)/i.exec(PCDheader.str);\n      PCDheader.size = /SIZE (.*)/i.exec(PCDheader.str);\n      PCDheader.type = /TYPE (.*)/i.exec(PCDheader.str);\n      PCDheader.count = /COUNT (.*)/i.exec(PCDheader.str);\n      PCDheader.width = /WIDTH (.*)/i.exec(PCDheader.str);\n      PCDheader.height = /HEIGHT (.*)/i.exec(PCDheader.str);\n      PCDheader.viewpoint = /VIEWPOINT (.*)/i.exec(PCDheader.str);\n      PCDheader.points = /POINTS (.*)/i.exec(PCDheader.str); // evaluate\n\n      if (PCDheader.version !== null) PCDheader.version = parseFloat(PCDheader.version[1]);\n      if (PCDheader.fields !== null) PCDheader.fields = PCDheader.fields[1].split(' ');\n      if (PCDheader.type !== null) PCDheader.type = PCDheader.type[1].split(' ');\n      if (PCDheader.width !== null) PCDheader.width = parseInt(PCDheader.width[1]);\n      if (PCDheader.height !== null) PCDheader.height = parseInt(PCDheader.height[1]);\n      if (PCDheader.viewpoint !== null) PCDheader.viewpoint = PCDheader.viewpoint[1];\n      if (PCDheader.points !== null) PCDheader.points = parseInt(PCDheader.points[1], 10);\n      if (PCDheader.points === null) PCDheader.points = PCDheader.width * PCDheader.height;\n\n      if (PCDheader.size !== null) {\n        PCDheader.size = PCDheader.size[1].split(' ').map(function (x) {\n          return parseInt(x, 10);\n        });\n      }\n\n      if (PCDheader.count !== null) {\n        PCDheader.count = PCDheader.count[1].split(' ').map(function (x) {\n          return parseInt(x, 10);\n        });\n      } else {\n        PCDheader.count = [];\n\n        for (let i = 0, l = PCDheader.fields.length; i < l; i++) {\n          PCDheader.count.push(1);\n        }\n      }\n\n      PCDheader.offset = {};\n      let sizeSum = 0;\n\n      for (let i = 0, l = PCDheader.fields.length; i < l; i++) {\n        if (PCDheader.data === 'ascii') {\n          PCDheader.offset[PCDheader.fields[i]] = i;\n        } else {\n          PCDheader.offset[PCDheader.fields[i]] = sizeSum;\n          sizeSum += PCDheader.size[i] * PCDheader.count[i];\n        }\n      } // for binary only\n\n\n      PCDheader.rowSize = sizeSum;\n      return PCDheader;\n    }\n\n    const textData = LoaderUtils.decodeText(new Uint8Array(data)); // parse header (always ascii format)\n\n    const PCDheader = parseHeader(textData); // parse data\n\n    const position = [];\n    const normal = [];\n    const color = []; // ascii\n\n    if (PCDheader.data === 'ascii') {\n      const offset = PCDheader.offset;\n      const pcdData = textData.substr(PCDheader.headerLen);\n      const lines = pcdData.split('\\n');\n\n      for (let i = 0, l = lines.length; i < l; i++) {\n        if (lines[i] === '') continue;\n        const line = lines[i].split(' ');\n\n        if (offset.x !== undefined) {\n          position.push(parseFloat(line[offset.x]));\n          position.push(parseFloat(line[offset.y]));\n          position.push(parseFloat(line[offset.z]));\n        }\n\n        if (offset.rgb !== undefined) {\n          const rgb = parseFloat(line[offset.rgb]);\n          const r = rgb >> 16 & 0x0000ff;\n          const g = rgb >> 8 & 0x0000ff;\n          const b = rgb >> 0 & 0x0000ff;\n          color.push(r / 255, g / 255, b / 255);\n        }\n\n        if (offset.normal_x !== undefined) {\n          normal.push(parseFloat(line[offset.normal_x]));\n          normal.push(parseFloat(line[offset.normal_y]));\n          normal.push(parseFloat(line[offset.normal_z]));\n        }\n      }\n    } // binary-compressed\n    // normally data in PCD files are organized as array of structures: XYZRGBXYZRGB\n    // binary compressed PCD files organize their data as structure of arrays: XXYYZZRGBRGB\n    // that requires a totally different parsing approach compared to non-compressed data\n\n\n    if (PCDheader.data === 'binary_compressed') {\n      const sizes = new Uint32Array(data.slice(PCDheader.headerLen, PCDheader.headerLen + 8));\n      const compressedSize = sizes[0];\n      const decompressedSize = sizes[1];\n      const decompressed = decompressLZF(new Uint8Array(data, PCDheader.headerLen + 8, compressedSize), decompressedSize);\n      const dataview = new DataView(decompressed.buffer);\n      const offset = PCDheader.offset;\n\n      for (let i = 0; i < PCDheader.points; i++) {\n        if (offset.x !== undefined) {\n          position.push(dataview.getFloat32(PCDheader.points * offset.x + PCDheader.size[0] * i, this.littleEndian));\n          position.push(dataview.getFloat32(PCDheader.points * offset.y + PCDheader.size[1] * i, this.littleEndian));\n          position.push(dataview.getFloat32(PCDheader.points * offset.z + PCDheader.size[2] * i, this.littleEndian));\n        }\n\n        if (offset.rgb !== undefined) {\n          color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 2) / 255.0);\n          color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 1) / 255.0);\n          color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 0) / 255.0);\n        }\n\n        if (offset.normal_x !== undefined) {\n          normal.push(dataview.getFloat32(PCDheader.points * offset.normal_x + PCDheader.size[4] * i, this.littleEndian));\n          normal.push(dataview.getFloat32(PCDheader.points * offset.normal_y + PCDheader.size[5] * i, this.littleEndian));\n          normal.push(dataview.getFloat32(PCDheader.points * offset.normal_z + PCDheader.size[6] * i, this.littleEndian));\n        }\n      }\n    } // binary\n\n\n    if (PCDheader.data === 'binary') {\n      const dataview = new DataView(data, PCDheader.headerLen);\n      const offset = PCDheader.offset;\n\n      for (let i = 0, row = 0; i < PCDheader.points; i++, row += PCDheader.rowSize) {\n        if (offset.x !== undefined) {\n          position.push(dataview.getFloat32(row + offset.x, this.littleEndian));\n          position.push(dataview.getFloat32(row + offset.y, this.littleEndian));\n          position.push(dataview.getFloat32(row + offset.z, this.littleEndian));\n        }\n\n        if (offset.rgb !== undefined) {\n          color.push(dataview.getUint8(row + offset.rgb + 2) / 255.0);\n          color.push(dataview.getUint8(row + offset.rgb + 1) / 255.0);\n          color.push(dataview.getUint8(row + offset.rgb + 0) / 255.0);\n        }\n\n        if (offset.normal_x !== undefined) {\n          normal.push(dataview.getFloat32(row + offset.normal_x, this.littleEndian));\n          normal.push(dataview.getFloat32(row + offset.normal_y, this.littleEndian));\n          normal.push(dataview.getFloat32(row + offset.normal_z, this.littleEndian));\n        }\n      }\n    } // build geometry\n\n\n    const geometry = new BufferGeometry();\n    if (position.length > 0) geometry.setAttribute('position', new Float32BufferAttribute(position, 3));\n    if (normal.length > 0) geometry.setAttribute('normal', new Float32BufferAttribute(normal, 3));\n    if (color.length > 0) geometry.setAttribute('color', new Float32BufferAttribute(color, 3));\n    geometry.computeBoundingSphere(); // build material\n\n    const material = new PointsMaterial({\n      size: 0.005\n    });\n\n    if (color.length > 0) {\n      material.vertexColors = true;\n    } else {\n      material.color.setHex(Math.random() * 0xffffff);\n    } // build point cloud\n\n\n    const mesh = new Points(geometry, material);\n    let name = url.split('').reverse().join('');\n    name = /([^\\/]*)/.exec(name);\n    name = name[1].split('').reverse().join('');\n    mesh.name = name;\n    return mesh;\n  }\n\n}\n\nexport { PCDLoader };\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,UAAjB,EAA6BC,WAA7B,EAA0CC,cAA1C,EAA0DC,sBAA1D,EAAkFC,cAAlF,EAAkGC,MAAlG,QAAgH,OAAhH;;AAEA,MAAMC,SAAN,SAAwBP,MAAxB,CAA+B;EAC7BQ,WAAW,CAACC,OAAD,EAAU;IACnB,MAAMA,OAAN;IACA,KAAKC,YAAL,GAAoB,IAApB;EACD;;EAEDC,IAAI,CAACC,GAAD,EAAMC,MAAN,EAAcC,UAAd,EAA0BC,OAA1B,EAAmC;IACrC,MAAMC,KAAK,GAAG,IAAd;IACA,MAAMC,MAAM,GAAG,IAAIhB,UAAJ,CAAee,KAAK,CAACP,OAArB,CAAf;IACAQ,MAAM,CAACC,OAAP,CAAeF,KAAK,CAACG,IAArB;IACAF,MAAM,CAACG,eAAP,CAAuB,aAAvB;IACAH,MAAM,CAACI,gBAAP,CAAwBL,KAAK,CAACM,aAA9B;IACAL,MAAM,CAACM,kBAAP,CAA0BP,KAAK,CAACQ,eAAhC;IACAP,MAAM,CAACN,IAAP,CAAYC,GAAZ,EAAiB,UAAUa,IAAV,EAAgB;MAC/B,IAAI;QACFZ,MAAM,CAACG,KAAK,CAACU,KAAN,CAAYD,IAAZ,EAAkBb,GAAlB,CAAD,CAAN;MACD,CAFD,CAEE,OAAOe,CAAP,EAAU;QACV,IAAIZ,OAAJ,EAAa;UACXA,OAAO,CAACY,CAAD,CAAP;QACD,CAFD,MAEO;UACLC,OAAO,CAACC,KAAR,CAAcF,CAAd;QACD;;QAEDX,KAAK,CAACP,OAAN,CAAcqB,SAAd,CAAwBlB,GAAxB;MACD;IACF,CAZD,EAYGE,UAZH,EAYeC,OAZf;EAaD;;EAEDW,KAAK,CAACD,IAAD,EAAOb,GAAP,EAAY;IACf;IACA,SAASmB,aAAT,CAAuBC,MAAvB,EAA+BC,SAA/B,EAA0C;MACxC,MAAMC,QAAQ,GAAGF,MAAM,CAACG,MAAxB;MACA,MAAMC,OAAO,GAAG,IAAIC,UAAJ,CAAeJ,SAAf,CAAhB;MACA,IAAIK,KAAK,GAAG,CAAZ;MACA,IAAIC,MAAM,GAAG,CAAb;MACA,IAAIC,IAAJ;MACA,IAAIC,GAAJ;MACA,IAAIC,GAAJ;;MAEA,GAAG;QACDF,IAAI,GAAGR,MAAM,CAACM,KAAK,EAAN,CAAb;;QAEA,IAAIE,IAAI,GAAG,KAAK,CAAhB,EAAmB;UACjBA,IAAI;UACJ,IAAID,MAAM,GAAGC,IAAT,GAAgBP,SAApB,EAA+B,MAAM,IAAIU,KAAJ,CAAU,mCAAV,CAAN;UAC/B,IAAIL,KAAK,GAAGE,IAAR,GAAeN,QAAnB,EAA6B,MAAM,IAAIS,KAAJ,CAAU,yBAAV,CAAN;;UAE7B,GAAG;YACDP,OAAO,CAACG,MAAM,EAAP,CAAP,GAAoBP,MAAM,CAACM,KAAK,EAAN,CAA1B;UACD,CAFD,QAES,EAAEE,IAFX;QAGD,CARD,MAQO;UACLC,GAAG,GAAGD,IAAI,IAAI,CAAd;UACAE,GAAG,GAAGH,MAAM,IAAI,CAACC,IAAI,GAAG,IAAR,KAAiB,CAArB,CAAN,GAAgC,CAAtC;UACA,IAAIF,KAAK,IAAIJ,QAAb,EAAuB,MAAM,IAAIS,KAAJ,CAAU,yBAAV,CAAN;;UAEvB,IAAIF,GAAG,KAAK,CAAZ,EAAe;YACbA,GAAG,IAAIT,MAAM,CAACM,KAAK,EAAN,CAAb;YACA,IAAIA,KAAK,IAAIJ,QAAb,EAAuB,MAAM,IAAIS,KAAJ,CAAU,yBAAV,CAAN;UACxB;;UAEDD,GAAG,IAAIV,MAAM,CAACM,KAAK,EAAN,CAAb;UACA,IAAIC,MAAM,GAAGE,GAAT,GAAe,CAAf,GAAmBR,SAAvB,EAAkC,MAAM,IAAIU,KAAJ,CAAU,mCAAV,CAAN;UAClC,IAAID,GAAG,GAAG,CAAV,EAAa,MAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;UACb,IAAID,GAAG,IAAIH,MAAX,EAAmB,MAAM,IAAII,KAAJ,CAAU,yBAAV,CAAN;;UAEnB,GAAG;YACDP,OAAO,CAACG,MAAM,EAAP,CAAP,GAAoBH,OAAO,CAACM,GAAG,EAAJ,CAA3B;UACD,CAFD,QAES,EAAED,GAAF,GAAQ,CAFjB;QAGD;MACF,CA9BD,QA8BSH,KAAK,GAAGJ,QA9BjB;;MAgCA,OAAOE,OAAP;IACD;;IAED,SAASQ,WAAT,CAAqBnB,IAArB,EAA2B;MACzB,MAAMoB,SAAS,GAAG,EAAlB;MACA,MAAMC,OAAO,GAAGrB,IAAI,CAACsB,MAAL,CAAY,sBAAZ,CAAhB;MACA,MAAMC,OAAO,GAAG,uBAAuBC,IAAvB,CAA4BxB,IAAI,CAACyB,MAAL,CAAYJ,OAAO,GAAG,CAAtB,CAA5B,CAAhB;MACAD,SAAS,CAACpB,IAAV,GAAiBuB,OAAO,CAAC,CAAD,CAAxB;MACAH,SAAS,CAACM,SAAV,GAAsBH,OAAO,CAAC,CAAD,CAAP,CAAWb,MAAX,GAAoBW,OAA1C;MACAD,SAAS,CAACO,GAAV,GAAgB3B,IAAI,CAACyB,MAAL,CAAY,CAAZ,EAAeL,SAAS,CAACM,SAAzB,CAAhB,CANyB,CAM4B;;MAErDN,SAAS,CAACO,GAAV,GAAgBP,SAAS,CAACO,GAAV,CAAcC,OAAd,CAAsB,QAAtB,EAAgC,EAAhC,CAAhB,CARyB,CAQ4B;;MAErDR,SAAS,CAACS,OAAV,GAAoB,gBAAgBL,IAAhB,CAAqBJ,SAAS,CAACO,GAA/B,CAApB;MACAP,SAAS,CAACU,MAAV,GAAmB,eAAeN,IAAf,CAAoBJ,SAAS,CAACO,GAA9B,CAAnB;MACAP,SAAS,CAACW,IAAV,GAAiB,aAAaP,IAAb,CAAkBJ,SAAS,CAACO,GAA5B,CAAjB;MACAP,SAAS,CAACY,IAAV,GAAiB,aAAaR,IAAb,CAAkBJ,SAAS,CAACO,GAA5B,CAAjB;MACAP,SAAS,CAACa,KAAV,GAAkB,cAAcT,IAAd,CAAmBJ,SAAS,CAACO,GAA7B,CAAlB;MACAP,SAAS,CAACc,KAAV,GAAkB,cAAcV,IAAd,CAAmBJ,SAAS,CAACO,GAA7B,CAAlB;MACAP,SAAS,CAACe,MAAV,GAAmB,eAAeX,IAAf,CAAoBJ,SAAS,CAACO,GAA9B,CAAnB;MACAP,SAAS,CAACgB,SAAV,GAAsB,kBAAkBZ,IAAlB,CAAuBJ,SAAS,CAACO,GAAjC,CAAtB;MACAP,SAAS,CAACiB,MAAV,GAAmB,eAAeb,IAAf,CAAoBJ,SAAS,CAACO,GAA9B,CAAnB,CAlByB,CAkB8B;;MAEvD,IAAIP,SAAS,CAACS,OAAV,KAAsB,IAA1B,EAAgCT,SAAS,CAACS,OAAV,GAAoBS,UAAU,CAAClB,SAAS,CAACS,OAAV,CAAkB,CAAlB,CAAD,CAA9B;MAChC,IAAIT,SAAS,CAACU,MAAV,KAAqB,IAAzB,EAA+BV,SAAS,CAACU,MAAV,GAAmBV,SAAS,CAACU,MAAV,CAAiB,CAAjB,EAAoBS,KAApB,CAA0B,GAA1B,CAAnB;MAC/B,IAAInB,SAAS,CAACY,IAAV,KAAmB,IAAvB,EAA6BZ,SAAS,CAACY,IAAV,GAAiBZ,SAAS,CAACY,IAAV,CAAe,CAAf,EAAkBO,KAAlB,CAAwB,GAAxB,CAAjB;MAC7B,IAAInB,SAAS,CAACc,KAAV,KAAoB,IAAxB,EAA8Bd,SAAS,CAACc,KAAV,GAAkBM,QAAQ,CAACpB,SAAS,CAACc,KAAV,CAAgB,CAAhB,CAAD,CAA1B;MAC9B,IAAId,SAAS,CAACe,MAAV,KAAqB,IAAzB,EAA+Bf,SAAS,CAACe,MAAV,GAAmBK,QAAQ,CAACpB,SAAS,CAACe,MAAV,CAAiB,CAAjB,CAAD,CAA3B;MAC/B,IAAIf,SAAS,CAACgB,SAAV,KAAwB,IAA5B,EAAkChB,SAAS,CAACgB,SAAV,GAAsBhB,SAAS,CAACgB,SAAV,CAAoB,CAApB,CAAtB;MAClC,IAAIhB,SAAS,CAACiB,MAAV,KAAqB,IAAzB,EAA+BjB,SAAS,CAACiB,MAAV,GAAmBG,QAAQ,CAACpB,SAAS,CAACiB,MAAV,CAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAA3B;MAC/B,IAAIjB,SAAS,CAACiB,MAAV,KAAqB,IAAzB,EAA+BjB,SAAS,CAACiB,MAAV,GAAmBjB,SAAS,CAACc,KAAV,GAAkBd,SAAS,CAACe,MAA/C;;MAE/B,IAAIf,SAAS,CAACW,IAAV,KAAmB,IAAvB,EAA6B;QAC3BX,SAAS,CAACW,IAAV,GAAiBX,SAAS,CAACW,IAAV,CAAe,CAAf,EAAkBQ,KAAlB,CAAwB,GAAxB,EAA6BE,GAA7B,CAAiC,UAAUC,CAAV,EAAa;UAC7D,OAAOF,QAAQ,CAACE,CAAD,EAAI,EAAJ,CAAf;QACD,CAFgB,CAAjB;MAGD;;MAED,IAAItB,SAAS,CAACa,KAAV,KAAoB,IAAxB,EAA8B;QAC5Bb,SAAS,CAACa,KAAV,GAAkBb,SAAS,CAACa,KAAV,CAAgB,CAAhB,EAAmBM,KAAnB,CAAyB,GAAzB,EAA8BE,GAA9B,CAAkC,UAAUC,CAAV,EAAa;UAC/D,OAAOF,QAAQ,CAACE,CAAD,EAAI,EAAJ,CAAf;QACD,CAFiB,CAAlB;MAGD,CAJD,MAIO;QACLtB,SAAS,CAACa,KAAV,GAAkB,EAAlB;;QAEA,KAAK,IAAIU,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGxB,SAAS,CAACU,MAAV,CAAiBpB,MAArC,EAA6CiC,CAAC,GAAGC,CAAjD,EAAoDD,CAAC,EAArD,EAAyD;UACvDvB,SAAS,CAACa,KAAV,CAAgBY,IAAhB,CAAqB,CAArB;QACD;MACF;;MAEDzB,SAAS,CAAC0B,MAAV,GAAmB,EAAnB;MACA,IAAIC,OAAO,GAAG,CAAd;;MAEA,KAAK,IAAIJ,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGxB,SAAS,CAACU,MAAV,CAAiBpB,MAArC,EAA6CiC,CAAC,GAAGC,CAAjD,EAAoDD,CAAC,EAArD,EAAyD;QACvD,IAAIvB,SAAS,CAACpB,IAAV,KAAmB,OAAvB,EAAgC;UAC9BoB,SAAS,CAAC0B,MAAV,CAAiB1B,SAAS,CAACU,MAAV,CAAiBa,CAAjB,CAAjB,IAAwCA,CAAxC;QACD,CAFD,MAEO;UACLvB,SAAS,CAAC0B,MAAV,CAAiB1B,SAAS,CAACU,MAAV,CAAiBa,CAAjB,CAAjB,IAAwCI,OAAxC;UACAA,OAAO,IAAI3B,SAAS,CAACW,IAAV,CAAeY,CAAf,IAAoBvB,SAAS,CAACa,KAAV,CAAgBU,CAAhB,CAA/B;QACD;MACF,CAzDwB,CAyDvB;;;MAGFvB,SAAS,CAAC4B,OAAV,GAAoBD,OAApB;MACA,OAAO3B,SAAP;IACD;;IAED,MAAM6B,QAAQ,GAAGxE,WAAW,CAACyE,UAAZ,CAAuB,IAAItC,UAAJ,CAAeZ,IAAf,CAAvB,CAAjB,CA9Ge,CA8GgD;;IAE/D,MAAMoB,SAAS,GAAGD,WAAW,CAAC8B,QAAD,CAA7B,CAhHe,CAgH0B;;IAEzC,MAAME,QAAQ,GAAG,EAAjB;IACA,MAAMC,MAAM,GAAG,EAAf;IACA,MAAMC,KAAK,GAAG,EAAd,CApHe,CAoHG;;IAElB,IAAIjC,SAAS,CAACpB,IAAV,KAAmB,OAAvB,EAAgC;MAC9B,MAAM8C,MAAM,GAAG1B,SAAS,CAAC0B,MAAzB;MACA,MAAMQ,OAAO,GAAGL,QAAQ,CAACxB,MAAT,CAAgBL,SAAS,CAACM,SAA1B,CAAhB;MACA,MAAM6B,KAAK,GAAGD,OAAO,CAACf,KAAR,CAAc,IAAd,CAAd;;MAEA,KAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGW,KAAK,CAAC7C,MAA1B,EAAkCiC,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;QAC5C,IAAIY,KAAK,CAACZ,CAAD,CAAL,KAAa,EAAjB,EAAqB;QACrB,MAAMa,IAAI,GAAGD,KAAK,CAACZ,CAAD,CAAL,CAASJ,KAAT,CAAe,GAAf,CAAb;;QAEA,IAAIO,MAAM,CAACJ,CAAP,KAAae,SAAjB,EAA4B;UAC1BN,QAAQ,CAACN,IAAT,CAAcP,UAAU,CAACkB,IAAI,CAACV,MAAM,CAACJ,CAAR,CAAL,CAAxB;UACAS,QAAQ,CAACN,IAAT,CAAcP,UAAU,CAACkB,IAAI,CAACV,MAAM,CAACY,CAAR,CAAL,CAAxB;UACAP,QAAQ,CAACN,IAAT,CAAcP,UAAU,CAACkB,IAAI,CAACV,MAAM,CAACa,CAAR,CAAL,CAAxB;QACD;;QAED,IAAIb,MAAM,CAACc,GAAP,KAAeH,SAAnB,EAA8B;UAC5B,MAAMG,GAAG,GAAGtB,UAAU,CAACkB,IAAI,CAACV,MAAM,CAACc,GAAR,CAAL,CAAtB;UACA,MAAMC,CAAC,GAAGD,GAAG,IAAI,EAAP,GAAY,QAAtB;UACA,MAAME,CAAC,GAAGF,GAAG,IAAI,CAAP,GAAW,QAArB;UACA,MAAMG,CAAC,GAAGH,GAAG,IAAI,CAAP,GAAW,QAArB;UACAP,KAAK,CAACR,IAAN,CAAWgB,CAAC,GAAG,GAAf,EAAoBC,CAAC,GAAG,GAAxB,EAA6BC,CAAC,GAAG,GAAjC;QACD;;QAED,IAAIjB,MAAM,CAACkB,QAAP,KAAoBP,SAAxB,EAAmC;UACjCL,MAAM,CAACP,IAAP,CAAYP,UAAU,CAACkB,IAAI,CAACV,MAAM,CAACkB,QAAR,CAAL,CAAtB;UACAZ,MAAM,CAACP,IAAP,CAAYP,UAAU,CAACkB,IAAI,CAACV,MAAM,CAACmB,QAAR,CAAL,CAAtB;UACAb,MAAM,CAACP,IAAP,CAAYP,UAAU,CAACkB,IAAI,CAACV,MAAM,CAACoB,QAAR,CAAL,CAAtB;QACD;MACF;IACF,CAnJc,CAmJb;IACF;IACA;IACA;;;IAGA,IAAI9C,SAAS,CAACpB,IAAV,KAAmB,mBAAvB,EAA4C;MAC1C,MAAMmE,KAAK,GAAG,IAAIC,WAAJ,CAAgBpE,IAAI,CAACqE,KAAL,CAAWjD,SAAS,CAACM,SAArB,EAAgCN,SAAS,CAACM,SAAV,GAAsB,CAAtD,CAAhB,CAAd;MACA,MAAM4C,cAAc,GAAGH,KAAK,CAAC,CAAD,CAA5B;MACA,MAAMI,gBAAgB,GAAGJ,KAAK,CAAC,CAAD,CAA9B;MACA,MAAMK,YAAY,GAAGlE,aAAa,CAAC,IAAIM,UAAJ,CAAeZ,IAAf,EAAqBoB,SAAS,CAACM,SAAV,GAAsB,CAA3C,EAA8C4C,cAA9C,CAAD,EAAgEC,gBAAhE,CAAlC;MACA,MAAME,QAAQ,GAAG,IAAIC,QAAJ,CAAaF,YAAY,CAACG,MAA1B,CAAjB;MACA,MAAM7B,MAAM,GAAG1B,SAAS,CAAC0B,MAAzB;;MAEA,KAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,SAAS,CAACiB,MAA9B,EAAsCM,CAAC,EAAvC,EAA2C;QACzC,IAAIG,MAAM,CAACJ,CAAP,KAAae,SAAjB,EAA4B;UAC1BN,QAAQ,CAACN,IAAT,CAAc4B,QAAQ,CAACG,UAAT,CAAoBxD,SAAS,CAACiB,MAAV,GAAmBS,MAAM,CAACJ,CAA1B,GAA8BtB,SAAS,CAACW,IAAV,CAAe,CAAf,IAAoBY,CAAtE,EAAyE,KAAK1D,YAA9E,CAAd;UACAkE,QAAQ,CAACN,IAAT,CAAc4B,QAAQ,CAACG,UAAT,CAAoBxD,SAAS,CAACiB,MAAV,GAAmBS,MAAM,CAACY,CAA1B,GAA8BtC,SAAS,CAACW,IAAV,CAAe,CAAf,IAAoBY,CAAtE,EAAyE,KAAK1D,YAA9E,CAAd;UACAkE,QAAQ,CAACN,IAAT,CAAc4B,QAAQ,CAACG,UAAT,CAAoBxD,SAAS,CAACiB,MAAV,GAAmBS,MAAM,CAACa,CAA1B,GAA8BvC,SAAS,CAACW,IAAV,CAAe,CAAf,IAAoBY,CAAtE,EAAyE,KAAK1D,YAA9E,CAAd;QACD;;QAED,IAAI6D,MAAM,CAACc,GAAP,KAAeH,SAAnB,EAA8B;UAC5BJ,KAAK,CAACR,IAAN,CAAW4B,QAAQ,CAACI,QAAT,CAAkBzD,SAAS,CAACiB,MAAV,GAAmBS,MAAM,CAACc,GAA1B,GAAgCxC,SAAS,CAACW,IAAV,CAAe,CAAf,IAAoBY,CAApD,GAAwD,CAA1E,IAA+E,KAA1F;UACAU,KAAK,CAACR,IAAN,CAAW4B,QAAQ,CAACI,QAAT,CAAkBzD,SAAS,CAACiB,MAAV,GAAmBS,MAAM,CAACc,GAA1B,GAAgCxC,SAAS,CAACW,IAAV,CAAe,CAAf,IAAoBY,CAApD,GAAwD,CAA1E,IAA+E,KAA1F;UACAU,KAAK,CAACR,IAAN,CAAW4B,QAAQ,CAACI,QAAT,CAAkBzD,SAAS,CAACiB,MAAV,GAAmBS,MAAM,CAACc,GAA1B,GAAgCxC,SAAS,CAACW,IAAV,CAAe,CAAf,IAAoBY,CAApD,GAAwD,CAA1E,IAA+E,KAA1F;QACD;;QAED,IAAIG,MAAM,CAACkB,QAAP,KAAoBP,SAAxB,EAAmC;UACjCL,MAAM,CAACP,IAAP,CAAY4B,QAAQ,CAACG,UAAT,CAAoBxD,SAAS,CAACiB,MAAV,GAAmBS,MAAM,CAACkB,QAA1B,GAAqC5C,SAAS,CAACW,IAAV,CAAe,CAAf,IAAoBY,CAA7E,EAAgF,KAAK1D,YAArF,CAAZ;UACAmE,MAAM,CAACP,IAAP,CAAY4B,QAAQ,CAACG,UAAT,CAAoBxD,SAAS,CAACiB,MAAV,GAAmBS,MAAM,CAACmB,QAA1B,GAAqC7C,SAAS,CAACW,IAAV,CAAe,CAAf,IAAoBY,CAA7E,EAAgF,KAAK1D,YAArF,CAAZ;UACAmE,MAAM,CAACP,IAAP,CAAY4B,QAAQ,CAACG,UAAT,CAAoBxD,SAAS,CAACiB,MAAV,GAAmBS,MAAM,CAACoB,QAA1B,GAAqC9C,SAAS,CAACW,IAAV,CAAe,CAAf,IAAoBY,CAA7E,EAAgF,KAAK1D,YAArF,CAAZ;QACD;MACF;IACF,CApLc,CAoLb;;;IAGF,IAAImC,SAAS,CAACpB,IAAV,KAAmB,QAAvB,EAAiC;MAC/B,MAAMyE,QAAQ,GAAG,IAAIC,QAAJ,CAAa1E,IAAb,EAAmBoB,SAAS,CAACM,SAA7B,CAAjB;MACA,MAAMoB,MAAM,GAAG1B,SAAS,CAAC0B,MAAzB;;MAEA,KAAK,IAAIH,CAAC,GAAG,CAAR,EAAWmC,GAAG,GAAG,CAAtB,EAAyBnC,CAAC,GAAGvB,SAAS,CAACiB,MAAvC,EAA+CM,CAAC,IAAImC,GAAG,IAAI1D,SAAS,CAAC4B,OAArE,EAA8E;QAC5E,IAAIF,MAAM,CAACJ,CAAP,KAAae,SAAjB,EAA4B;UAC1BN,QAAQ,CAACN,IAAT,CAAc4B,QAAQ,CAACG,UAAT,CAAoBE,GAAG,GAAGhC,MAAM,CAACJ,CAAjC,EAAoC,KAAKzD,YAAzC,CAAd;UACAkE,QAAQ,CAACN,IAAT,CAAc4B,QAAQ,CAACG,UAAT,CAAoBE,GAAG,GAAGhC,MAAM,CAACY,CAAjC,EAAoC,KAAKzE,YAAzC,CAAd;UACAkE,QAAQ,CAACN,IAAT,CAAc4B,QAAQ,CAACG,UAAT,CAAoBE,GAAG,GAAGhC,MAAM,CAACa,CAAjC,EAAoC,KAAK1E,YAAzC,CAAd;QACD;;QAED,IAAI6D,MAAM,CAACc,GAAP,KAAeH,SAAnB,EAA8B;UAC5BJ,KAAK,CAACR,IAAN,CAAW4B,QAAQ,CAACI,QAAT,CAAkBC,GAAG,GAAGhC,MAAM,CAACc,GAAb,GAAmB,CAArC,IAA0C,KAArD;UACAP,KAAK,CAACR,IAAN,CAAW4B,QAAQ,CAACI,QAAT,CAAkBC,GAAG,GAAGhC,MAAM,CAACc,GAAb,GAAmB,CAArC,IAA0C,KAArD;UACAP,KAAK,CAACR,IAAN,CAAW4B,QAAQ,CAACI,QAAT,CAAkBC,GAAG,GAAGhC,MAAM,CAACc,GAAb,GAAmB,CAArC,IAA0C,KAArD;QACD;;QAED,IAAId,MAAM,CAACkB,QAAP,KAAoBP,SAAxB,EAAmC;UACjCL,MAAM,CAACP,IAAP,CAAY4B,QAAQ,CAACG,UAAT,CAAoBE,GAAG,GAAGhC,MAAM,CAACkB,QAAjC,EAA2C,KAAK/E,YAAhD,CAAZ;UACAmE,MAAM,CAACP,IAAP,CAAY4B,QAAQ,CAACG,UAAT,CAAoBE,GAAG,GAAGhC,MAAM,CAACmB,QAAjC,EAA2C,KAAKhF,YAAhD,CAAZ;UACAmE,MAAM,CAACP,IAAP,CAAY4B,QAAQ,CAACG,UAAT,CAAoBE,GAAG,GAAGhC,MAAM,CAACoB,QAAjC,EAA2C,KAAKjF,YAAhD,CAAZ;QACD;MACF;IACF,CA9Mc,CA8Mb;;;IAGF,MAAM8F,QAAQ,GAAG,IAAIrG,cAAJ,EAAjB;IACA,IAAIyE,QAAQ,CAACzC,MAAT,GAAkB,CAAtB,EAAyBqE,QAAQ,CAACC,YAAT,CAAsB,UAAtB,EAAkC,IAAIrG,sBAAJ,CAA2BwE,QAA3B,EAAqC,CAArC,CAAlC;IACzB,IAAIC,MAAM,CAAC1C,MAAP,GAAgB,CAApB,EAAuBqE,QAAQ,CAACC,YAAT,CAAsB,QAAtB,EAAgC,IAAIrG,sBAAJ,CAA2ByE,MAA3B,EAAmC,CAAnC,CAAhC;IACvB,IAAIC,KAAK,CAAC3C,MAAN,GAAe,CAAnB,EAAsBqE,QAAQ,CAACC,YAAT,CAAsB,OAAtB,EAA+B,IAAIrG,sBAAJ,CAA2B0E,KAA3B,EAAkC,CAAlC,CAA/B;IACtB0B,QAAQ,CAACE,qBAAT,GArNe,CAqNmB;;IAElC,MAAMC,QAAQ,GAAG,IAAItG,cAAJ,CAAmB;MAClCmD,IAAI,EAAE;IAD4B,CAAnB,CAAjB;;IAIA,IAAIsB,KAAK,CAAC3C,MAAN,GAAe,CAAnB,EAAsB;MACpBwE,QAAQ,CAACC,YAAT,GAAwB,IAAxB;IACD,CAFD,MAEO;MACLD,QAAQ,CAAC7B,KAAT,CAAe+B,MAAf,CAAsBC,IAAI,CAACC,MAAL,KAAgB,QAAtC;IACD,CA/Nc,CA+Nb;;;IAGF,MAAMC,IAAI,GAAG,IAAI1G,MAAJ,CAAWkG,QAAX,EAAqBG,QAArB,CAAb;IACA,IAAIM,IAAI,GAAGrG,GAAG,CAACoD,KAAJ,CAAU,EAAV,EAAckD,OAAd,GAAwBC,IAAxB,CAA6B,EAA7B,CAAX;IACAF,IAAI,GAAG,WAAWhE,IAAX,CAAgBgE,IAAhB,CAAP;IACAA,IAAI,GAAGA,IAAI,CAAC,CAAD,CAAJ,CAAQjD,KAAR,CAAc,EAAd,EAAkBkD,OAAlB,GAA4BC,IAA5B,CAAiC,EAAjC,CAAP;IACAH,IAAI,CAACC,IAAL,GAAYA,IAAZ;IACA,OAAOD,IAAP;EACD;;AApQ4B;;AAwQ/B,SAASzG,SAAT"},"metadata":{},"sourceType":"module"}