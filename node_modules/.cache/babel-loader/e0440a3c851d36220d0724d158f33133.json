{"ast":null,"code":"import { Vector3, Matrix4 } from 'three';\nconst inverseProjectionMatrix = new Matrix4();\n\nclass Frustum {\n  constructor(data) {\n    data = data || {};\n    this.vertices = {\n      near: [new Vector3(), new Vector3(), new Vector3(), new Vector3()],\n      far: [new Vector3(), new Vector3(), new Vector3(), new Vector3()]\n    };\n\n    if (data.projectionMatrix !== undefined) {\n      this.setFromProjectionMatrix(data.projectionMatrix, data.maxFar || 10000);\n    }\n  }\n\n  setFromProjectionMatrix(projectionMatrix, maxFar) {\n    const isOrthographic = projectionMatrix.elements[2 * 4 + 3] === 0;\n    inverseProjectionMatrix.copy(projectionMatrix).invert(); // 3 --- 0  vertices.near/far order\n    // |     |\n    // 2 --- 1\n    // clip space spans from [-1, 1]\n\n    this.vertices.near[0].set(1, 1, -1);\n    this.vertices.near[1].set(1, -1, -1);\n    this.vertices.near[2].set(-1, -1, -1);\n    this.vertices.near[3].set(-1, 1, -1);\n    this.vertices.near.forEach(v => {\n      v.applyMatrix4(inverseProjectionMatrix);\n    });\n    this.vertices.far[0].set(1, 1, 1);\n    this.vertices.far[1].set(1, -1, 1);\n    this.vertices.far[2].set(-1, -1, 1);\n    this.vertices.far[3].set(-1, 1, 1);\n    this.vertices.far.forEach(v => {\n      v.applyMatrix4(inverseProjectionMatrix);\n      const absZ = Math.abs(v.z);\n\n      if (isOrthographic) {\n        v.z *= Math.min(maxFar / absZ, 1.0);\n      } else {\n        v.multiplyScalar(Math.min(maxFar / absZ, 1.0));\n      }\n    });\n    return this.vertices;\n  }\n\n  split(breaks, target) {\n    while (breaks.length > target.length) {\n      target.push(new Frustum());\n    }\n\n    target.length = breaks.length;\n\n    for (let i = 0; i < breaks.length; i++) {\n      const cascade = target[i];\n\n      if (i === 0) {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.near[j].copy(this.vertices.near[j]);\n        }\n      } else {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.near[j].lerpVectors(this.vertices.near[j], this.vertices.far[j], breaks[i - 1]);\n        }\n      }\n\n      if (i === breaks - 1) {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.far[j].copy(this.vertices.far[j]);\n        }\n      } else {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.far[j].lerpVectors(this.vertices.near[j], this.vertices.far[j], breaks[i]);\n        }\n      }\n    }\n  }\n\n  toSpace(cameraMatrix, target) {\n    for (let i = 0; i < 4; i++) {\n      target.vertices.near[i].copy(this.vertices.near[i]).applyMatrix4(cameraMatrix);\n      target.vertices.far[i].copy(this.vertices.far[i]).applyMatrix4(cameraMatrix);\n    }\n  }\n\n}\n\nexport default Frustum;","map":{"version":3,"names":["Vector3","Matrix4","inverseProjectionMatrix","Frustum","constructor","data","vertices","near","far","projectionMatrix","undefined","setFromProjectionMatrix","maxFar","isOrthographic","elements","copy","invert","set","forEach","v","applyMatrix4","absZ","Math","abs","z","min","multiplyScalar","split","breaks","target","length","push","i","cascade","j","lerpVectors","toSpace","cameraMatrix"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/three-stdlib/csm/Frustum.js"],"sourcesContent":["import { Vector3, Matrix4 } from 'three';\n\nconst inverseProjectionMatrix = new Matrix4();\nclass Frustum {\n  constructor(data) {\n    data = data || {};\n    this.vertices = {\n      near: [new Vector3(), new Vector3(), new Vector3(), new Vector3()],\n      far: [new Vector3(), new Vector3(), new Vector3(), new Vector3()]\n    };\n\n    if (data.projectionMatrix !== undefined) {\n      this.setFromProjectionMatrix(data.projectionMatrix, data.maxFar || 10000);\n    }\n  }\n\n  setFromProjectionMatrix(projectionMatrix, maxFar) {\n    const isOrthographic = projectionMatrix.elements[2 * 4 + 3] === 0;\n    inverseProjectionMatrix.copy(projectionMatrix).invert(); // 3 --- 0  vertices.near/far order\n    // |     |\n    // 2 --- 1\n    // clip space spans from [-1, 1]\n\n    this.vertices.near[0].set(1, 1, -1);\n    this.vertices.near[1].set(1, -1, -1);\n    this.vertices.near[2].set(-1, -1, -1);\n    this.vertices.near[3].set(-1, 1, -1);\n    this.vertices.near.forEach(v => {\n      v.applyMatrix4(inverseProjectionMatrix);\n    });\n    this.vertices.far[0].set(1, 1, 1);\n    this.vertices.far[1].set(1, -1, 1);\n    this.vertices.far[2].set(-1, -1, 1);\n    this.vertices.far[3].set(-1, 1, 1);\n    this.vertices.far.forEach(v => {\n      v.applyMatrix4(inverseProjectionMatrix);\n      const absZ = Math.abs(v.z);\n\n      if (isOrthographic) {\n        v.z *= Math.min(maxFar / absZ, 1.0);\n      } else {\n        v.multiplyScalar(Math.min(maxFar / absZ, 1.0));\n      }\n    });\n    return this.vertices;\n  }\n\n  split(breaks, target) {\n    while (breaks.length > target.length) {\n      target.push(new Frustum());\n    }\n\n    target.length = breaks.length;\n\n    for (let i = 0; i < breaks.length; i++) {\n      const cascade = target[i];\n\n      if (i === 0) {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.near[j].copy(this.vertices.near[j]);\n        }\n      } else {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.near[j].lerpVectors(this.vertices.near[j], this.vertices.far[j], breaks[i - 1]);\n        }\n      }\n\n      if (i === breaks - 1) {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.far[j].copy(this.vertices.far[j]);\n        }\n      } else {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.far[j].lerpVectors(this.vertices.near[j], this.vertices.far[j], breaks[i]);\n        }\n      }\n    }\n  }\n\n  toSpace(cameraMatrix, target) {\n    for (let i = 0; i < 4; i++) {\n      target.vertices.near[i].copy(this.vertices.near[i]).applyMatrix4(cameraMatrix);\n      target.vertices.far[i].copy(this.vertices.far[i]).applyMatrix4(cameraMatrix);\n    }\n  }\n\n}\n\nexport default Frustum;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}