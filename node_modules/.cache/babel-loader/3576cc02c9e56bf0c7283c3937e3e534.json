{"ast":null,"code":"import * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { SimplexNoise } from 'three-stdlib';\nconst CameraShake = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    intensity = 1,\n    decay,\n    decayRate = 0.65,\n    maxYaw = 0.1,\n    maxPitch = 0.1,\n    maxRoll = 0.1,\n    yawFrequency = 0.1,\n    pitchFrequency = 0.1,\n    rollFrequency = 0.1\n  } = _ref;\n  const camera = useThree(state => state.camera);\n  const defaultControls = useThree(state => state.controls);\n  const intensityRef = React.useRef(intensity);\n  const initialRotation = React.useRef(camera.rotation.clone());\n  const [yawNoise] = React.useState(() => new SimplexNoise());\n  const [pitchNoise] = React.useState(() => new SimplexNoise());\n  const [rollNoise] = React.useState(() => new SimplexNoise());\n\n  const constrainIntensity = () => {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n\n  React.useImperativeHandle(ref, () => ({\n    getIntensity: () => intensityRef.current,\n    setIntensity: val => {\n      intensityRef.current = val;\n      constrainIntensity();\n    }\n  }), []);\n  React.useEffect(() => {\n    if (defaultControls) {\n      const callback = () => void (initialRotation.current = camera.rotation.clone());\n\n      defaultControls.addEventListener('change', callback);\n      callback();\n      return () => void defaultControls.removeEventListener('change', callback);\n    }\n  }, [camera, defaultControls]);\n  useFrame((state, delta) => {\n    const shake = Math.pow(intensityRef.current, 2);\n    const yaw = maxYaw * shake * yawNoise.noise(state.clock.elapsedTime * yawFrequency, 1);\n    const pitch = maxPitch * shake * pitchNoise.noise(state.clock.elapsedTime * pitchFrequency, 1);\n    const roll = maxRoll * shake * rollNoise.noise(state.clock.elapsedTime * rollFrequency, 1);\n    camera.rotation.set(initialRotation.current.x + pitch, initialRotation.current.y + yaw, initialRotation.current.z + roll);\n\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\nexport { CameraShake };","map":{"version":3,"names":["React","useThree","useFrame","SimplexNoise","CameraShake","forwardRef","ref","intensity","decay","decayRate","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","camera","state","defaultControls","controls","intensityRef","useRef","initialRotation","rotation","clone","yawNoise","useState","pitchNoise","rollNoise","constrainIntensity","current","useImperativeHandle","getIntensity","setIntensity","val","useEffect","callback","addEventListener","removeEventListener","delta","shake","Math","pow","yaw","noise","clock","elapsedTime","pitch","roll","set","x","y","z"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/@react-three/drei/core/CameraShake.js"],"sourcesContent":["import * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { SimplexNoise } from 'three-stdlib';\n\nconst CameraShake = /*#__PURE__*/React.forwardRef(({\n  intensity = 1,\n  decay,\n  decayRate = 0.65,\n  maxYaw = 0.1,\n  maxPitch = 0.1,\n  maxRoll = 0.1,\n  yawFrequency = 0.1,\n  pitchFrequency = 0.1,\n  rollFrequency = 0.1\n}, ref) => {\n  const camera = useThree(state => state.camera);\n  const defaultControls = useThree(state => state.controls);\n  const intensityRef = React.useRef(intensity);\n  const initialRotation = React.useRef(camera.rotation.clone());\n  const [yawNoise] = React.useState(() => new SimplexNoise());\n  const [pitchNoise] = React.useState(() => new SimplexNoise());\n  const [rollNoise] = React.useState(() => new SimplexNoise());\n\n  const constrainIntensity = () => {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n\n  React.useImperativeHandle(ref, () => ({\n    getIntensity: () => intensityRef.current,\n    setIntensity: val => {\n      intensityRef.current = val;\n      constrainIntensity();\n    }\n  }), []);\n  React.useEffect(() => {\n    if (defaultControls) {\n      const callback = () => void (initialRotation.current = camera.rotation.clone());\n\n      defaultControls.addEventListener('change', callback);\n      callback();\n      return () => void defaultControls.removeEventListener('change', callback);\n    }\n  }, [camera, defaultControls]);\n  useFrame((state, delta) => {\n    const shake = Math.pow(intensityRef.current, 2);\n    const yaw = maxYaw * shake * yawNoise.noise(state.clock.elapsedTime * yawFrequency, 1);\n    const pitch = maxPitch * shake * pitchNoise.noise(state.clock.elapsedTime * pitchFrequency, 1);\n    const roll = maxRoll * shake * rollNoise.noise(state.clock.elapsedTime * rollFrequency, 1);\n    camera.rotation.set(initialRotation.current.x + pitch, initialRotation.current.y + yaw, initialRotation.current.z + roll);\n\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\n\nexport { CameraShake };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}