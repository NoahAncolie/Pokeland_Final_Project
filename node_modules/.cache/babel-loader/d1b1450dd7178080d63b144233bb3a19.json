{"ast":null,"code":"import Node from '../core/Node.js';\nimport ConstNode from '../core/ConstNode.js';\nimport UVNode from '../accessors/UVNode.js';\nimport MathNode from '../math/MathNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport SplitNode from './SplitNode.js';\nimport JoinNode from './JoinNode.js';\n\nclass SpriteSheetUVNode extends Node {\n  constructor(countNode) {\n    let uvNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new UVNode();\n    let frameNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new ConstNode(0);\n    super('vec2');\n    this.countNode = countNode;\n    this.uvNode = uvNode;\n    this.frameNode = frameNode;\n  }\n\n  generate(builder) {\n    const count = this.countNode;\n    const uv = this.uvNode;\n    const frame = this.frameNode;\n    const one = new ConstNode(1);\n    const width = new SplitNode(count, 'x');\n    const height = new SplitNode(count, 'y');\n    const total = new OperatorNode('*', width, height);\n    const roundFrame = new MathNode(MathNode.FLOOR, new MathNode(MathNode.MOD, frame, total));\n    const frameNum = new OperatorNode('+', roundFrame, one);\n    const cell = new MathNode(MathNode.MOD, roundFrame, width);\n    const row = new MathNode(MathNode.CEIL, new OperatorNode('/', frameNum, width));\n    const rowInv = new OperatorNode('-', height, row);\n    const scale = new OperatorNode('/', one, count);\n    const uvFrameOffset = new JoinNode([new OperatorNode('*', cell, new SplitNode(scale, 'x')), new OperatorNode('*', rowInv, new SplitNode(scale, 'y'))]);\n    const uvScale = new OperatorNode('*', uv, scale);\n    const uvFrame = new OperatorNode('+', uvScale, uvFrameOffset);\n    return uvFrame.build(builder, this.getNodeType(builder));\n  }\n\n}\n\nexport default SpriteSheetUVNode;","map":{"version":3,"names":["Node","ConstNode","UVNode","MathNode","OperatorNode","SplitNode","JoinNode","SpriteSheetUVNode","constructor","countNode","uvNode","frameNode","generate","builder","count","uv","frame","one","width","height","total","roundFrame","FLOOR","MOD","frameNum","cell","row","CEIL","rowInv","scale","uvFrameOffset","uvScale","uvFrame","build","getNodeType"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/three-stdlib/nodes/utils/SpriteSheetUVNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport ConstNode from '../core/ConstNode.js';\nimport UVNode from '../accessors/UVNode.js';\nimport MathNode from '../math/MathNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport SplitNode from './SplitNode.js';\nimport JoinNode from './JoinNode.js';\n\nclass SpriteSheetUVNode extends Node {\n  constructor(countNode, uvNode = new UVNode(), frameNode = new ConstNode(0)) {\n    super('vec2');\n    this.countNode = countNode;\n    this.uvNode = uvNode;\n    this.frameNode = frameNode;\n  }\n\n  generate(builder) {\n    const count = this.countNode;\n    const uv = this.uvNode;\n    const frame = this.frameNode;\n    const one = new ConstNode(1);\n    const width = new SplitNode(count, 'x');\n    const height = new SplitNode(count, 'y');\n    const total = new OperatorNode('*', width, height);\n    const roundFrame = new MathNode(MathNode.FLOOR, new MathNode(MathNode.MOD, frame, total));\n    const frameNum = new OperatorNode('+', roundFrame, one);\n    const cell = new MathNode(MathNode.MOD, roundFrame, width);\n    const row = new MathNode(MathNode.CEIL, new OperatorNode('/', frameNum, width));\n    const rowInv = new OperatorNode('-', height, row);\n    const scale = new OperatorNode('/', one, count);\n    const uvFrameOffset = new JoinNode([new OperatorNode('*', cell, new SplitNode(scale, 'x')), new OperatorNode('*', rowInv, new SplitNode(scale, 'y'))]);\n    const uvScale = new OperatorNode('*', uv, scale);\n    const uvFrame = new OperatorNode('+', uvScale, uvFrameOffset);\n    return uvFrame.build(builder, this.getNodeType(builder));\n  }\n\n}\n\nexport default SpriteSheetUVNode;\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,iBAAjB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,QAAP,MAAqB,eAArB;;AAEA,MAAMC,iBAAN,SAAgCP,IAAhC,CAAqC;EACnCQ,WAAW,CAACC,SAAD,EAAiE;IAAA,IAArDC,MAAqD,uEAA5C,IAAIR,MAAJ,EAA4C;IAAA,IAA9BS,SAA8B,uEAAlB,IAAIV,SAAJ,CAAc,CAAd,CAAkB;IAC1E,MAAM,MAAN;IACA,KAAKQ,SAAL,GAAiBA,SAAjB;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,SAAL,GAAiBA,SAAjB;EACD;;EAEDC,QAAQ,CAACC,OAAD,EAAU;IAChB,MAAMC,KAAK,GAAG,KAAKL,SAAnB;IACA,MAAMM,EAAE,GAAG,KAAKL,MAAhB;IACA,MAAMM,KAAK,GAAG,KAAKL,SAAnB;IACA,MAAMM,GAAG,GAAG,IAAIhB,SAAJ,CAAc,CAAd,CAAZ;IACA,MAAMiB,KAAK,GAAG,IAAIb,SAAJ,CAAcS,KAAd,EAAqB,GAArB,CAAd;IACA,MAAMK,MAAM,GAAG,IAAId,SAAJ,CAAcS,KAAd,EAAqB,GAArB,CAAf;IACA,MAAMM,KAAK,GAAG,IAAIhB,YAAJ,CAAiB,GAAjB,EAAsBc,KAAtB,EAA6BC,MAA7B,CAAd;IACA,MAAME,UAAU,GAAG,IAAIlB,QAAJ,CAAaA,QAAQ,CAACmB,KAAtB,EAA6B,IAAInB,QAAJ,CAAaA,QAAQ,CAACoB,GAAtB,EAA2BP,KAA3B,EAAkCI,KAAlC,CAA7B,CAAnB;IACA,MAAMI,QAAQ,GAAG,IAAIpB,YAAJ,CAAiB,GAAjB,EAAsBiB,UAAtB,EAAkCJ,GAAlC,CAAjB;IACA,MAAMQ,IAAI,GAAG,IAAItB,QAAJ,CAAaA,QAAQ,CAACoB,GAAtB,EAA2BF,UAA3B,EAAuCH,KAAvC,CAAb;IACA,MAAMQ,GAAG,GAAG,IAAIvB,QAAJ,CAAaA,QAAQ,CAACwB,IAAtB,EAA4B,IAAIvB,YAAJ,CAAiB,GAAjB,EAAsBoB,QAAtB,EAAgCN,KAAhC,CAA5B,CAAZ;IACA,MAAMU,MAAM,GAAG,IAAIxB,YAAJ,CAAiB,GAAjB,EAAsBe,MAAtB,EAA8BO,GAA9B,CAAf;IACA,MAAMG,KAAK,GAAG,IAAIzB,YAAJ,CAAiB,GAAjB,EAAsBa,GAAtB,EAA2BH,KAA3B,CAAd;IACA,MAAMgB,aAAa,GAAG,IAAIxB,QAAJ,CAAa,CAAC,IAAIF,YAAJ,CAAiB,GAAjB,EAAsBqB,IAAtB,EAA4B,IAAIpB,SAAJ,CAAcwB,KAAd,EAAqB,GAArB,CAA5B,CAAD,EAAyD,IAAIzB,YAAJ,CAAiB,GAAjB,EAAsBwB,MAAtB,EAA8B,IAAIvB,SAAJ,CAAcwB,KAAd,EAAqB,GAArB,CAA9B,CAAzD,CAAb,CAAtB;IACA,MAAME,OAAO,GAAG,IAAI3B,YAAJ,CAAiB,GAAjB,EAAsBW,EAAtB,EAA0Bc,KAA1B,CAAhB;IACA,MAAMG,OAAO,GAAG,IAAI5B,YAAJ,CAAiB,GAAjB,EAAsB2B,OAAtB,EAA+BD,aAA/B,CAAhB;IACA,OAAOE,OAAO,CAACC,KAAR,CAAcpB,OAAd,EAAuB,KAAKqB,WAAL,CAAiBrB,OAAjB,CAAvB,CAAP;EACD;;AA1BkC;;AA8BrC,eAAeN,iBAAf"},"metadata":{},"sourceType":"module"}