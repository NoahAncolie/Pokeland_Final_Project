{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector2, WebGLRenderTarget, Clock, LinearFilter, RGBAFormat } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass, ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n  constructor(renderer, renderTarget) {\n    _defineProperty(this, \"renderer\", void 0);\n\n    _defineProperty(this, \"_pixelRatio\", void 0);\n\n    _defineProperty(this, \"_width\", void 0);\n\n    _defineProperty(this, \"_height\", void 0);\n\n    _defineProperty(this, \"renderTarget1\", void 0);\n\n    _defineProperty(this, \"renderTarget2\", void 0);\n\n    _defineProperty(this, \"writeBuffer\", void 0);\n\n    _defineProperty(this, \"readBuffer\", void 0);\n\n    _defineProperty(this, \"renderToScreen\", void 0);\n\n    _defineProperty(this, \"passes\", []);\n\n    _defineProperty(this, \"copyPass\", void 0);\n\n    _defineProperty(this, \"clock\", void 0);\n\n    this.renderer = renderer;\n\n    if (renderTarget === undefined) {\n      const parameters = {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        format: RGBAFormat\n      };\n      const size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n      renderTarget.texture.name = 'EffectComposer.rt1';\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = 'EffectComposer.rt2';\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true; // dependencies\n\n    if (CopyShader === undefined) {\n      console.error('THREE.EffectComposer relies on CopyShader');\n    }\n\n    if (ShaderPass === undefined) {\n      console.error('THREE.EffectComposer relies on ShaderPass');\n    }\n\n    this.copyPass = new ShaderPass(CopyShader);\n    this.clock = new Clock();\n  }\n\n  swapBuffers() {\n    const tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  }\n\n  addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  removePass(pass) {\n    const index = this.passes.indexOf(pass);\n\n    if (index !== -1) {\n      this.passes.splice(index, 1);\n    }\n  }\n\n  isLastEnabledPass(passIndex) {\n    for (let i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  render(deltaTime) {\n    // deltaTime value is in seconds\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n\n    const currentRenderTarget = this.renderer.getRenderTarget();\n    let maskActive = false;\n    const il = this.passes.length;\n\n    for (let i = 0; i < il; i++) {\n      const pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          const context = this.renderer.getContext();\n          const stencil = this.renderer.state.buffers.stencil; //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime); //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n\n    this.renderer.setRenderTarget(currentRenderTarget);\n  }\n\n  reset(renderTarget) {\n    if (renderTarget === undefined) {\n      const size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  }\n\n  setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    const effectiveWidth = this._width * this._pixelRatio;\n    const effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n    for (let i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  }\n\n  setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n\n}\n\nexport { EffectComposer };","map":{"version":3,"names":["_defineProperty","Vector2","WebGLRenderTarget","Clock","LinearFilter","RGBAFormat","CopyShader","ShaderPass","MaskPass","ClearMaskPass","EffectComposer","constructor","renderer","renderTarget","undefined","parameters","minFilter","magFilter","format","size","getSize","_pixelRatio","getPixelRatio","_width","width","_height","height","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","console","error","copyPass","clock","swapBuffers","tmp","addPass","pass","passes","push","setSize","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","i","length","enabled","render","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","setRenderTarget","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio"],"sources":["/Users/paolucciloic/Desktop/pokemon-projet-final/Pokeland_Final_Project/node_modules/three-stdlib/postprocessing/EffectComposer.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector2, WebGLRenderTarget, Clock, LinearFilter, RGBAFormat } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass, ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n  constructor(renderer, renderTarget) {\n    _defineProperty(this, \"renderer\", void 0);\n\n    _defineProperty(this, \"_pixelRatio\", void 0);\n\n    _defineProperty(this, \"_width\", void 0);\n\n    _defineProperty(this, \"_height\", void 0);\n\n    _defineProperty(this, \"renderTarget1\", void 0);\n\n    _defineProperty(this, \"renderTarget2\", void 0);\n\n    _defineProperty(this, \"writeBuffer\", void 0);\n\n    _defineProperty(this, \"readBuffer\", void 0);\n\n    _defineProperty(this, \"renderToScreen\", void 0);\n\n    _defineProperty(this, \"passes\", []);\n\n    _defineProperty(this, \"copyPass\", void 0);\n\n    _defineProperty(this, \"clock\", void 0);\n\n    this.renderer = renderer;\n\n    if (renderTarget === undefined) {\n      const parameters = {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        format: RGBAFormat\n      };\n      const size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n      renderTarget.texture.name = 'EffectComposer.rt1';\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = 'EffectComposer.rt2';\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true; // dependencies\n\n    if (CopyShader === undefined) {\n      console.error('THREE.EffectComposer relies on CopyShader');\n    }\n\n    if (ShaderPass === undefined) {\n      console.error('THREE.EffectComposer relies on ShaderPass');\n    }\n\n    this.copyPass = new ShaderPass(CopyShader);\n    this.clock = new Clock();\n  }\n\n  swapBuffers() {\n    const tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  }\n\n  addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  removePass(pass) {\n    const index = this.passes.indexOf(pass);\n\n    if (index !== -1) {\n      this.passes.splice(index, 1);\n    }\n  }\n\n  isLastEnabledPass(passIndex) {\n    for (let i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  render(deltaTime) {\n    // deltaTime value is in seconds\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n\n    const currentRenderTarget = this.renderer.getRenderTarget();\n    let maskActive = false;\n    const il = this.passes.length;\n\n    for (let i = 0; i < il; i++) {\n      const pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          const context = this.renderer.getContext();\n          const stencil = this.renderer.state.buffers.stencil; //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime); //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n\n    this.renderer.setRenderTarget(currentRenderTarget);\n  }\n\n  reset(renderTarget) {\n    if (renderTarget === undefined) {\n      const size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  }\n\n  setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    const effectiveWidth = this._width * this._pixelRatio;\n    const effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n    for (let i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  }\n\n  setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n\n}\n\nexport { EffectComposer };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}