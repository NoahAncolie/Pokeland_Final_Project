{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport Node from '../core/Node.js';\nimport { ShaderNode, sub, mul, pow, vec3, lessThanEqual, mix, join } from '../ShaderNode.js';\nimport { LinearEncoding, sRGBEncoding } from 'three';\nconst LinearToLinear = new ShaderNode(inputs => {\n  return inputs.value;\n});\nconst LinearTosRGB = new ShaderNode(inputs => {\n  const {\n    value\n  } = inputs;\n  const rgb = value.rgb;\n  const a = sub(mul(pow(value.rgb, vec3(0.41666)), 1.055), vec3(0.055));\n  const b = mul(rgb, 12.92);\n  const factor = vec3(lessThanEqual(rgb, vec3(0.0031308)));\n  const rgbResult = mix(a, b, factor);\n  return join(rgbResult.r, rgbResult.g, rgbResult.b, value.a);\n});\nconst EncodingLib = {\n  LinearToLinear,\n  LinearTosRGB\n};\n\nclass ColorSpaceNode extends Node {\n  constructor(method, node) {\n    super('vec4');\n    this.method = method;\n    this.node = node;\n  }\n\n  fromEncoding(encoding) {\n    let method = null;\n\n    if (encoding === LinearEncoding) {\n      method = 'Linear';\n    } else if (encoding === sRGBEncoding) {\n      method = 'sRGB';\n    }\n\n    this.method = 'LinearTo' + method;\n    return this;\n  }\n\n  generate(builder) {\n    const type = this.getNodeType(builder);\n    const method = this.method;\n    const node = this.node;\n\n    if (method !== ColorSpaceNode.LINEAR_TO_LINEAR) {\n      const encodingFunctionNode = EncodingLib[method];\n      return encodingFunctionNode({\n        value: node\n      }).build(builder, type);\n    } else {\n      return node.build(builder, type);\n    }\n  }\n\n}\n\n_defineProperty(ColorSpaceNode, \"LINEAR_TO_LINEAR\", 'LinearToLinear');\n\n_defineProperty(ColorSpaceNode, \"LINEAR_TO_SRGB\", 'LinearTosRGB');\n\nexport default ColorSpaceNode;\nexport { LinearToLinear, LinearTosRGB };","map":{"version":3,"names":["_defineProperty","Node","ShaderNode","sub","mul","pow","vec3","lessThanEqual","mix","join","LinearEncoding","sRGBEncoding","LinearToLinear","inputs","value","LinearTosRGB","rgb","a","b","factor","rgbResult","r","g","EncodingLib","ColorSpaceNode","constructor","method","node","fromEncoding","encoding","generate","builder","type","getNodeType","LINEAR_TO_LINEAR","encodingFunctionNode","build"],"sources":["/home/odin/Desktop/THPâ˜ /Developpeur/Final_Project/pokeland/node_modules/three-stdlib/nodes/display/ColorSpaceNode.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport Node from '../core/Node.js';\nimport { ShaderNode, sub, mul, pow, vec3, lessThanEqual, mix, join } from '../ShaderNode.js';\nimport { LinearEncoding, sRGBEncoding } from 'three';\n\nconst LinearToLinear = new ShaderNode(inputs => {\n  return inputs.value;\n});\nconst LinearTosRGB = new ShaderNode(inputs => {\n  const {\n    value\n  } = inputs;\n  const rgb = value.rgb;\n  const a = sub(mul(pow(value.rgb, vec3(0.41666)), 1.055), vec3(0.055));\n  const b = mul(rgb, 12.92);\n  const factor = vec3(lessThanEqual(rgb, vec3(0.0031308)));\n  const rgbResult = mix(a, b, factor);\n  return join(rgbResult.r, rgbResult.g, rgbResult.b, value.a);\n});\nconst EncodingLib = {\n  LinearToLinear,\n  LinearTosRGB\n};\n\nclass ColorSpaceNode extends Node {\n  constructor(method, node) {\n    super('vec4');\n    this.method = method;\n    this.node = node;\n  }\n\n  fromEncoding(encoding) {\n    let method = null;\n\n    if (encoding === LinearEncoding) {\n      method = 'Linear';\n    } else if (encoding === sRGBEncoding) {\n      method = 'sRGB';\n    }\n\n    this.method = 'LinearTo' + method;\n    return this;\n  }\n\n  generate(builder) {\n    const type = this.getNodeType(builder);\n    const method = this.method;\n    const node = this.node;\n\n    if (method !== ColorSpaceNode.LINEAR_TO_LINEAR) {\n      const encodingFunctionNode = EncodingLib[method];\n      return encodingFunctionNode({\n        value: node\n      }).build(builder, type);\n    } else {\n      return node.build(builder, type);\n    }\n  }\n\n}\n\n_defineProperty(ColorSpaceNode, \"LINEAR_TO_LINEAR\", 'LinearToLinear');\n\n_defineProperty(ColorSpaceNode, \"LINEAR_TO_SRGB\", 'LinearTosRGB');\n\nexport default ColorSpaceNode;\nexport { LinearToLinear, LinearTosRGB };\n"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,2CAA5B;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,IAApC,EAA0CC,aAA1C,EAAyDC,GAAzD,EAA8DC,IAA9D,QAA0E,kBAA1E;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,OAA7C;AAEA,MAAMC,cAAc,GAAG,IAAIV,UAAJ,CAAeW,MAAM,IAAI;EAC9C,OAAOA,MAAM,CAACC,KAAd;AACD,CAFsB,CAAvB;AAGA,MAAMC,YAAY,GAAG,IAAIb,UAAJ,CAAeW,MAAM,IAAI;EAC5C,MAAM;IACJC;EADI,IAEFD,MAFJ;EAGA,MAAMG,GAAG,GAAGF,KAAK,CAACE,GAAlB;EACA,MAAMC,CAAC,GAAGd,GAAG,CAACC,GAAG,CAACC,GAAG,CAACS,KAAK,CAACE,GAAP,EAAYV,IAAI,CAAC,OAAD,CAAhB,CAAJ,EAAgC,KAAhC,CAAJ,EAA4CA,IAAI,CAAC,KAAD,CAAhD,CAAb;EACA,MAAMY,CAAC,GAAGd,GAAG,CAACY,GAAD,EAAM,KAAN,CAAb;EACA,MAAMG,MAAM,GAAGb,IAAI,CAACC,aAAa,CAACS,GAAD,EAAMV,IAAI,CAAC,SAAD,CAAV,CAAd,CAAnB;EACA,MAAMc,SAAS,GAAGZ,GAAG,CAACS,CAAD,EAAIC,CAAJ,EAAOC,MAAP,CAArB;EACA,OAAOV,IAAI,CAACW,SAAS,CAACC,CAAX,EAAcD,SAAS,CAACE,CAAxB,EAA2BF,SAAS,CAACF,CAArC,EAAwCJ,KAAK,CAACG,CAA9C,CAAX;AACD,CAVoB,CAArB;AAWA,MAAMM,WAAW,GAAG;EAClBX,cADkB;EAElBG;AAFkB,CAApB;;AAKA,MAAMS,cAAN,SAA6BvB,IAA7B,CAAkC;EAChCwB,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;IACxB,MAAM,MAAN;IACA,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,IAAL,GAAYA,IAAZ;EACD;;EAEDC,YAAY,CAACC,QAAD,EAAW;IACrB,IAAIH,MAAM,GAAG,IAAb;;IAEA,IAAIG,QAAQ,KAAKnB,cAAjB,EAAiC;MAC/BgB,MAAM,GAAG,QAAT;IACD,CAFD,MAEO,IAAIG,QAAQ,KAAKlB,YAAjB,EAA+B;MACpCe,MAAM,GAAG,MAAT;IACD;;IAED,KAAKA,MAAL,GAAc,aAAaA,MAA3B;IACA,OAAO,IAAP;EACD;;EAEDI,QAAQ,CAACC,OAAD,EAAU;IAChB,MAAMC,IAAI,GAAG,KAAKC,WAAL,CAAiBF,OAAjB,CAAb;IACA,MAAML,MAAM,GAAG,KAAKA,MAApB;IACA,MAAMC,IAAI,GAAG,KAAKA,IAAlB;;IAEA,IAAID,MAAM,KAAKF,cAAc,CAACU,gBAA9B,EAAgD;MAC9C,MAAMC,oBAAoB,GAAGZ,WAAW,CAACG,MAAD,CAAxC;MACA,OAAOS,oBAAoB,CAAC;QAC1BrB,KAAK,EAAEa;MADmB,CAAD,CAApB,CAEJS,KAFI,CAEEL,OAFF,EAEWC,IAFX,CAAP;IAGD,CALD,MAKO;MACL,OAAOL,IAAI,CAACS,KAAL,CAAWL,OAAX,EAAoBC,IAApB,CAAP;IACD;EACF;;AAjC+B;;AAqClChC,eAAe,CAACwB,cAAD,EAAiB,kBAAjB,EAAqC,gBAArC,CAAf;;AAEAxB,eAAe,CAACwB,cAAD,EAAiB,gBAAjB,EAAmC,cAAnC,CAAf;;AAEA,eAAeA,cAAf;AACA,SAASZ,cAAT,EAAyBG,YAAzB"},"metadata":{},"sourceType":"module"}