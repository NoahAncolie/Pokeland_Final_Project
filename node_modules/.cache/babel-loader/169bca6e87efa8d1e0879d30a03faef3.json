{"ast":null,"code":"import Node from './Node.js';\n\nclass VarNode extends Node {\n  constructor(node) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let nodeType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    super(nodeType);\n    this.node = node;\n    this.name = name;\n  }\n\n  getHash(builder) {\n    return this.name || super.getHash(builder);\n  }\n\n  getNodeType(builder) {\n    return super.getNodeType(builder) || this.node.getNodeType(builder);\n  }\n\n  generate(builder) {\n    const type = builder.getVectorType(this.getNodeType(builder));\n    const node = this.node;\n    const name = this.name;\n    const snippet = node.build(builder, type);\n    const nodeVar = builder.getVarFromNode(this, type);\n\n    if (name !== null) {\n      nodeVar.name = name;\n    }\n\n    const propertyName = builder.getPropertyName(nodeVar);\n    builder.addFlowCode(`${propertyName} = ${snippet}`);\n    return propertyName;\n  }\n\n}\n\nVarNode.prototype.isVarNode = true;\nexport default VarNode;","map":{"version":3,"names":["Node","VarNode","constructor","node","name","nodeType","getHash","builder","getNodeType","generate","type","getVectorType","snippet","build","nodeVar","getVarFromNode","propertyName","getPropertyName","addFlowCode","prototype","isVarNode"],"sources":["/home/odin/Desktop/THPâ˜ /Developpeur/Final_Project/pokeland/node_modules/three-stdlib/nodes/core/VarNode.js"],"sourcesContent":["import Node from './Node.js';\n\nclass VarNode extends Node {\n  constructor(node, name = null, nodeType = null) {\n    super(nodeType);\n    this.node = node;\n    this.name = name;\n  }\n\n  getHash(builder) {\n    return this.name || super.getHash(builder);\n  }\n\n  getNodeType(builder) {\n    return super.getNodeType(builder) || this.node.getNodeType(builder);\n  }\n\n  generate(builder) {\n    const type = builder.getVectorType(this.getNodeType(builder));\n    const node = this.node;\n    const name = this.name;\n    const snippet = node.build(builder, type);\n    const nodeVar = builder.getVarFromNode(this, type);\n\n    if (name !== null) {\n      nodeVar.name = name;\n    }\n\n    const propertyName = builder.getPropertyName(nodeVar);\n    builder.addFlowCode(`${propertyName} = ${snippet}`);\n    return propertyName;\n  }\n\n}\n\nVarNode.prototype.isVarNode = true;\n\nexport default VarNode;\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,WAAjB;;AAEA,MAAMC,OAAN,SAAsBD,IAAtB,CAA2B;EACzBE,WAAW,CAACC,IAAD,EAAqC;IAAA,IAA9BC,IAA8B,uEAAvB,IAAuB;IAAA,IAAjBC,QAAiB,uEAAN,IAAM;IAC9C,MAAMA,QAAN;IACA,KAAKF,IAAL,GAAYA,IAAZ;IACA,KAAKC,IAAL,GAAYA,IAAZ;EACD;;EAEDE,OAAO,CAACC,OAAD,EAAU;IACf,OAAO,KAAKH,IAAL,IAAa,MAAME,OAAN,CAAcC,OAAd,CAApB;EACD;;EAEDC,WAAW,CAACD,OAAD,EAAU;IACnB,OAAO,MAAMC,WAAN,CAAkBD,OAAlB,KAA8B,KAAKJ,IAAL,CAAUK,WAAV,CAAsBD,OAAtB,CAArC;EACD;;EAEDE,QAAQ,CAACF,OAAD,EAAU;IAChB,MAAMG,IAAI,GAAGH,OAAO,CAACI,aAAR,CAAsB,KAAKH,WAAL,CAAiBD,OAAjB,CAAtB,CAAb;IACA,MAAMJ,IAAI,GAAG,KAAKA,IAAlB;IACA,MAAMC,IAAI,GAAG,KAAKA,IAAlB;IACA,MAAMQ,OAAO,GAAGT,IAAI,CAACU,KAAL,CAAWN,OAAX,EAAoBG,IAApB,CAAhB;IACA,MAAMI,OAAO,GAAGP,OAAO,CAACQ,cAAR,CAAuB,IAAvB,EAA6BL,IAA7B,CAAhB;;IAEA,IAAIN,IAAI,KAAK,IAAb,EAAmB;MACjBU,OAAO,CAACV,IAAR,GAAeA,IAAf;IACD;;IAED,MAAMY,YAAY,GAAGT,OAAO,CAACU,eAAR,CAAwBH,OAAxB,CAArB;IACAP,OAAO,CAACW,WAAR,CAAqB,GAAEF,YAAa,MAAKJ,OAAQ,EAAjD;IACA,OAAOI,YAAP;EACD;;AA7BwB;;AAiC3Bf,OAAO,CAACkB,SAAR,CAAkBC,SAAlB,GAA8B,IAA9B;AAEA,eAAenB,OAAf"},"metadata":{},"sourceType":"module"}