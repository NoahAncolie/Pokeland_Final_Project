{"ast":null,"code":"import { Loader, FileLoader, Group, MeshPhongMaterial, Float32BufferAttribute, Color, BufferGeometry, Mesh, LoaderUtils } from 'three';\nimport { unzipSync } from 'fflate';\n/**\n * Description: Early release of an AMF Loader following the pattern of the\n * example loaders in the three.js project.\n *\n * Usage:\n *\tconst loader = new AMFLoader();\n *\tloader.load('/path/to/project.amf', function(objecttree) {\n *\t\tscene.add(objecttree);\n *\t});\n *\n * Materials now supported, material colors supported\n * Zip support, requires fflate\n * No constellation support (yet)!\n *\n */\n\nclass AMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    function loadDocument(data) {\n      let view = new DataView(data);\n      const magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n\n      if (magic === 'PK') {\n        let zip = null;\n        let file = null;\n        console.log('THREE.AMFLoader: Loading Zip');\n\n        try {\n          zip = unzipSync(new Uint8Array(data));\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.log('THREE.AMFLoader: fflate missing and file is compressed.');\n            return null;\n          }\n        }\n\n        for (file in zip) {\n          if (file.toLowerCase().substr(-4) === '.amf') {\n            break;\n          }\n        }\n\n        console.log('THREE.AMFLoader: Trying to load file asset: ' + file);\n        view = new DataView(zip[file].buffer);\n      }\n\n      const fileText = LoaderUtils.decodeText(view);\n      const xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n\n      if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\n        console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');\n        return null;\n      }\n\n      return xmlData;\n    }\n\n    function loadDocumentScale(node) {\n      let scale = 1.0;\n      let unit = 'millimeter';\n\n      if (node.documentElement.attributes.unit !== undefined) {\n        unit = node.documentElement.attributes.unit.value.toLowerCase();\n      }\n\n      const scaleUnits = {\n        millimeter: 1.0,\n        inch: 25.4,\n        feet: 304.8,\n        meter: 1000.0,\n        micron: 0.001\n      };\n\n      if (scaleUnits[unit] !== undefined) {\n        scale = scaleUnits[unit];\n      }\n\n      console.log('THREE.AMFLoader: Unit scale: ' + scale);\n      return scale;\n    }\n\n    function loadMaterials(node) {\n      let matName = 'AMF Material';\n      const matId = node.attributes.id.textContent;\n      let color = {\n        r: 1.0,\n        g: 1.0,\n        b: 1.0,\n        a: 1.0\n      };\n      let loadedMaterial = null;\n\n      for (let i = 0; i < node.childNodes.length; i++) {\n        const matChildEl = node.childNodes[i];\n\n        if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {\n          if (matChildEl.attributes.type.value === 'name') {\n            matName = matChildEl.textContent;\n          }\n        } else if (matChildEl.nodeName === 'color') {\n          color = loadColor(matChildEl);\n        }\n      }\n\n      loadedMaterial = new MeshPhongMaterial({\n        flatShading: true,\n        color: new Color(color.r, color.g, color.b),\n        name: matName\n      });\n\n      if (color.a !== 1.0) {\n        loadedMaterial.transparent = true;\n        loadedMaterial.opacity = color.a;\n      }\n\n      return {\n        id: matId,\n        material: loadedMaterial\n      };\n    }\n\n    function loadColor(node) {\n      const color = {\n        r: 1.0,\n        g: 1.0,\n        b: 1.0,\n        a: 1.0\n      };\n\n      for (let i = 0; i < node.childNodes.length; i++) {\n        const matColor = node.childNodes[i];\n\n        if (matColor.nodeName === 'r') {\n          color.r = matColor.textContent;\n        } else if (matColor.nodeName === 'g') {\n          color.g = matColor.textContent;\n        } else if (matColor.nodeName === 'b') {\n          color.b = matColor.textContent;\n        } else if (matColor.nodeName === 'a') {\n          color.a = matColor.textContent;\n        }\n      }\n\n      return color;\n    }\n\n    function loadMeshVolume(node) {\n      const volume = {\n        name: '',\n        triangles: [],\n        materialid: null\n      };\n      let currVolumeNode = node.firstElementChild;\n\n      if (node.attributes.materialid !== undefined) {\n        volume.materialId = node.attributes.materialid.nodeValue;\n      }\n\n      while (currVolumeNode) {\n        if (currVolumeNode.nodeName === 'metadata') {\n          if (currVolumeNode.attributes.type !== undefined) {\n            if (currVolumeNode.attributes.type.value === 'name') {\n              volume.name = currVolumeNode.textContent;\n            }\n          }\n        } else if (currVolumeNode.nodeName === 'triangle') {\n          const v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;\n          const v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;\n          const v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;\n          volume.triangles.push(v1, v2, v3);\n        }\n\n        currVolumeNode = currVolumeNode.nextElementSibling;\n      }\n\n      return volume;\n    }\n\n    function loadMeshVertices(node) {\n      const vertArray = [];\n      const normalArray = [];\n      let currVerticesNode = node.firstElementChild;\n\n      while (currVerticesNode) {\n        if (currVerticesNode.nodeName === 'vertex') {\n          let vNode = currVerticesNode.firstElementChild;\n\n          while (vNode) {\n            if (vNode.nodeName === 'coordinates') {\n              const x = vNode.getElementsByTagName('x')[0].textContent;\n              const y = vNode.getElementsByTagName('y')[0].textContent;\n              const z = vNode.getElementsByTagName('z')[0].textContent;\n              vertArray.push(x, y, z);\n            } else if (vNode.nodeName === 'normal') {\n              const nx = vNode.getElementsByTagName('nx')[0].textContent;\n              const ny = vNode.getElementsByTagName('ny')[0].textContent;\n              const nz = vNode.getElementsByTagName('nz')[0].textContent;\n              normalArray.push(nx, ny, nz);\n            }\n\n            vNode = vNode.nextElementSibling;\n          }\n        }\n\n        currVerticesNode = currVerticesNode.nextElementSibling;\n      }\n\n      return {\n        vertices: vertArray,\n        normals: normalArray\n      };\n    }\n\n    function loadObject(node) {\n      const objId = node.attributes.id.textContent;\n      const loadedObject = {\n        name: 'amfobject',\n        meshes: []\n      };\n      let currColor = null;\n      let currObjNode = node.firstElementChild;\n\n      while (currObjNode) {\n        if (currObjNode.nodeName === 'metadata') {\n          if (currObjNode.attributes.type !== undefined) {\n            if (currObjNode.attributes.type.value === 'name') {\n              loadedObject.name = currObjNode.textContent;\n            }\n          }\n        } else if (currObjNode.nodeName === 'color') {\n          currColor = loadColor(currObjNode);\n        } else if (currObjNode.nodeName === 'mesh') {\n          let currMeshNode = currObjNode.firstElementChild;\n          const mesh = {\n            vertices: [],\n            normals: [],\n            volumes: [],\n            color: currColor\n          };\n\n          while (currMeshNode) {\n            if (currMeshNode.nodeName === 'vertices') {\n              const loadedVertices = loadMeshVertices(currMeshNode);\n              mesh.normals = mesh.normals.concat(loadedVertices.normals);\n              mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n            } else if (currMeshNode.nodeName === 'volume') {\n              mesh.volumes.push(loadMeshVolume(currMeshNode));\n            }\n\n            currMeshNode = currMeshNode.nextElementSibling;\n          }\n\n          loadedObject.meshes.push(mesh);\n        }\n\n        currObjNode = currObjNode.nextElementSibling;\n      }\n\n      return {\n        id: objId,\n        obj: loadedObject\n      };\n    }\n\n    const xmlData = loadDocument(data);\n    let amfName = '';\n    let amfAuthor = '';\n    const amfScale = loadDocumentScale(xmlData);\n    const amfMaterials = {};\n    const amfObjects = {};\n    const childNodes = xmlData.documentElement.childNodes;\n    let i, j;\n\n    for (i = 0; i < childNodes.length; i++) {\n      const child = childNodes[i];\n\n      if (child.nodeName === 'metadata') {\n        if (child.attributes.type !== undefined) {\n          if (child.attributes.type.value === 'name') {\n            amfName = child.textContent;\n          } else if (child.attributes.type.value === 'author') {\n            amfAuthor = child.textContent;\n          }\n        }\n      } else if (child.nodeName === 'material') {\n        const loadedMaterial = loadMaterials(child);\n        amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n      } else if (child.nodeName === 'object') {\n        const loadedObject = loadObject(child);\n        amfObjects[loadedObject.id] = loadedObject.obj;\n      }\n    }\n\n    const sceneObject = new Group();\n    const defaultMaterial = new MeshPhongMaterial({\n      color: 0xaaaaff,\n      flatShading: true\n    });\n    sceneObject.name = amfName;\n    sceneObject.userData.author = amfAuthor;\n    sceneObject.userData.loader = 'AMF';\n\n    for (const id in amfObjects) {\n      const part = amfObjects[id];\n      const meshes = part.meshes;\n      const newObject = new Group();\n      newObject.name = part.name || '';\n\n      for (i = 0; i < meshes.length; i++) {\n        let objDefaultMaterial = defaultMaterial;\n        const mesh = meshes[i];\n        const vertices = new Float32BufferAttribute(mesh.vertices, 3);\n        let normals = null;\n\n        if (mesh.normals.length) {\n          normals = new Float32BufferAttribute(mesh.normals, 3);\n        }\n\n        if (mesh.color) {\n          const color = mesh.color;\n          objDefaultMaterial = defaultMaterial.clone();\n          objDefaultMaterial.color = new Color(color.r, color.g, color.b);\n\n          if (color.a !== 1.0) {\n            objDefaultMaterial.transparent = true;\n            objDefaultMaterial.opacity = color.a;\n          }\n        }\n\n        const volumes = mesh.volumes;\n\n        for (j = 0; j < volumes.length; j++) {\n          const volume = volumes[j];\n          const newGeometry = new BufferGeometry();\n          let material = objDefaultMaterial;\n          newGeometry.setIndex(volume.triangles);\n          newGeometry.setAttribute('position', vertices.clone());\n\n          if (normals) {\n            newGeometry.setAttribute('normal', normals.clone());\n          }\n\n          if (amfMaterials[volume.materialId] !== undefined) {\n            material = amfMaterials[volume.materialId];\n          }\n\n          newGeometry.scale(amfScale, amfScale, amfScale);\n          newObject.add(new Mesh(newGeometry, material.clone()));\n        }\n      }\n\n      sceneObject.add(newObject);\n    }\n\n    return sceneObject;\n  }\n\n}\n\nexport { AMFLoader };","map":{"version":3,"names":["Loader","FileLoader","Group","MeshPhongMaterial","Float32BufferAttribute","Color","BufferGeometry","Mesh","LoaderUtils","unzipSync","AMFLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","loadDocument","view","DataView","magic","String","fromCharCode","getUint8","zip","file","log","Uint8Array","ReferenceError","toLowerCase","substr","buffer","fileText","decodeText","xmlData","DOMParser","parseFromString","documentElement","nodeName","loadDocumentScale","node","scale","unit","attributes","undefined","value","scaleUnits","millimeter","inch","feet","meter","micron","loadMaterials","matName","matId","id","textContent","color","r","g","b","a","loadedMaterial","i","childNodes","length","matChildEl","type","loadColor","flatShading","name","transparent","opacity","material","matColor","loadMeshVolume","volume","triangles","materialid","currVolumeNode","firstElementChild","materialId","nodeValue","v1","getElementsByTagName","v2","v3","push","nextElementSibling","loadMeshVertices","vertArray","normalArray","currVerticesNode","vNode","x","y","z","nx","ny","nz","vertices","normals","loadObject","objId","loadedObject","meshes","currColor","currObjNode","currMeshNode","mesh","volumes","loadedVertices","concat","obj","amfName","amfAuthor","amfScale","amfMaterials","amfObjects","j","child","sceneObject","defaultMaterial","userData","author","part","newObject","objDefaultMaterial","clone","newGeometry","setIndex","setAttribute","add"],"sources":["/home/odin/Desktop/THP☠/Developpeur/Final_Project/pokeland/node_modules/three-stdlib/loaders/AMFLoader.js"],"sourcesContent":["import { Loader, FileLoader, Group, MeshPhongMaterial, Float32BufferAttribute, Color, BufferGeometry, Mesh, LoaderUtils } from 'three';\nimport { unzipSync } from 'fflate';\n\n/**\n * Description: Early release of an AMF Loader following the pattern of the\n * example loaders in the three.js project.\n *\n * Usage:\n *\tconst loader = new AMFLoader();\n *\tloader.load('/path/to/project.amf', function(objecttree) {\n *\t\tscene.add(objecttree);\n *\t});\n *\n * Materials now supported, material colors supported\n * Zip support, requires fflate\n * No constellation support (yet)!\n *\n */\n\nclass AMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    function loadDocument(data) {\n      let view = new DataView(data);\n      const magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n\n      if (magic === 'PK') {\n        let zip = null;\n        let file = null;\n        console.log('THREE.AMFLoader: Loading Zip');\n\n        try {\n          zip = unzipSync(new Uint8Array(data));\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.log('THREE.AMFLoader: fflate missing and file is compressed.');\n            return null;\n          }\n        }\n\n        for (file in zip) {\n          if (file.toLowerCase().substr(-4) === '.amf') {\n            break;\n          }\n        }\n\n        console.log('THREE.AMFLoader: Trying to load file asset: ' + file);\n        view = new DataView(zip[file].buffer);\n      }\n\n      const fileText = LoaderUtils.decodeText(view);\n      const xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n\n      if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\n        console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');\n        return null;\n      }\n\n      return xmlData;\n    }\n\n    function loadDocumentScale(node) {\n      let scale = 1.0;\n      let unit = 'millimeter';\n\n      if (node.documentElement.attributes.unit !== undefined) {\n        unit = node.documentElement.attributes.unit.value.toLowerCase();\n      }\n\n      const scaleUnits = {\n        millimeter: 1.0,\n        inch: 25.4,\n        feet: 304.8,\n        meter: 1000.0,\n        micron: 0.001\n      };\n\n      if (scaleUnits[unit] !== undefined) {\n        scale = scaleUnits[unit];\n      }\n\n      console.log('THREE.AMFLoader: Unit scale: ' + scale);\n      return scale;\n    }\n\n    function loadMaterials(node) {\n      let matName = 'AMF Material';\n      const matId = node.attributes.id.textContent;\n      let color = {\n        r: 1.0,\n        g: 1.0,\n        b: 1.0,\n        a: 1.0\n      };\n      let loadedMaterial = null;\n\n      for (let i = 0; i < node.childNodes.length; i++) {\n        const matChildEl = node.childNodes[i];\n\n        if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {\n          if (matChildEl.attributes.type.value === 'name') {\n            matName = matChildEl.textContent;\n          }\n        } else if (matChildEl.nodeName === 'color') {\n          color = loadColor(matChildEl);\n        }\n      }\n\n      loadedMaterial = new MeshPhongMaterial({\n        flatShading: true,\n        color: new Color(color.r, color.g, color.b),\n        name: matName\n      });\n\n      if (color.a !== 1.0) {\n        loadedMaterial.transparent = true;\n        loadedMaterial.opacity = color.a;\n      }\n\n      return {\n        id: matId,\n        material: loadedMaterial\n      };\n    }\n\n    function loadColor(node) {\n      const color = {\n        r: 1.0,\n        g: 1.0,\n        b: 1.0,\n        a: 1.0\n      };\n\n      for (let i = 0; i < node.childNodes.length; i++) {\n        const matColor = node.childNodes[i];\n\n        if (matColor.nodeName === 'r') {\n          color.r = matColor.textContent;\n        } else if (matColor.nodeName === 'g') {\n          color.g = matColor.textContent;\n        } else if (matColor.nodeName === 'b') {\n          color.b = matColor.textContent;\n        } else if (matColor.nodeName === 'a') {\n          color.a = matColor.textContent;\n        }\n      }\n\n      return color;\n    }\n\n    function loadMeshVolume(node) {\n      const volume = {\n        name: '',\n        triangles: [],\n        materialid: null\n      };\n      let currVolumeNode = node.firstElementChild;\n\n      if (node.attributes.materialid !== undefined) {\n        volume.materialId = node.attributes.materialid.nodeValue;\n      }\n\n      while (currVolumeNode) {\n        if (currVolumeNode.nodeName === 'metadata') {\n          if (currVolumeNode.attributes.type !== undefined) {\n            if (currVolumeNode.attributes.type.value === 'name') {\n              volume.name = currVolumeNode.textContent;\n            }\n          }\n        } else if (currVolumeNode.nodeName === 'triangle') {\n          const v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;\n          const v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;\n          const v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;\n          volume.triangles.push(v1, v2, v3);\n        }\n\n        currVolumeNode = currVolumeNode.nextElementSibling;\n      }\n\n      return volume;\n    }\n\n    function loadMeshVertices(node) {\n      const vertArray = [];\n      const normalArray = [];\n      let currVerticesNode = node.firstElementChild;\n\n      while (currVerticesNode) {\n        if (currVerticesNode.nodeName === 'vertex') {\n          let vNode = currVerticesNode.firstElementChild;\n\n          while (vNode) {\n            if (vNode.nodeName === 'coordinates') {\n              const x = vNode.getElementsByTagName('x')[0].textContent;\n              const y = vNode.getElementsByTagName('y')[0].textContent;\n              const z = vNode.getElementsByTagName('z')[0].textContent;\n              vertArray.push(x, y, z);\n            } else if (vNode.nodeName === 'normal') {\n              const nx = vNode.getElementsByTagName('nx')[0].textContent;\n              const ny = vNode.getElementsByTagName('ny')[0].textContent;\n              const nz = vNode.getElementsByTagName('nz')[0].textContent;\n              normalArray.push(nx, ny, nz);\n            }\n\n            vNode = vNode.nextElementSibling;\n          }\n        }\n\n        currVerticesNode = currVerticesNode.nextElementSibling;\n      }\n\n      return {\n        vertices: vertArray,\n        normals: normalArray\n      };\n    }\n\n    function loadObject(node) {\n      const objId = node.attributes.id.textContent;\n      const loadedObject = {\n        name: 'amfobject',\n        meshes: []\n      };\n      let currColor = null;\n      let currObjNode = node.firstElementChild;\n\n      while (currObjNode) {\n        if (currObjNode.nodeName === 'metadata') {\n          if (currObjNode.attributes.type !== undefined) {\n            if (currObjNode.attributes.type.value === 'name') {\n              loadedObject.name = currObjNode.textContent;\n            }\n          }\n        } else if (currObjNode.nodeName === 'color') {\n          currColor = loadColor(currObjNode);\n        } else if (currObjNode.nodeName === 'mesh') {\n          let currMeshNode = currObjNode.firstElementChild;\n          const mesh = {\n            vertices: [],\n            normals: [],\n            volumes: [],\n            color: currColor\n          };\n\n          while (currMeshNode) {\n            if (currMeshNode.nodeName === 'vertices') {\n              const loadedVertices = loadMeshVertices(currMeshNode);\n              mesh.normals = mesh.normals.concat(loadedVertices.normals);\n              mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n            } else if (currMeshNode.nodeName === 'volume') {\n              mesh.volumes.push(loadMeshVolume(currMeshNode));\n            }\n\n            currMeshNode = currMeshNode.nextElementSibling;\n          }\n\n          loadedObject.meshes.push(mesh);\n        }\n\n        currObjNode = currObjNode.nextElementSibling;\n      }\n\n      return {\n        id: objId,\n        obj: loadedObject\n      };\n    }\n\n    const xmlData = loadDocument(data);\n    let amfName = '';\n    let amfAuthor = '';\n    const amfScale = loadDocumentScale(xmlData);\n    const amfMaterials = {};\n    const amfObjects = {};\n    const childNodes = xmlData.documentElement.childNodes;\n    let i, j;\n\n    for (i = 0; i < childNodes.length; i++) {\n      const child = childNodes[i];\n\n      if (child.nodeName === 'metadata') {\n        if (child.attributes.type !== undefined) {\n          if (child.attributes.type.value === 'name') {\n            amfName = child.textContent;\n          } else if (child.attributes.type.value === 'author') {\n            amfAuthor = child.textContent;\n          }\n        }\n      } else if (child.nodeName === 'material') {\n        const loadedMaterial = loadMaterials(child);\n        amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n      } else if (child.nodeName === 'object') {\n        const loadedObject = loadObject(child);\n        amfObjects[loadedObject.id] = loadedObject.obj;\n      }\n    }\n\n    const sceneObject = new Group();\n    const defaultMaterial = new MeshPhongMaterial({\n      color: 0xaaaaff,\n      flatShading: true\n    });\n    sceneObject.name = amfName;\n    sceneObject.userData.author = amfAuthor;\n    sceneObject.userData.loader = 'AMF';\n\n    for (const id in amfObjects) {\n      const part = amfObjects[id];\n      const meshes = part.meshes;\n      const newObject = new Group();\n      newObject.name = part.name || '';\n\n      for (i = 0; i < meshes.length; i++) {\n        let objDefaultMaterial = defaultMaterial;\n        const mesh = meshes[i];\n        const vertices = new Float32BufferAttribute(mesh.vertices, 3);\n        let normals = null;\n\n        if (mesh.normals.length) {\n          normals = new Float32BufferAttribute(mesh.normals, 3);\n        }\n\n        if (mesh.color) {\n          const color = mesh.color;\n          objDefaultMaterial = defaultMaterial.clone();\n          objDefaultMaterial.color = new Color(color.r, color.g, color.b);\n\n          if (color.a !== 1.0) {\n            objDefaultMaterial.transparent = true;\n            objDefaultMaterial.opacity = color.a;\n          }\n        }\n\n        const volumes = mesh.volumes;\n\n        for (j = 0; j < volumes.length; j++) {\n          const volume = volumes[j];\n          const newGeometry = new BufferGeometry();\n          let material = objDefaultMaterial;\n          newGeometry.setIndex(volume.triangles);\n          newGeometry.setAttribute('position', vertices.clone());\n\n          if (normals) {\n            newGeometry.setAttribute('normal', normals.clone());\n          }\n\n          if (amfMaterials[volume.materialId] !== undefined) {\n            material = amfMaterials[volume.materialId];\n          }\n\n          newGeometry.scale(amfScale, amfScale, amfScale);\n          newObject.add(new Mesh(newGeometry, material.clone()));\n        }\n      }\n\n      sceneObject.add(newObject);\n    }\n\n    return sceneObject;\n  }\n\n}\n\nexport { AMFLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}