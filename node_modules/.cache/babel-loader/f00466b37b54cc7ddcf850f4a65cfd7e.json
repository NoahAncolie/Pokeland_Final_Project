{"ast":null,"code":"import { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nclass SSAOPass extends Pass {\n  constructor(scene, camera, width, height) {\n    super();\n    this.width = width !== undefined ? width : 512;\n    this.height = height !== undefined ? height : 512;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.kernelRadius = 8;\n    this.kernelSize = 32;\n    this.kernel = [];\n    this.noiseTexture = null;\n    this.output = 0;\n    this.minDistance = 0.005;\n    this.maxDistance = 0.1;\n    this._visibilityCache = new Map(); //\n\n    this.generateSampleKernel();\n    this.generateRandomKernelRotations(); // beauty render target\n\n    const depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height); // normal render target with depth buffer\n\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture: depthTexture\n    }); // ssao render target\n\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\n\n    if (SSAOShader === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n    }\n\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n    this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n    this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n    this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\n    this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\n    this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending; // blur material\n\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n    this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // material for rendering the depth\n\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n\n  dispose() {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose(); // dispose materials\n\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  }\n\n  render(renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */\n  ) {\n    if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat; // render beauty\n\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    this.restoreVisibility(); // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.');\n    }\n  }\n\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n  }\n\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize;\n    const kernel = this.kernel;\n\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      let scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  }\n\n  generateRandomKernelRotations() {\n    const width = 4,\n          height = 4;\n\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n    }\n\n    const simplex = new SimplexNoise();\n    const size = width * height;\n    const data = new Float32Array(size);\n\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1;\n      const y = Math.random() * 2 - 1;\n      const z = 0;\n      data[i] = simplex.noise3d(x, y, z);\n    }\n\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n    this.noiseTexture.needsUpdate = true;\n  }\n\n  overrideVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  }\n\n  restoreVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      const visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n\n}\n\nSSAOPass.OUTPUT = {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n};\nexport { SSAOPass };","map":{"version":3,"names":["DepthTexture","DepthStencilFormat","UnsignedInt248Type","WebGLRenderTarget","NearestFilter","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","Color","LuminanceFormat","CustomBlending","Vector3","MathUtils","DataTexture","RedFormat","FloatType","RepeatWrapping","Pass","FullScreenQuad","SimplexNoise","SSAOShader","SSAOBlurShader","SSAODepthShader","CopyShader","SSAOPass","constructor","scene","camera","width","height","undefined","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","format","type","beautyRenderTarget","normalRenderTarget","minFilter","magFilter","ssaoRenderTarget","blurRenderTarget","clone","console","error","ssaoMaterial","defines","Object","assign","uniforms","vertexShader","fragmentShader","blending","value","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","blurMaterial","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","dispose","render","renderer","writeBuffer","capabilities","isWebGL2","setRenderTarget","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","x","Math","random","y","z","normalize","scale","lerp","multiplyScalar","push","simplex","size","data","Float32Array","noise3d","wrapS","wrapT","needsUpdate","cache","traverse","object","visible","isPoints","isLine","get"],"sources":["/home/odin/Desktop/THP☠/Developpeur/Final_Project/pokeland/node_modules/three-stdlib/postprocessing/SSAOPass.js"],"sourcesContent":["import { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nclass SSAOPass extends Pass {\n  constructor(scene, camera, width, height) {\n    super();\n    this.width = width !== undefined ? width : 512;\n    this.height = height !== undefined ? height : 512;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.kernelRadius = 8;\n    this.kernelSize = 32;\n    this.kernel = [];\n    this.noiseTexture = null;\n    this.output = 0;\n    this.minDistance = 0.005;\n    this.maxDistance = 0.1;\n    this._visibilityCache = new Map(); //\n\n    this.generateSampleKernel();\n    this.generateRandomKernelRotations(); // beauty render target\n\n    const depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height); // normal render target with depth buffer\n\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture: depthTexture\n    }); // ssao render target\n\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\n\n    if (SSAOShader === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n    }\n\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n    this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n    this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n    this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\n    this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\n    this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending; // blur material\n\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n    this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // material for rendering the depth\n\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n\n  dispose() {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose(); // dispose materials\n\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  }\n\n  render(renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */\n  ) {\n    if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat; // render beauty\n\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    this.restoreVisibility(); // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.');\n    }\n  }\n\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n  }\n\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize;\n    const kernel = this.kernel;\n\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      let scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  }\n\n  generateRandomKernelRotations() {\n    const width = 4,\n          height = 4;\n\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n    }\n\n    const simplex = new SimplexNoise();\n    const size = width * height;\n    const data = new Float32Array(size);\n\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1;\n      const y = Math.random() * 2 - 1;\n      const z = 0;\n      data[i] = simplex.noise3d(x, y, z);\n    }\n\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n    this.noiseTexture.needsUpdate = true;\n  }\n\n  overrideVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  }\n\n  restoreVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      const visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n\n}\n\nSSAOPass.OUTPUT = {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n};\n\nexport { SSAOPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}